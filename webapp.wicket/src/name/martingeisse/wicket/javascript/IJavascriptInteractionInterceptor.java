/**
 * Copyright (c) 2010 Martin Geisse
 *
 * This file is distributed under the terms of the MIT license.
 */

package name.martingeisse.wicket.javascript;

import java.io.Serializable;

/**
 * Implementations of this interface are able to "intercept" commands
 * and inject custom behavior. Assume that a component provides a specific
 * feature that involves user interaction with Javascript. If this component
 * allows to install an interceptor, then this interceptor can provide
 * additional client-side functionality *before* a server round-trip
 * occurs.
 * 
 * A typical example for an interceptor is {@link #CONFIRM}: This interceptor
 * displays a Javascript confirmation dialog before the Javascript continues.
 * The original action is only executed if confirmed.
 * 
 * Implementation: A component provides interceptor support by allowing its
 * calling code to set an interceptor. When it generates the relevant piece
 * of Javascript code, it wraps that code in a function and instead invokes
 * a Javascript function generated by the interceptor, passing the original
 * function. How interceptors work is best explained by using three simple examples:
 * - the {@link #SKIP} interceptor function does nothing, so the original
 *   action is skipped
 * - the {@link #PASS} interceptor function simply calls the original function,
 *   acting as a "null" interceptor
 * - the {@link #CONFIRM} interceptor function opens a confirmation dialog
 *   and calls the original function if and only if the user confirms the action. 
 * 
 * On a lower level, the interceptor has a method that generates the above-mentioned
 * Javascript interceptor function (as a JS function expression).
 */
public interface IJavascriptInteractionInterceptor extends Serializable {

	/**
	 * Prints the interceptor function of this interceptor to the specified builder.
	 * @param builder the string builder to write to
	 */
	public void printInterceptorFunction(StringBuilder builder);

	/**
	 * Does not call the original function.
	 */
	public static final IJavascriptInteractionInterceptor SKIP = new IJavascriptInteractionInterceptor() {
		@Override
		public void printInterceptorFunction(StringBuilder builder) {
			builder.append("function(f){}");
		}
	};

	/**
	 * Simply calls the original function.
	 */
	public static final IJavascriptInteractionInterceptor PASS = new IJavascriptInteractionInterceptor() {
		@Override
		public void printInterceptorFunction(StringBuilder builder) {
			builder.append("function(f){f();}");
		}
	};

	/**
	 * Opens a confirmation dialog and calls the original function if and only
	 * if the user confirmed.
	 */
	public static final IJavascriptInteractionInterceptor CONFIRM = new IJavascriptInteractionInterceptor() {
		@Override
		public void printInterceptorFunction(StringBuilder builder) {
			builder.append("function(f){if(confirm('Are you sure?'))f();}");
		}
	};
	
}
