
The goal of Phunky is NOT to replicate all the weirdness of the real PHP. If
somebody wants that, just use PHP. Instead, Phunky should be *less* weird,
and prevent mistakes where PHP encourages them. Where PHP causes people to write
buggy programs, Phunky should not replicate this behavior.

The goal of Phunky is NOT to be a drop-in replacement for PHP. Such a thing is
not needed. Instead, Phunky should be designed for places where PHP sucks, such
as scripting another application. 

It is nice if Phunky supports running existing PHP applications and frameworks.
However, clean design should not be sacrificed to achieve this goal, even less
to run existing code *unchanged*. 

Example: PHP does not use a unified internal string encoding. String literals
are simply stored in whatever encoding the source file used. Phunky, in contrast,
expects source code to be UTF-8 encoded, and converts string literals to an
internal encoding (one string element per Unicode character) that PHP doesn't
even have. 

----------------------------------

Finding the goal of the Phunky project is becoming more important because PHP
shows more and more weirdness the deeper you dig:
	
	$$x = 15; // uses the variable $x as the name of the variable to set...
		// not really weird but error-prone and marginally useful
		
	Operator precendence documentation is wrong, and the English and German
		versions tell vastly different things. Real operator precedence in the
		implementation is often not as expected ( == >=, ?:)

	$ is explained as an operator, but actually isn't (can only be used in a few
		special places)
		
	References to array elements do not work as explained, because references
		in general work different as explained. (Explained: multiple names for
		one variable; actual: reference flag in zval structure)
	
Therefore, it is important to find the purpose of the whole project:
- drop-in replacement for PHP, runs PHP projects...?
- PHP-like scripting language for applications...?
- PHP-like application development language...?

----------------------------------

The "goal question" can be mitigated by saying, "Phunky is a framework to implement
PHP-like languages, including a 100% compatible PHP clone" -- not a language itself.
I need a good naming scheme then, so the framework won't be confused with the
language. (-> "Phun" = Language, "Phunky" = Framework ?)

PHP vs. PHP+: 
- AST classes that support the constructs from both Ls
- different parsers (or parser with feature flags), e.g.
	- PHP ?: behavior, PHP+ forbids ?: chaining
	- indirect variable access ($$x) in PHP, PHP+ forbids these
	- == vs. >= precedence (this probably needs a different parser)
- behavior of references -- this is going to be tough (but see below)
- string encoding:
	- parser option how to treat string literals
	- implementation class BinaryString vs. Java String (uses a byte[] instead of char[],
		doesn't store an encoding).
	- alt. implementation: use String (char[]) to store a byte array)
	- probably needs a different set of built-in string handling functions
	- going to be cumbersome because this needs to be supported in *all* extensions
		f.ex. MySQL: Java wants to use Strings and encode them at the end, this itself
		is a problem with MySQL because the encoding handling of MySQL is unclear; how
		table encoding and connection encoding work together. Binary Strings add
		another layer of complexity: a BinaryString needs an encoding to become a String,
		that is then sent to MySQL.
			-> JDBC has a connection encoding: http://stackoverflow.com/questions/3040597/jdbc-character-encoding
			Unclear if it actually re-codes strings if it is using the wrong encoding. Might be
			that the JDBC encoding is used to turn Java Strings into Binary Strings again
			and MySQL only uses binary strings.
			-> MySQL actually *does* a re-coding, but to an encoding that can be configured, so it is
			   still unclear how this relates to the encoding used in target tables:
			   http://dev.mysql.com/doc/refman/5.0/en/charset-connection.html
		-> Extensions need a helper funtion that converts a value to a string of an extension-defined
			(passed-as-parameter) encoding. This will turn non-string values to string, encode Java
			strings using that encoding, and re-code BinaryStrings (from what encoding !? -> maybe not
			re-code but *interpret* binary strings using that encoding).

The encoding issues alone suggest that building a drop-in replacement for PHP is going to be
extremely hard, not to mention reproducing all weird behavior of the standard library. 
->
Seems like building just a PHP-like language for application scripting is much more fun.

----------------------------------

References: I think to rebuild references even remotely they work as in PHP, I have to rebuild the
"zval" structure. Anything else is going to be different. This isn't going to be nice performance-wise,
but then, nothing is. Performance lies in optimized libraries that are implemented in Java; the PHP
code is going to be slow either way.

This also makes aiming for a 100% PHP compatibility mode easier (encodings will still be tough). But if encodings
are the last hurdle, there's at least some hope to be fully compatible, and this would probably attract *lots*
of developers.

----------------------------------

Encodings:
- clearly document the data flow in the Java parts of the system
- provide configuration switches that can be set from PHP in all relevant places
- leave it to the system architect to make choices for these switches

Leaving choices to the architect is ok because somebody who just wants a no-work, 100% compatible drop-in
replacement for PHP won't find one besides PHP itself. Instead of trying to replicate every single weird
behavior, better provide the tools to implement *expected* behavior. This is a one-time configuration effort
anyway.

(all this is unlike references, which are not a one-time configuration issue, but part of the core language that
affects everyday programming)

----------------------------------

There is still the question whether reproducing the exact reference behavior is useful, since most PHP
programmers don't know about it. This depends, again, on the goals of this project:
- drop-in replacement: 99% compatibility required
- unit testing framework: 200% compatibility required
- PHP-like scripting language: 50% compatibility required

OTOH, I have to check whether a data structure that is 99% PHP-array-like could be implemented in another
way *at all*. If not, full compatibility might even be the easiest way to implement it. (Aside from leaving
references out of the language at all, but that's probably a bit over the top).
->
For example, implementing references as specified by the PHP documentation requires either of:
- making a defensive copy of arrays on each assignment
- using reference flags and checking for them on each assignment
- propagating the reference flag to "outer" arrays
--
The whole problem is basically a "reference to an inner variable of a container data structure", and knowing
about this when dealing with the container structure. Worse, when using nested arrays, an inner array could
be passed by-value to a function and that function could create a reference to an element, which would have
to be propagated to the outer array, which is unknown at that point (barring either a backreference to the
container array within the inner array, or defensive copies).
->
Seems like implementing references "similar to PHP" leaves "exactly like PHP" as the only choice. So I might
as well do that.

Next question: Can I extend the Variable class to be like _zval_struct, or is zval-like behavior needed not
only for variables but also for (temporary) *values*? What about returning by reference?
->
Could work if Expression.getVariable() is implemented by function calls, and parameters have an "is reference"
flag that says whether they create a new variable with the same value, or call getVariable() and re-use the
variable. That way, at least not every expression has to create a zval instance. Not using zval for temporary
values basically means, "skip the zval in those cases where we know that only its value is used", with
getVariable() / getOrCreateVariable() telling the expression that we *do* need the zval / Variable and not
only its value. So using Variable instead of zval is ok.
--
But maybe rename getVariable() because it looks too much like a simple getter and not like the side-effect
loaded thing it is.

Next question: is the refcount part of PhpArray or of Variable? What about is_ref? "Like PHP" would be in
Variable.

----------------------------------

Just read this: "Not even PHP behaves like PHP". That is, incompatibilities between Phunky and PHP should
be bounded (in volume) by incompatibilities between different PHP versions; being more compatible is
desirable but not absolutely necessary. Any re-usable PHP software (e.g. frameworks) have to deal with
incompatibilities anyway, so it's OK if I cannot avoid then; I just keep them to a minimum and provide
the tools to deal with them.



