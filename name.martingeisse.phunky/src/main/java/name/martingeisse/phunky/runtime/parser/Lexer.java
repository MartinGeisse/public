/* The following code was generated by JFlex 1.5.1 */

// ---------------------------------------------------------------------------------------------------------
// --- header information
// ---------------------------------------------------------------------------------------------------------

// imports
package name.martingeisse.phunky.runtime.parser;

import java_cup.runtime.*;
import java_cup.runtime.ComplexSymbolFactory.Location;
import name.martingeisse.phunky.runtime.code.expression.LocalVariableExpression;

/**
 * The Lexer.
 */
@SuppressWarnings("all")
public class Lexer implements java_cup.runtime.Scanner {

	/** This character denotes the end of file */
	public static final int YYEOF = -1;

	/** initial size of the lookahead buffer */
	private static final int ZZ_BUFFERSIZE = 16384;

	/** lexical states */
	public static final int YYINITIAL = 0;
	public static final int CODE = 2;
	public static final int SINGLE_QUOTED_STRING = 4;
	public static final int DOUBLE_QUOTED_STRING = 6;
	public static final int HEREDOC_NOWDOC = 8;

	/**
	 * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
	 * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
	 *                  at the beginning of a line
	 * l is of the form l = 2*k, k a non negative integer
	 */
	private static final int ZZ_LEXSTATE[] = {
		0, 0, 1, 1, 2, 2, 3, 3, 4, 4
	};

	/** 
	 * Translates characters to character classes
	 */
	private static final String ZZ_CMAP_PACKED = "\11\0\1\3\1\2\1\23\1\24\1\1\22\0\1\3\1\72\1\21" + "\1\0\1\17\1\70\1\73\1\22\1\32\1\33\1\5\1\67\1\43"
		+ "\1\40\1\71\1\4\1\6\1\14\10\7\1\42\1\41\1\20\1\30" + "\1\31\1\25\1\100\1\11\1\13\4\11\24\15\1\36\1\103\1\37" + "\1\76\1\101\1\0\1\54\1\12\1\47\1\60\1\56\1\44\1\66"
		+ "\1\27\1\51\1\77\1\64\1\53\1\61\1\46\1\52\1\26\1\102" + "\1\57\1\55\1\50\1\45\1\62\1\63\1\10\1\65\1\15\1\34" + "\1\74\1\35\1\75\6\0\1\23\44\0\1\15\12\0\1\15\4\0"
		+ "\1\15\5\0\27\15\1\0\37\15\1\0\u01ca\15\4\0\14\15\16\0" + "\5\15\7\0\1\15\1\0\1\15\126\0\1\15\52\0\5\15\1\0" + "\2\15\2\0\4\15\10\0\1\15\1\0\3\15\1\0\1\15\1\0"
		+ "\24\15\1\0\123\15\1\0\213\15\10\0\236\15\11\0\46\15\2\0" + "\1\15\7\0\47\15\50\0\16\15\1\0\1\15\1\0\2\15\1\0" + "\2\15\1\0\1\15\10\0\33\15\5\0\3\15\35\0\13\15\5\0"
		+ "\70\15\1\0\7\15\12\16\4\0\146\15\1\0\10\15\4\0\10\15" + "\4\0\3\15\12\16\3\15\2\0\1\15\20\0\60\15\15\0\145\15" + "\16\0\12\16\41\15\11\0\2\15\4\0\1\15\5\0\30\15\2\0"
		+ "\23\15\23\0\31\15\107\0\1\15\1\0\13\15\67\0\6\15\6\0" + "\17\15\1\0\74\15\1\0\20\15\1\0\3\15\4\0\17\15\2\0" + "\12\16\1\0\7\15\1\0\7\15\1\0\3\15\1\0\10\15\2\0"
		+ "\2\15\2\0\26\15\1\0\7\15\1\0\1\15\3\0\4\15\3\0" + "\10\15\2\0\2\15\2\0\2\15\1\0\1\15\10\0\1\15\4\0" + "\2\15\1\0\5\15\2\0\12\16\2\15\17\0\3\15\1\0\6\15"
		+ "\4\0\2\15\2\0\26\15\1\0\7\15\1\0\2\15\1\0\2\15" + "\1\0\2\15\4\0\5\15\4\0\2\15\2\0\2\15\4\0\1\15" + "\7\0\4\15\1\0\1\15\7\0\12\16\6\15\13\0\3\15\1\0"
		+ "\11\15\1\0\3\15\1\0\26\15\1\0\7\15\1\0\2\15\1\0" + "\5\15\3\0\11\15\1\0\3\15\1\0\2\15\3\0\1\15\17\0" + "\4\15\2\0\12\16\21\0\3\15\1\0\10\15\2\0\2\15\2\0"
		+ "\26\15\1\0\7\15\1\0\2\15\1\0\5\15\3\0\10\15\2\0" + "\2\15\2\0\2\15\11\0\2\15\4\0\2\15\1\0\5\15\2\0" + "\12\16\1\0\1\15\20\0\2\15\1\0\6\15\3\0\3\15\1\0"
		+ "\4\15\3\0\2\15\1\0\1\15\1\0\2\15\3\0\2\15\3\0" + "\3\15\3\0\14\15\4\0\5\15\3\0\3\15\1\0\3\15\3\0" + "\1\15\6\0\1\15\16\0\12\16\21\0\3\15\1\0\10\15\1\0"
		+ "\3\15\1\0\27\15\1\0\12\15\1\0\5\15\3\0\10\15\1\0" + "\3\15\1\0\3\15\10\0\2\15\1\0\2\15\6\0\4\15\2\0" + "\12\16\22\0\2\15\1\0\10\15\1\0\3\15\1\0\27\15\1\0"
		+ "\12\15\1\0\5\15\3\0\10\15\1\0\3\15\1\0\3\15\10\0" + "\2\15\7\0\1\15\1\0\4\15\2\0\12\16\1\0\2\15\17\0" + "\2\15\1\0\10\15\1\0\3\15\1\0\51\15\2\0\10\15\1\0"
		+ "\3\15\1\0\3\15\1\0\1\15\10\0\1\15\10\0\4\15\2\0" + "\12\16\12\0\6\15\2\0\2\15\1\0\22\15\3\0\30\15\1\0" + "\11\15\1\0\1\15\2\0\7\15\10\0\6\15\1\0\1\15\1\0"
		+ "\10\15\22\0\2\15\15\0\72\15\5\0\7\15\6\0\1\15\2\0" + "\12\16\47\0\2\15\1\0\1\15\2\0\2\15\1\0\1\15\2\0" + "\1\15\6\0\4\15\1\0\7\15\1\0\3\15\1\0\1\15\1\0"
		+ "\1\15\2\0\2\15\1\0\15\15\1\0\3\15\2\0\5\15\1\0" + "\1\15\6\0\1\15\2\0\12\16\2\0\4\15\40\0\1\15\37\0" + "\12\16\26\0\10\15\1\0\44\15\4\0\21\15\6\0\20\15\1\0"
		+ "\44\15\103\0\67\15\1\0\1\15\2\0\5\15\12\16\6\0\23\15" + "\2\0\4\15\5\0\31\15\7\0\1\15\1\0\12\16\2\0\2\15" + "\2\0\46\15\1\0\1\15\5\0\1\15\2\0\53\15\1\0\u014d\15"
		+ "\1\0\4\15\2\0\7\15\1\0\1\15\1\0\4\15\2\0\51\15" + "\1\0\4\15\2\0\41\15\1\0\4\15\2\0\7\15\1\0\1\15" + "\1\0\4\15\2\0\17\15\1\0\71\15\1\0\4\15\2\0\103\15"
		+ "\4\0\1\15\40\0\20\15\20\0\125\15\14\0\u026c\15\2\0\21\15" + "\1\0\32\15\5\0\113\15\3\0\3\15\17\0\15\15\1\0\6\15" + "\14\0\24\15\14\0\24\15\14\0\15\15\1\0\3\15\1\0\2\15"
		+ "\14\0\64\15\2\0\23\15\16\0\1\15\4\0\1\15\3\0\12\16" + "\46\0\12\16\6\0\130\15\10\0\53\15\5\0\106\15\12\0\35\15" + "\3\0\14\15\4\0\11\15\15\0\12\16\36\15\2\0\5\15\13\0"
		+ "\54\15\4\0\32\15\6\0\12\16\46\0\34\15\4\0\77\15\2\0" + "\24\15\13\0\12\16\6\0\12\16\15\0\1\15\130\0\64\15\1\0" + "\17\15\1\0\7\15\4\0\12\16\46\0\52\15\2\0\4\15\12\16"
		+ "\54\15\1\0\13\15\16\0\66\15\12\0\12\16\3\0\3\15\12\16" + "\44\15\153\0\4\15\1\0\6\15\1\0\2\15\11\0\300\15\100\0" + "\u0116\15\2\0\6\15\2\0\46\15\2\0\6\15\2\0\10\15\1\0"
		+ "\1\15\1\0\1\15\1\0\1\15\1\0\37\15\2\0\65\15\1\0" + "\7\15\1\0\1\15\3\0\3\15\1\0\7\15\3\0\4\15\2\0" + "\6\15\4\0\15\15\5\0\3\15\1\0\7\15\53\0\1\23\1\23"
		+ "\107\0\1\15\15\0\1\15\20\0\15\15\145\0\1\15\4\0\1\15" + "\2\0\12\15\1\0\1\15\3\0\5\15\6\0\1\15\1\0\1\15" + "\1\0\1\15\1\0\4\15\1\0\13\15\2\0\4\15\5\0\5\15"
		+ "\4\0\1\15\21\0\51\15\u032d\0\64\15\u0716\0\57\15\1\0\57\15" + "\1\0\205\15\6\0\4\15\3\0\2\15\14\0\46\15\1\0\1\15" + "\5\0\1\15\2\0\70\15\7\0\1\15\20\0\27\15\11\0\7\15"
		+ "\1\0\7\15\1\0\7\15\1\0\7\15\1\0\7\15\1\0\7\15" + "\1\0\7\15\1\0\7\15\1\0\40\15\57\0\1\15\u01d5\0\3\15" + "\31\0\11\15\7\0\5\15\2\0\5\15\4\0\126\15\6\0\3\15"
		+ "\1\0\132\15\1\0\4\15\5\0\51\15\3\0\136\15\21\0\33\15" + "\65\0\20\15\u0200\0\u19b6\15\112\0\u51cd\15\63\0\u048d\15\103\0\56\15" + "\2\0\u010d\15\3\0\20\15\12\16\2\15\24\0\57\15\5\0\10\15"
		+ "\3\0\31\15\7\0\121\15\47\0\11\15\2\0\147\15\2\0\4\15" + "\1\0\4\15\14\0\13\15\115\0\12\15\1\0\3\15\1\0\4\15" + "\1\0\34\15\30\0\64\15\14\0\104\15\14\0\12\16\30\0\6\15"
		+ "\3\0\1\15\4\0\12\16\41\15\5\0\43\15\15\0\35\15\3\0" + "\63\15\1\0\14\15\17\0\1\15\12\16\46\0\67\15\11\0\16\15" + "\2\0\12\16\6\0\27\15\3\0\1\15\5\0\77\15\1\0\1\15"
		+ "\1\0\1\15\30\0\3\15\2\0\20\15\2\0\4\15\13\0\6\15" + "\2\0\6\15\2\0\6\15\11\0\7\15\1\0\7\15\221\0\53\15" + "\5\0\12\16\6\0\u2ba4\15\14\0\27\15\4\0\61\15\u2104\0\u016e\15"
		+ "\2\0\152\15\46\0\7\15\14\0\5\15\5\0\14\15\1\0\15\15" + "\1\0\5\15\1\0\1\15\1\0\2\15\1\0\2\15\1\0\154\15" + "\41\0\u016b\15\22\0\100\15\2\0\66\15\50\0\14\15\164\0\5\15"
		+ "\1\0\207\15\23\0\12\16\7\0\32\15\6\0\32\15\13\0\131\15" + "\3\0\6\15\2\0\6\15\2\0\6\15\2\0\3\15\43\0";

	/** 
	 * Translates characters to character classes
	 */
	private static final char[] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

	/** 
	 * Translates DFA states to action switch labels.
	 */
	private static final int[] ZZ_ACTION = zzUnpackAction();

	private static final String ZZ_ACTION_PACKED_0 = "\7\0\1\1\2\2\2\3\1\4\1\5\2\6\3\7" + "\1\2\1\10\1\11\1\12\1\13\1\7\1\14\1\15" + "\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25"
		+ "\1\26\1\27\16\7\1\30\1\31\1\32\1\33\1\34" + "\1\35\1\36\1\37\1\40\1\41\1\42\1\43\1\44" + "\1\43\1\2\2\45\1\2\3\0\1\46\1\47\1\3" + "\1\0\1\50\1\51\1\52\1\53\2\0\3\7\1\54"
		+ "\1\0\1\55\1\56\1\57\1\60\3\7\1\61\1\62" + "\1\63\1\64\1\65\1\66\1\67\1\70\14\7\1\71" + "\3\7\1\72\2\7\1\73\10\7\1\74\4\7\1\75" + "\1\76\1\77\1\100\1\57\1\101\1\102\1\103\1\104"
		+ "\1\105\1\106\1\107\1\110\1\111\1\112\1\0\2\113" + "\4\0\1\114\2\0\1\115\1\116\1\117\2\7\1\120" + "\1\0\1\121\1\60\4\7\1\122\1\123\2\7\1\124" + "\3\7\1\125\6\7\1\126\1\7\1\127\4\7\1\130"
		+ "\15\7\1\131\2\7\1\132\2\0\1\3\1\127\1\7" + "\3\0\12\7\1\133\3\7\1\134\1\7\1\135\11\7" + "\1\136\2\7\1\137\1\140\1\7\1\127\5\7\1\47" + "\1\7\1\141\2\142\2\0\2\7\1\143\3\7\1\144"
		+ "\1\7\1\145\1\146\1\147\1\150\1\151\6\7\1\152" + "\11\7\1\153\2\7\2\0\1\154\1\155\13\7\1\156" + "\1\157\1\7\1\160\1\161\2\7\1\162\2\163\2\164"
		+ "\1\165\2\7\1\166\1\167\1\170\4\7\1\171\1\172" + "\1\173\1\7\1\174\4\7\1\175\1\7\1\176\1\7" + "\1\177\4\7\1\200\1\201\3\7\1\202\1\203";

	private static int[] zzUnpackAction() {
		int[] result = new int[360];
		int offset = 0;
		offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
		return result;
	}

	private static int zzUnpackAction(String packed, int offset, int[] result) {
		int i = 0; /* index in packed string  */
		int j = offset; /* index in unpacked array */
		int l = packed.length();
		while (i < l) {
			int count = packed.charAt(i++);
			int value = packed.charAt(i++);
			do
				result[j++] = value;
			while (--count > 0);
		}
		return j;
	}

	/** 
	 * Translates a state to a row index in the transition table
	 */
	private static final int[] ZZ_ROWMAP = zzUnpackRowMap();

	private static final String ZZ_ROWMAP_PACKED_0 = "\0\0\0\104\0\210\0\314\0\u0110\0\u0154\0\u0198\0\u01dc" + "\0\u0220\0\u0264\0\u02a8\0\u0264\0\u02ec\0\u0330\0\u0374\0\u03b8"
		+ "\0\u03fc\0\u0440\0\u0484\0\u04c8\0\u050c\0\u0264\0\u0264\0\u0550" + "\0\u0594\0\u05d8\0\u061c\0\u0264\0\u0264\0\u0264\0\u0264\0\u0264"
		+ "\0\u0264\0\u0660\0\u0264\0\u06a4\0\u0264\0\u06e8\0\u072c\0\u0770" + "\0\u07b4\0\u07f8\0\u083c\0\u0880\0\u08c4\0\u0908\0\u094c\0\u0990"
		+ "\0\u09d4\0\u0a18\0\u0a5c\0\u0aa0\0\u0ae4\0\u0b28\0\u0b6c\0\u0bb0" + "\0\u0bf4\0\u0264\0\u0c38\0\u0264\0\u0c7c\0\u0264\0\u0cc0\0\u0d04"
		+ "\0\u0d48\0\u0d8c\0\u0dd0\0\u0264\0\u0e14\0\u0e58\0\u0e9c\0\u0ee0" + "\0\u0264\0\u0f24\0\u0f68\0\u0fac\0\u0264\0\u0264\0\u0264\0\u0ff0"
		+ "\0\u1034\0\u1078\0\u10bc\0\u1100\0\u1144\0\u1188\0\u11cc\0\u1210" + "\0\u0264\0\u0264\0\u1254\0\u1298\0\u12dc\0\u1320\0\u1364\0\u0264"
		+ "\0\u0264\0\u13a8\0\u0264\0\u0264\0\u0264\0\u0264\0\u13ec\0\u1430" + "\0\u1474\0\u14b8\0\u14fc\0\u1540\0\u1584\0\u15c8\0\u160c\0\u1650"
		+ "\0\u1694\0\u16d8\0\u0440\0\u171c\0\u1760\0\u17a4\0\u0440\0\u17e8" + "\0\u182c\0\u0440\0\u1870\0\u18b4\0\u18f8\0\u193c\0\u1980\0\u19c4"
		+ "\0\u1a08\0\u1a4c\0\u1a90\0\u1ad4\0\u1b18\0\u1b5c\0\u1ba0\0\u0264" + "\0\u0264\0\u0264\0\u0264\0\u1be4\0\u0264\0\u0264\0\u0264\0\u0264"
		+ "\0\u0264\0\u0264\0\u0264\0\u0264\0\u0264\0\u0264\0\u0d8c\0\u1c28" + "\0\u0264\0\u0e14\0\u1c6c\0\u0264\0\u1cb0\0\u0264\0\u1cf4\0\u1d38"
		+ "\0\u1034\0\u1078\0\u0440\0\u1d7c\0\u1dc0\0\u1e04\0\u1e48\0\u0264" + "\0\u0264\0\u1e8c\0\u1ed0\0\u1f14\0\u1f58\0\u0264\0\u0264\0\u1f9c"
		+ "\0\u1fe0\0\u2024\0\u2068\0\u20ac\0\u20f0\0\u0440\0\u2134\0\u2178" + "\0\u21bc\0\u2200\0\u2244\0\u2288\0\u0440\0\u22cc\0\u2310\0\u2354"
		+ "\0\u2398\0\u23dc\0\u2420\0\u0440\0\u2464\0\u24a8\0\u24ec\0\u2530" + "\0\u2574\0\u25b8\0\u25fc\0\u2640\0\u2684\0\u26c8\0\u270c\0\u2750"
		+ "\0\u2794\0\u0440\0\u27d8\0\u281c\0\u0264\0\u2860\0\u28a4\0\u1cf4" + "\0\u28e8\0\u292c\0\u2970\0\u29b4\0\u29f8\0\u2a3c\0\u2a80\0\u2ac4"
		+ "\0\u2b08\0\u2b4c\0\u2b90\0\u2bd4\0\u2c18\0\u2c5c\0\u2ca0\0\u0440" + "\0\u2ce4\0\u2d28\0\u2d6c\0\u0440\0\u2db0\0\u0440\0\u2df4\0\u2e38"
		+ "\0\u2e7c\0\u2ec0\0\u2f04\0\u2f48\0\u2f8c\0\u2fd0\0\u3014\0\u0440" + "\0\u3058\0\u309c\0\u0440\0\u30e0\0\u3124\0\u0440\0\u3168\0\u31ac"
		+ "\0\u31f0\0\u3234\0\u3278\0\u0264\0\u32bc\0\u0440\0\u3300\0\u0264" + "\0\u3344\0\u3388\0\u33cc\0\u3410\0\u0440\0\u3454\0\u3498\0\u34dc"
		+ "\0\u3520\0\u3564\0\u0440\0\u0440\0\u0440\0\u0440\0\u0440\0\u35a8" + "\0\u35ec\0\u3630\0\u3674\0\u36b8\0\u36fc\0\u0440\0\u3740\0\u3784"
		+ "\0\u37c8\0\u380c\0\u3850\0\u3894\0\u38d8\0\u391c\0\u3960\0\u0440" + "\0\u39a4\0\u39e8\0\u3a2c\0\u3a70\0\u0440\0\u0440\0\u3ab4\0\u3af8"
		+ "\0\u3b3c\0\u3b80\0\u3bc4\0\u3c08\0\u3c4c\0\u3c90\0\u3cd4\0\u3d18" + "\0\u3d5c\0\u0440\0\u0440\0\u3da0\0\u0440\0\u0440\0\u3de4\0\u3e28"
		+ "\0\u0440\0\u3e6c\0\u0264\0\u3eb0\0\u0264\0\u0440\0\u3ef4\0\u3f38" + "\0\u0440\0\u0440\0\u3f7c\0\u3fc0\0\u4004\0\u4048\0\u408c\0\u0440"
		+ "\0\u40d0\0\u0440\0\u4114\0\u0440\0\u4158\0\u419c\0\u41e0\0\u4224" + "\0\u0440\0\u4268\0\u0440\0\u42ac\0\u0440\0\u42f0\0\u4334\0\u4378"
		+ "\0\u43bc\0\u0440\0\u0440\0\u4400\0\u4444\0\u4488\0\u0440\0\u0440";

	private static int[] zzUnpackRowMap() {
		int[] result = new int[360];
		int offset = 0;
		offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
		return result;
	}

	private static int zzUnpackRowMap(String packed, int offset, int[] result) {
		int i = 0; /* index in packed string  */
		int j = offset; /* index in unpacked array */
		int l = packed.length();
		while (i < l) {
			int high = packed.charAt(i++) << 16;
			result[j++] = high | packed.charAt(i++);
		}
		return j;
	}

	/** 
	 * The transition table of the DFA
	 */
	private static final int[] ZZ_TRANS = zzUnpackTrans();

	private static final String ZZ_TRANS_PACKED_0 = "\20\10\1\11\63\10\1\12\1\13\2\14\1\15\1\16" + "\1\17\1\20\1\21\1\22\1\23\1\22\1\20\1\22" + "\1\12\1\24\1\25\1\26\1\27\1\12\1\14\1\30"
		+ "\1\31\1\22\1\32\1\33\1\34\1\35\1\36\1\37" + "\1\40\1\41\1\42\1\43\1\44\1\45\1\46\1\22" + "\1\47\1\50\1\51\1\52\1\53\1\22\1\54\1\55" + "\1\56\1\57\1\60\1\22\1\61\1\62\2\22\1\63"
		+ "\1\64\1\65\1\66\1\67\1\70\1\71\1\72\1\73" + "\1\22\1\74\2\22\1\12\1\75\2\12\17\75\1\76" + "\60\75\1\77\1\100\2\12\16\100\1\76\61\100\1\101"
		+ "\1\102\1\103\1\104\5\102\4\105\1\102\1\105\5\102" + "\2\12\1\102\2\105\14\102\23\105\10\102\1\105\1\102" + "\2\105\1\102\10\0\4\106\1\0\1\106\10\0\2\106"
		+ "\14\0\23\106\10\0\1\106\1\0\2\106\2\0\1\107" + "\1\110\101\0\20\10\1\0\63\10\25\111\1\112\56\111" + "\106\0\1\14\105\0\1\113\1\114\22\0\1\115\60\0"
		+ "\1\116\22\0\1\117\61\0\2\120\1\121\1\0\2\122" + "\1\120\75\0\2\20\4\0\1\20\75\0\11\22\7\0" + "\2\22\14\0\6\22\1\123\14\22\10\0\1\22\1\0" + "\2\22\7\0\11\22\7\0\2\22\14\0\23\22\10\0"
		+ "\1\22\1\0\2\22\7\0\11\22\7\0\2\22\14\0" + "\6\22\1\124\4\22\1\125\7\22\10\0\1\22\1\0" + "\2\22\11\0\4\126\1\0\1\126\1\0\1\127\6\0" + "\2\126\14\0\23\126\10\0\1\126\1\0\2\126\21\0"
		+ "\1\130\7\0\1\131\1\132\103\0\1\133\60\0\11\22" + "\7\0\2\22\14\0\1\22\1\134\6\22\1\135\2\22" + "\1\136\7\22\10\0\1\22\1\0\2\22\31\0\1\137"
		+ "\1\140\102\0\1\141\1\142\102\0\1\143\1\144\6\0" + "\1\145\105\0\1\146\47\0\11\22\7\0\2\22\14\0" + "\1\22\1\147\3\22\1\150\1\151\1\152\1\153\12\22"
		+ "\10\0\1\22\1\0\2\22\7\0\11\22\7\0\2\22" + "\14\0\1\22\1\154\10\22\1\155\10\22\10\0\1\22" + "\1\0\2\22\7\0\11\22\7\0\2\22\14\0\6\22" + "\1\156\1\157\1\160\12\22\10\0\1\22\1\0\2\22"
		+ "\7\0\11\22\7\0\1\22\1\161\14\0\13\22\1\162" + "\7\22\10\0\1\22\1\0\2\22\7\0\11\22\7\0" + "\2\22\14\0\1\163\1\22\1\164\12\22\1\165\5\22" + "\10\0\1\22\1\0\2\22\7\0\4\22\1\166\4\22"
		+ "\7\0\2\22\14\0\13\22\1\167\7\22\10\0\1\22" + "\1\0\2\22\7\0\4\22\1\170\4\22\7\0\2\22" + "\14\0\2\22\1\171\6\22\1\172\1\22\1\173\7\22" + "\10\0\1\22\1\0\2\22\7\0\11\22\7\0\2\22"
		+ "\14\0\4\22\1\174\5\22\1\175\4\22\1\176\3\22" + "\10\0\1\22\1\0\2\22\7\0\2\22\1\177\6\22" + "\7\0\2\22\14\0\3\22\1\200\3\22\1\201\13\22" + "\10\0\1\22\1\0\2\22\7\0\11\22\7\0\2\22"
		+ "\14\0\12\22\1\202\10\22\10\0\1\22\1\0\2\22" + "\7\0\11\22\7\0\2\22\14\0\6\22\1\203\3\22" + "\1\204\10\22\10\0\1\22\1\0\2\22\7\0\11\22" + "\7\0\2\22\14\0\10\22\1\205\12\22\10\0\1\22"
		+ "\1\0\2\22\7\0\11\22\7\0\1\22\1\206\14\0" + "\23\22\10\0\1\22\1\0\2\22\7\0\11\22\7\0" + "\2\22\14\0\7\22\1\207\13\22\10\0\1\22\1\0" + "\2\22\31\0\1\210\36\0\1\211\44\0\1\212\103\0"
		+ "\1\213\103\0\1\214\103\0\1\215\42\0\1\216\40\0" + "\1\217\43\0\1\220\37\0\1\221\53\0\1\75\2\0" + "\17\75\1\0\60\75\23\0\1\222\23\0\1\223\1\0" + "\1\224\6\0\1\225\24\0\1\100\2\0\16\100\1\0"
		+ "\61\100\22\0\1\226\24\0\1\223\1\0\1\224\6\0" + "\1\225\24\0\1\227\1\103\1\104\20\227\2\0\57\227" + "\2\0\1\104\101\0\1\227\1\230\1\231\3\227\11\232"
		+ "\4\227\2\0\1\227\2\232\11\227\1\233\2\227\23\232" + "\10\227\1\232\1\227\2\232\1\227\6\0\11\106\7\0" + "\2\106\14\0\23\106\10\0\1\106\1\0\2\106\42\0"
		+ "\1\234\43\0\1\107\37\0\1\234\70\0\1\235\1\0" + "\1\236\53\0\1\113\1\13\1\14\101\113\5\237\1\240" + "\76\237\6\0\2\120\4\0\1\120\75\0\2\241\1\0"
		+ "\4\241\27\0\1\241\2\0\1\241\4\0\1\241\1\0" + "\1\241\1\0\1\241\31\0\1\242\5\0\1\242\75\0" + "\11\22\7\0\2\22\14\0\13\22\1\243\7\22\10\0" + "\1\22\1\0\2\22\7\0\11\22\7\0\2\22\14\0"
		+ "\6\22\1\244\14\22\10\0\1\22\1\0\2\22\7\0" + "\11\22\7\0\2\22\14\0\12\22\1\245\10\22\10\0" + "\1\22\1\0\2\22\7\0\11\126\7\0\2\126\14\0" + "\23\126\10\0\1\126\1\0\2\126\11\0\4\246\1\0"
		+ "\1\246\1\0\1\127\6\0\2\246\14\0\23\246\10\0" + "\1\246\1\0\2\246\21\0\1\247\7\0\1\250\55\0" + "\1\251\107\0\4\22\1\252\4\22\7\0\2\22\14\0" + "\23\22\10\0\1\22\1\0\2\22\7\0\11\22\7\0"
		+ "\2\22\14\0\13\22\1\253\7\22\10\0\1\22\1\0" + "\2\22\7\0\11\22\7\0\2\22\14\0\5\22\1\254" + "\1\255\14\22\10\0\1\22\1\0\2\22\31\0\1\256" + "\103\0\1\257\61\0\11\22\7\0\2\22\14\0\2\22"
		+ "\1\260\20\22\10\0\1\22\1\0\2\22\7\0\11\22" + "\7\0\2\22\14\0\2\22\1\261\20\22\10\0\1\22" + "\1\0\2\22\7\0\11\22\7\0\2\22\14\0\13\22" + "\1\262\7\22\10\0\1\22\1\0\2\22\7\0\11\22"
		+ "\7\0\2\22\14\0\6\22\1\263\14\22\10\0\1\22" + "\1\0\2\22\7\0\11\22\7\0\2\22\14\0\7\22" + "\1\264\13\22\10\0\1\22\1\0\2\22\7\0\11\22" + "\7\0\2\22\14\0\7\22\1\265\13\22\10\0\1\22"
		+ "\1\0\2\22\7\0\11\22\7\0\2\22\14\0\17\22" + "\1\266\3\22\10\0\1\22\1\0\2\22\7\0\11\22" + "\7\0\2\22\14\0\2\22\1\267\20\22\10\0\1\22" + "\1\0\2\22\7\0\11\22\7\0\2\22\14\0\10\22"
		+ "\1\270\12\22\10\0\1\22\1\0\2\22\7\0\11\22" + "\7\0\2\22\14\0\4\22\1\271\4\22\1\272\11\22" + "\10\0\1\22\1\0\2\22\7\0\11\22\7\0\2\22" + "\14\0\13\22\1\273\7\22\10\0\1\22\1\0\2\22"
		+ "\7\0\11\22\7\0\2\22\14\0\1\22\1\274\17\22" + "\1\275\1\22\10\0\1\22\1\0\2\22\7\0\11\22" + "\7\0\2\22\14\0\3\22\1\276\1\277\4\22\1\300" + "\11\22\10\0\1\22\1\0\2\22\7\0\11\22\7\0"
		+ "\1\301\1\22\14\0\23\22\10\0\1\22\1\0\2\22" + "\7\0\11\22\7\0\2\22\14\0\23\22\10\0\1\302" + "\1\0\2\22\7\0\11\22\7\0\2\22\14\0\11\22" + "\1\303\11\22\10\0\1\22\1\0\2\22\7\0\11\22"
		+ "\7\0\2\22\14\0\14\22\1\304\6\22\10\0\1\22" + "\1\0\2\22\7\0\11\22\7\0\2\22\14\0\13\22" + "\1\305\7\22\10\0\1\22\1\0\2\22\7\0\11\22" + "\7\0\2\22\14\0\10\22\1\306\2\22\1\307\7\22"
		+ "\10\0\1\22\1\0\2\22\7\0\11\22\7\0\2\22" + "\14\0\7\22\1\310\13\22\10\0\1\22\1\0\2\22" + "\7\0\11\22\7\0\2\22\14\0\5\22\1\311\15\22" + "\10\0\1\22\1\0\2\22\7\0\11\22\7\0\2\22"
		+ "\14\0\4\22\1\312\16\22\10\0\1\22\1\0\2\22" + "\7\0\11\22\7\0\1\22\1\313\14\0\23\22\10\0" + "\1\22\1\0\2\22\7\0\11\22\7\0\2\22\14\0" + "\11\22\1\314\11\22\10\0\1\22\1\0\2\22\7\0"
		+ "\11\22\7\0\2\22\14\0\4\22\1\315\3\22\1\316" + "\12\22\10\0\1\22\1\0\1\22\1\317\7\0\11\22" + "\7\0\2\22\14\0\1\22\1\320\21\22\10\0\1\22" + "\1\0\2\22\7\0\11\22\7\0\2\22\14\0\1\321"
		+ "\22\22\10\0\1\22\1\0\2\22\7\0\11\22\7\0" + "\2\22\14\0\13\22\1\322\7\22\10\0\1\22\1\0" + "\2\22\7\0\11\22\7\0\2\22\14\0\5\22\1\323" + "\15\22\10\0\1\22\1\0\2\22\7\0\11\22\7\0"
		+ "\2\22\14\0\6\22\1\324\14\22\10\0\1\22\1\0" + "\2\22\31\0\1\325\55\0\1\231\101\0\1\227\1\230" + "\1\231\20\227\2\0\57\227\27\0\1\326\54\0\5\237"
		+ "\1\327\102\237\1\330\1\327\76\237\6\0\11\22\7\0" + "\2\22\14\0\7\22\1\331\13\22\10\0\1\22\1\0" + "\2\22\7\0\11\22\7\0\2\22\14\0\10\22\1\332" + "\12\22\10\0\1\22\1\0\2\22\7\0\11\246\7\0"
		+ "\2\246\14\0\23\246\10\0\1\246\1\0\2\246\11\0" + "\4\333\1\0\1\333\3\0\1\334\1\335\3\0\2\333" + "\14\0\23\333\10\0\1\333\1\0\2\333\7\0\11\22" + "\7\0\2\22\14\0\7\22\1\336\13\22\10\0\1\22"
		+ "\1\0\2\22\7\0\11\22\7\0\2\22\14\0\12\22" + "\1\337\10\22\10\0\1\22\1\0\2\22\7\0\11\22" + "\7\0\2\22\14\0\2\22\1\340\13\22\1\341\4\22" + "\10\0\1\22\1\0\2\22\7\0\11\22\7\0\2\22"
		+ "\14\0\4\22\1\342\16\22\10\0\1\22\1\0\2\22" + "\7\0\11\22\7\0\2\22\14\0\3\22\1\343\17\22" + "\10\0\1\22\1\0\2\22\7\0\11\22\7\0\2\22" + "\14\0\10\22\1\344\12\22\10\0\1\22\1\0\2\22"
		+ "\7\0\11\22\7\0\2\22\14\0\12\22\1\345\10\22" + "\10\0\1\22\1\0\2\22\7\0\11\22\7\0\2\22" + "\14\0\10\22\1\346\12\22\10\0\1\22\1\0\2\22" + "\7\0\11\22\7\0\2\22\14\0\11\22\1\347\11\22"
		+ "\10\0\1\22\1\0\2\22\7\0\11\22\7\0\2\22" + "\14\0\7\22\1\350\13\22\10\0\1\22\1\0\2\22" + "\7\0\11\22\7\0\2\22\14\0\11\22\1\351\11\22" + "\10\0\1\22\1\0\2\22\7\0\11\22\7\0\2\22"
		+ "\14\0\11\22\1\352\11\22\10\0\1\22\1\0\2\22" + "\7\0\11\22\7\0\2\22\14\0\3\22\1\353\17\22" + "\10\0\1\22\1\0\2\22\7\0\11\22\7\0\2\22" + "\14\0\12\22\1\354\10\22\10\0\1\22\1\0\2\22"
		+ "\7\0\11\22\7\0\2\22\14\0\6\22\1\355\14\22" + "\10\0\1\22\1\0\2\22\7\0\11\22\7\0\2\22" + "\14\0\12\22\1\356\10\22\10\0\1\22\1\0\2\22" + "\7\0\11\22\7\0\2\22\14\0\7\22\1\357\13\22"
		+ "\10\0\1\22\1\0\2\22\7\0\11\22\7\0\2\22" + "\14\0\12\22\1\360\10\22\10\0\1\22\1\0\2\22" + "\7\0\11\22\7\0\2\22\14\0\4\22\1\361\16\22" + "\10\0\1\22\1\0\2\22\7\0\11\22\7\0\2\22"
		+ "\14\0\7\22\1\362\13\22\10\0\1\22\1\0\2\22" + "\7\0\11\22\7\0\2\22\14\0\12\22\1\363\10\22" + "\10\0\1\22\1\0\2\22\7\0\11\22\7\0\2\22" + "\14\0\4\22\1\364\16\22\10\0\1\22\1\0\2\22"
		+ "\7\0\11\22\7\0\2\22\14\0\10\22\1\365\12\22" + "\10\0\1\22\1\0\2\22\7\0\11\22\7\0\2\22" + "\14\0\4\22\1\366\16\22\10\0\1\22\1\0\2\22" + "\7\0\11\22\7\0\2\22\14\0\5\22\1\367\15\22"
		+ "\10\0\1\22\1\0\2\22\7\0\11\22\7\0\2\22" + "\14\0\1\370\22\22\10\0\1\22\1\0\2\22\7\0" + "\11\22\7\0\2\22\14\0\4\22\1\371\16\22\10\0" + "\1\22\1\0\2\22\7\0\11\22\7\0\2\22\14\0"
		+ "\12\22\1\372\10\22\10\0\1\22\1\0\2\22\7\0" + "\11\22\7\0\2\22\14\0\6\22\1\373\14\22\10\0" + "\1\22\1\0\2\22\7\0\11\22\7\0\2\22\14\0" + "\12\22\1\374\10\22\10\0\1\22\1\0\2\22\7\0"
		+ "\11\22\7\0\2\22\14\0\1\22\1\375\21\22\10\0" + "\1\22\1\0\2\22\7\0\11\22\7\0\2\22\14\0" + "\7\22\1\376\13\22\10\0\1\22\1\0\2\22\7\0" + "\11\22\7\0\2\22\14\0\1\22\1\377\21\22\10\0"
		+ "\1\22\1\0\2\22\7\0\4\22\1\u0100\4\22\7\0" + "\2\22\14\0\23\22\10\0\1\22\1\0\2\22\7\0" + "\11\22\7\0\2\22\14\0\10\22\1\u0101\12\22\10\0" + "\1\22\1\0\2\22\7\0\11\22\7\0\2\22\14\0"
		+ "\7\22\1\u0102\13\22\10\0\1\22\1\0\2\22\7\0" + "\4\22\1\u0103\4\22\7\0\2\22\14\0\23\22\10\0" + "\1\22\1\0\2\22\27\0\1\u0104\55\0\4\237\1\14" + "\1\327\76\237\6\0\11\22\7\0\2\22\14\0\12\22"
		+ "\1\u0105\10\22\10\0\1\22\1\0\2\22\7\0\11\22" + "\7\0\2\22\14\0\20\22\1\u0106\2\22\10\0\1\22" + "\1\0\2\22\2\0\1\u0107\1\u0108\3\0\11\333\7\0"
		+ "\2\333\14\0\23\333\10\0\1\333\1\0\2\333\11\0" + "\4\u0109\1\0\1\u0109\10\0\2\u0109\14\0\23\u0109\10\0" + "\1\u0109\1\0\2\u0109\11\0\4\u010a\1\0\1\u010a\10\0"
		+ "\2\u010a\14\0\23\u010a\10\0\1\u010a\1\0\2\u010a\7\0" + "\11\22\7\0\2\22\14\0\5\22\1\u010b\15\22\10\0" + "\1\22\1\0\2\22\7\0\11\22\7\0\2\22\14\0"
		+ "\2\22\1\u010c\20\22\10\0\1\22\1\0\2\22\7\0" + "\11\22\7\0\2\22\14\0\4\22\1\u010d\16\22\10\0" + "\1\22\1\0\2\22\7\0\11\22\7\0\2\22\14\0" + "\10\22\1\u010e\12\22\10\0\1\22\1\0\2\22\7\0"
		+ "\11\22\7\0\2\22\14\0\12\22\1\u010f\10\22\10\0" + "\1\22\1\0\2\22\7\0\11\22\7\0\2\22\14\0" + "\4\22\1\u0110\16\22\10\0\1\22\1\0\2\22\7\0" + "\11\22\7\0\2\22\14\0\7\22\1\u0111\13\22\10\0"
		+ "\1\22\1\0\2\22\7\0\11\22\7\0\2\22\14\0" + "\10\22\1\u0112\12\22\10\0\1\22\1\0\2\22\7\0" + "\11\22\7\0\2\22\14\0\4\22\1\376\16\22\10\0" + "\1\22\1\0\2\22\7\0\11\22\7\0\2\22\14\0"
		+ "\12\22\1\u0113\10\22\10\0\1\22\1\0\2\22\7\0" + "\11\22\7\0\2\22\14\0\4\22\1\u0114\16\22\10\0" + "\1\22\1\0\2\22\7\0\11\22\7\0\2\22\14\0" + "\11\22\1\u0115\11\22\10\0\1\22\1\0\2\22\7\0"
		+ "\11\22\7\0\1\22\1\u0116\14\0\23\22\10\0\1\22" + "\1\0\2\22\7\0\11\22\7\0\2\22\14\0\17\22" + "\1\u0117\3\22\10\0\1\22\1\0\2\22\7\0\11\22" + "\7\0\2\22\14\0\1\22\1\u0118\21\22\10\0\1\22"
		+ "\1\0\2\22\7\0\11\22\7\0\2\22\14\0\13\22" + "\1\u0119\6\22\1\u011a\10\0\1\22\1\0\2\22\7\0" + "\11\22\7\0\2\22\14\0\10\22\1\u011b\12\22\10\0" + "\1\22\1\0\2\22\7\0\11\22\7\0\2\22\14\0"
		+ "\12\22\1\u011c\10\22\10\0\1\22\1\0\2\22\7\0" + "\11\22\7\0\2\22\14\0\3\22\1\346\17\22\10\0" + "\1\22\1\0\2\22\7\0\11\22\7\0\2\22\14\0" + "\13\22\1\u011d\7\22\10\0\1\22\1\0\2\22\7\0"
		+ "\11\22\7\0\2\22\14\0\21\22\1\u011e\1\22\10\0" + "\1\22\1\0\2\22\7\0\11\22\7\0\2\22\14\0" + "\5\22\1\u011f\15\22\10\0\1\22\1\0\2\22\7\0" + "\11\22\7\0\2\22\14\0\2\22\1\u0120\20\22\10\0"
		+ "\1\22\1\0\2\22\7\0\11\22\7\0\2\22\14\0" + "\3\22\1\u0121\17\22\10\0\1\22\1\0\2\22\7\0" + "\11\22\7\0\2\22\14\0\2\22\1\u0122\20\22\10\0" + "\1\22\1\0\2\22\7\0\11\22\7\0\2\22\14\0"
		+ "\5\22\1\u0123\15\22\10\0\1\22\1\0\2\22\7\0" + "\11\22\7\0\2\22\14\0\13\22\1\u0124\7\22\10\0" + "\1\22\1\0\2\22\7\0\11\22\7\0\2\22\14\0" + "\5\22\1\u0125\15\22\10\0\1\22\1\0\2\22\7\0"
		+ "\11\22\7\0\2\22\14\0\7\22\1\u0126\13\22\10\0" + "\1\22\1\0\2\22\7\0\11\22\7\0\2\22\14\0" + "\1\22\1\u0127\21\22\10\0\1\22\1\0\2\22\7\0" + "\11\22\7\0\2\22\14\0\12\22\1\u0128\10\22\10\0"
		+ "\1\22\1\0\2\22\7\0\11\22\7\0\2\22\14\0" + "\10\22\1\u0129\12\22\10\0\1\22\1\0\2\22\7\0" + "\11\22\7\0\2\22\14\0\10\22\1\u012a\12\22\10\0" + "\1\22\1\0\2\22\3\0\1\u0108\107\0\11\u0109\2\0"
		+ "\1\u012b\4\0\2\u0109\14\0\23\u0109\10\0\1\u0109\1\0" + "\2\u0109\7\0\11\u010a\3\0\1\u012c\3\0\2\u010a\14\0" + "\23\u010a\10\0\1\u010a\1\0\2\u010a\7\0\11\22\7\0"
		+ "\2\22\14\0\3\22\1\u012d\17\22\10\0\1\22\1\0" + "\2\22\7\0\11\22\7\0\2\22\14\0\4\22\1\u012e" + "\16\22\10\0\1\22\1\0\2\22\7\0\11\22\7\0" + "\2\22\14\0\4\22\1\u012f\16\22\10\0\1\22\1\0"
		+ "\2\22\7\0\11\22\7\0\2\22\14\0\3\22\1\u0130" + "\17\22\10\0\1\22\1\0\2\22\7\0\11\22\7\0" + "\2\22\14\0\5\22\1\u0131\15\22\10\0\1\22\1\0" + "\2\22\7\0\11\22\7\0\2\22\14\0\7\22\1\u0132"
		+ "\13\22\10\0\1\22\1\0\2\22\7\0\11\22\7\0" + "\2\22\14\0\3\22\1\u0133\17\22\10\0\1\22\1\0" + "\2\22\7\0\11\22\7\0\2\22\14\0\14\22\1\u0134" + "\6\22\10\0\1\22\1\0\2\22\7\0\11\22\7\0"
		+ "\2\22\14\0\1\u0135\22\22\10\0\1\22\1\0\2\22" + "\7\0\11\22\7\0\2\22\14\0\12\22\1\u0136\10\22" + "\10\0\1\22\1\0\2\22\7\0\11\22\7\0\2\22" + "\14\0\2\22\1\u0137\20\22\10\0\1\22\1\0\2\22"
		+ "\7\0\11\22\7\0\2\22\14\0\15\22\1\u0138\5\22" + "\10\0\1\22\1\0\2\22\7\0\11\22\7\0\2\22" + "\14\0\10\22\1\u0139\12\22\10\0\1\22\1\0\2\22" + "\7\0\11\22\7\0\2\22\14\0\3\22\1\u013a\17\22"
		+ "\10\0\1\22\1\0\2\22\7\0\11\22\7\0\2\22" + "\14\0\22\22\1\376\10\0\1\22\1\0\2\22\7\0" + "\11\22\7\0\1\22\1\u013b\14\0\23\22\10\0\1\22" + "\1\0\2\22\7\0\11\22\7\0\2\22\14\0\14\22"
		+ "\1\u013c\6\22\10\0\1\22\1\0\2\22\7\0\11\22" + "\7\0\2\22\14\0\1\u013d\22\22\10\0\1\22\1\0" + "\2\22\7\0\11\22\7\0\2\22\14\0\2\22\1\u013e" + "\20\22\10\0\1\22\1\0\2\22\7\0\11\22\7\0"
		+ "\2\22\14\0\13\22\1\u013f\7\22\10\0\1\22\1\0" + "\2\22\7\0\11\22\7\0\2\22\14\0\12\22\1\376" + "\10\22\10\0\1\22\1\0\2\22\7\0\11\22\7\0" + "\2\22\14\0\7\22\1\u0140\13\22\10\0\1\22\1\0"
		+ "\2\22\7\0\11\22\7\0\2\22\14\0\7\22\1\u0141" + "\13\22\10\0\1\22\1\0\2\22\7\0\11\22\7\0" + "\2\22\14\0\2\22\1\376\20\22\10\0\1\22\1\0"
		+ "\2\22\2\0\1\u0142\1\u0143\102\0\1\u0144\1\u0145\107\0" + "\11\22\7\0\2\22\14\0\12\22\1\u0146\10\22\10\0" + "\1\22\1\0\2\22\7\0\11\22\7\0\2\22\14\0"
		+ "\4\22\1\u0147\16\22\10\0\1\22\1\0\2\22\7\0" + "\11\22\7\0\2\22\14\0\6\22\1\u0148\14\22\10\0" + "\1\22\1\0\2\22\7\0\11\22\7\0\2\22\14\0" + "\21\22\1\u0149\1\22\10\0\1\22\1\0\2\22\7\0"
		+ "\11\22\7\0\1\22\1\u014a\14\0\23\22\10\0\1\22" + "\1\0\2\22\7\0\11\22\7\0\2\22\14\0\12\22" + "\1\u014b\10\22\10\0\1\22\1\0\2\22\7\0\11\22" + "\7\0\2\22\14\0\10\22\1\u014c\12\22\10\0\1\22"
		+ "\1\0\2\22\7\0\11\22\7\0\2\22\14\0\13\22" + "\1\376\7\22\10\0\1\22\1\0\2\22\7\0\11\22" + "\7\0\2\22\14\0\3\22\1\u014d\17\22\10\0\1\22" + "\1\0\2\22\7\0\11\22\7\0\2\22\14\0\12\22"
		+ "\1\u014e\10\22\10\0\1\22\1\0\2\22\7\0\11\22" + "\7\0\2\22\14\0\3\22\1\u014f\17\22\10\0\1\22" + "\1\0\2\22\7\0\11\22\7\0\2\22\14\0\11\22" + "\1\u0150\11\22\10\0\1\22\1\0\2\22\7\0\11\22"
		+ "\7\0\2\22\14\0\12\22\1\u0151\10\22\10\0\1\22" + "\1\0\2\22\7\0\11\22\7\0\2\22\14\0\4\22" + "\1\u0152\16\22\10\0\1\22\1\0\2\22\3\0\1\u0143"
		+ "\103\0\1\u0145\107\0\11\22\7\0\2\22\14\0\12\22" + "\1\u0153\10\22\10\0\1\22\1\0\2\22\7\0\11\22" + "\7\0\2\22\14\0\2\22\1\u0154\20\22\10\0\1\22" + "\1\0\2\22\7\0\11\22\7\0\2\22\14\0\23\22"
		+ "\10\0\1\22\1\0\1\u0155\1\22\7\0\11\22\7\0" + "\2\22\14\0\3\22\1\u0156\17\22\10\0\1\22\1\0" + "\2\22\7\0\11\22\7\0\2\22\14\0\12\22\1\u0157" + "\10\22\10\0\1\22\1\0\2\22\7\0\11\22\7\0"
		+ "\2\22\14\0\2\22\1\u0158\20\22\10\0\1\22\1\0" + "\2\22\7\0\11\22\7\0\2\22\14\0\4\22\1\u0159" + "\16\22\10\0\1\22\1\0\2\22\7\0\11\22\7\0" + "\2\22\14\0\23\22\10\0\1\22\1\0\1\u015a\1\22"
		+ "\7\0\11\22\7\0\2\22\14\0\14\22\1\u015b\6\22" + "\10\0\1\22\1\0\2\22\7\0\11\22\7\0\2\22" + "\14\0\6\22\1\u015c\14\22\10\0\1\22\1\0\2\22" + "\7\0\11\22\7\0\2\22\14\0\12\22\1\u015d\10\22"
		+ "\10\0\1\22\1\0\2\22\7\0\11\22\7\0\2\22" + "\14\0\6\22\1\u015e\14\22\10\0\1\22\1\0\2\22" + "\7\0\11\22\7\0\2\22\14\0\4\22\1\u015f\16\22" + "\10\0\1\22\1\0\2\22\7\0\11\22\7\0\2\22"
		+ "\14\0\6\22\1\u0160\14\22\10\0\1\22\1\0\2\22" + "\7\0\11\22\7\0\2\22\14\0\2\22\1\u0161\20\22" + "\10\0\1\22\1\0\2\22\7\0\11\22\7\0\2\22" + "\14\0\1\u0162\22\22\10\0\1\22\1\0\2\22\7\0"
		+ "\11\22\7\0\2\22\14\0\11\22\1\u0163\11\22\10\0" + "\1\22\1\0\2\22\7\0\11\22\7\0\2\22\14\0" + "\2\22\1\u0164\20\22\10\0\1\22\1\0\2\22\7\0" + "\11\22\7\0\2\22\14\0\3\22\1\u0165\17\22\10\0"
		+ "\1\22\1\0\2\22\7\0\11\22\7\0\2\22\14\0" + "\3\22\1\u0166\17\22\10\0\1\22\1\0\2\22\7\0" + "\11\22\7\0\2\22\14\0\12\22\1\u0167\10\22\10\0" + "\1\22\1\0\2\22\7\0\11\22\7\0\2\22\14\0"
		+ "\12\22\1\u0168\10\22\10\0\1\22\1\0\2\22\1\0";

	private static int[] zzUnpackTrans() {
		int[] result = new int[17612];
		int offset = 0;
		offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
		return result;
	}

	private static int zzUnpackTrans(String packed, int offset, int[] result) {
		int i = 0; /* index in packed string  */
		int j = offset; /* index in unpacked array */
		int l = packed.length();
		while (i < l) {
			int count = packed.charAt(i++);
			int value = packed.charAt(i++);
			value--;
			do
				result[j++] = value;
			while (--count > 0);
		}
		return j;
	}

	/* error codes */
	private static final int ZZ_UNKNOWN_ERROR = 0;
	private static final int ZZ_NO_MATCH = 1;
	private static final int ZZ_PUSHBACK_2BIG = 2;

	/* error messages for the codes above */
	private static final String ZZ_ERROR_MSG[] = {
		"Unkown internal scanner error", "Error: could not match input", "Error: pushback value was too large"
	};

	/**
	 * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
	 */
	private static final int[] ZZ_ATTRIBUTE = zzUnpackAttribute();

	private static final String ZZ_ATTRIBUTE_PACKED_0 = "\7\0\2\1\1\11\1\1\1\11\11\1\2\11\4\1" + "\6\11\1\1\1\11\1\1\1\11\24\1\1\11\1\1" + "\1\11\1\1\1\11\5\1\1\11\4\1\1\11\2\1"
		+ "\1\0\3\11\1\1\2\0\4\1\1\0\1\1\2\11" + "\5\1\2\11\1\1\4\11\41\1\4\11\1\1\12\11" + "\1\0\1\1\1\11\2\0\1\11\1\0\1\11\2\0" + "\6\1\1\0\2\11\4\1\2\11\45\1\1\11\2\0"
		+ "\3\1\3\0\46\1\1\11\3\1\1\11\2\0\40\1" + "\2\0\26\1\1\11\1\1\1\11\43\1";

	private static int[] zzUnpackAttribute() {
		int[] result = new int[360];
		int offset = 0;
		offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
		return result;
	}

	private static int zzUnpackAttribute(String packed, int offset, int[] result) {
		int i = 0; /* index in packed string  */
		int j = offset; /* index in unpacked array */
		int l = packed.length();
		while (i < l) {
			int count = packed.charAt(i++);
			int value = packed.charAt(i++);
			do
				result[j++] = value;
			while (--count > 0);
		}
		return j;
	}

	/** the input device */
	private java.io.Reader zzReader;

	/** the current state of the DFA */
	private int zzState;

	/** the current lexical state */
	private int zzLexicalState = YYINITIAL;

	/** this buffer contains the current text to be matched and is
	    the source of the yytext() string */
	private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

	/** the textposition at the last accepting state */
	private int zzMarkedPos;

	/** the current text position in the buffer */
	private int zzCurrentPos;

	/** startRead marks the beginning of the yytext() string in the buffer */
	private int zzStartRead;

	/** endRead marks the last character in the buffer, that has been read
	    from input */
	private int zzEndRead;

	/** number of newlines encountered up to the start of the matched text */
	private int yyline;

	/** the number of characters up to the start of the matched text */
	private int yychar;

	/**
	 * the number of characters from the last newline up to the start of the 
	 * matched text
	 */
	private int yycolumn;

	/** 
	 * zzAtBOL == true <=> the scanner is currently at the beginning of a line
	 */
	private boolean zzAtBOL = true;

	/** zzAtEOF == true <=> the scanner is at the EOF */
	private boolean zzAtEOF;

	/** denotes if the user-EOF-code has already been executed */
	private boolean zzEOFDone;

	/** For the backwards DFA of general lookahead statements */
	private boolean[] zzFin = new boolean[ZZ_BUFFERSIZE + 1];

	/* user code: */

	private String filePath = null;
	private ComplexSymbolFactory symbolFactory = new ComplexSymbolFactory();
	private StringBuilder stringBuilder = new StringBuilder();
	private String heredocNowdocMarker;
	private boolean heredocNowdocVariableInterpolation;

	/**
	 * Setter method for the filePath.
	 * @param filePath the filePath to set
	 */
	public void setFilePath(String filePath) {
		this.filePath = filePath;
	}

	private Symbol symbol(int type) {
		String text = yytext();
		Location left = new Location(filePath, yyline, yycolumn);
		Location right = new Location(filePath, yyline, yycolumn + text.length());
		return symbolFactory.newSymbol(text, type, left, right);
	}

	private Symbol symbol(int type, Object value) {
		String text = yytext();
		Location left = new Location(filePath, yyline, yycolumn);
		Location right = new Location(filePath, yyline, yycolumn + text.length());
		return symbolFactory.newSymbol(text, type, left, right, value);
	}

	private void beginHeredocNowdoc(String markerContainer, boolean markerQuoted, boolean interpolateVariables) {
		markerContainer = markerContainer.trim();
		this.heredocNowdocMarker = markerContainer.substring(markerQuoted ? 4 : 3, markerContainer.length() - (markerQuoted ? 1 : 0));
		this.heredocNowdocVariableInterpolation = interpolateVariables;
		stringBuilder.setLength(0);
		yybegin(HEREDOC_NOWDOC);
	}

	private Symbol handleHeredocNowdocStopperCandidate(String identifier) {
		if (identifier.equals(heredocNowdocMarker)) {
			return buildHeredocNowdocString();
		} else {
			handleHeredocNowdocContent(identifier);
			return null;
		}
	}

	private void handleHeredocNowdocContent(String content) {
		stringBuilder.append(content);
	}

	private Symbol buildHeredocNowdocString() {
		// TODO interpolation
		yybegin(CODE);
		return symbol(Tokens.STRING_LITERAL, stringBuilder.toString());
	}

	/**
	 * Creates a new scanner
	 *
	 * @param   in  the java.io.Reader to read input from.
	 */
	public Lexer(java.io.Reader in) {
		this.zzReader = in;
	}

	/** 
	 * Unpacks the compressed character translation table.
	 *
	 * @param packed   the packed character translation table
	 * @return         the unpacked character translation table
	 */
	private static char[] zzUnpackCMap(String packed) {
		char[] map = new char[0x10000];
		int i = 0; /* index in packed string  */
		int j = 0; /* index in unpacked array */
		while (i < 1938) {
			int count = packed.charAt(i++);
			char value = packed.charAt(i++);
			do
				map[j++] = value;
			while (--count > 0);
		}
		return map;
	}

	/**
	 * Refills the input buffer.
	 *
	 * @return      <code>false</code>, iff there was new input.
	 * 
	 * @exception   java.io.IOException  if any I/O-Error occurs
	 */
	private boolean zzRefill() throws java.io.IOException {

		/* first: make room (if you can) */
		if (zzStartRead > 0) {
			System.arraycopy(zzBuffer, zzStartRead, zzBuffer, 0, zzEndRead - zzStartRead);

			/* translate stored positions */
			zzEndRead -= zzStartRead;
			zzCurrentPos -= zzStartRead;
			zzMarkedPos -= zzStartRead;
			zzStartRead = 0;
		}

		/* is the buffer big enough? */
		if (zzCurrentPos >= zzBuffer.length) {
			/* if not: blow it up */
			char newBuffer[] = new char[zzCurrentPos * 2];
			System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
			zzBuffer = newBuffer;
		}

		/* finally: fill the buffer with new input */
		int numRead = zzReader.read(zzBuffer, zzEndRead, zzBuffer.length - zzEndRead);

		if (numRead > 0) {
			zzEndRead += numRead;
			return false;
		}
		// unlikely but not impossible: read 0 characters, but not at end of stream    
		if (numRead == 0) {
			int c = zzReader.read();
			if (c == -1) {
				return true;
			} else {
				zzBuffer[zzEndRead++] = (char)c;
				return false;
			}
		}

		// numRead < 0
		return true;
	}

	/**
	 * Closes the input stream.
	 */
	public final void yyclose() throws java.io.IOException {
		zzAtEOF = true; /* indicate end of file */
		zzEndRead = zzStartRead; /* invalidate buffer    */

		if (zzReader != null)
			zzReader.close();
	}

	/**
	 * Resets the scanner to read from a new input stream.
	 * Does not close the old reader.
	 *
	 * All internal variables are reset, the old input stream 
	 * <b>cannot</b> be reused (internal buffer is discarded and lost).
	 * Lexical state is set to <tt>ZZ_INITIAL</tt>.
	 *
	 * Internal scan buffer is resized down to its initial length, if it has grown.
	 *
	 * @param reader   the new input stream 
	 */
	public final void yyreset(java.io.Reader reader) {
		zzReader = reader;
		zzAtBOL = true;
		zzAtEOF = false;
		zzEOFDone = false;
		zzEndRead = zzStartRead = 0;
		zzCurrentPos = zzMarkedPos = 0;
		yyline = yychar = yycolumn = 0;
		zzLexicalState = YYINITIAL;
		if (zzBuffer.length > ZZ_BUFFERSIZE)
			zzBuffer = new char[ZZ_BUFFERSIZE];
	}

	/**
	 * Returns the current lexical state.
	 */
	public final int yystate() {
		return zzLexicalState;
	}

	/**
	 * Enters a new lexical state
	 *
	 * @param newState the new lexical state
	 */
	public final void yybegin(int newState) {
		zzLexicalState = newState;
	}

	/**
	 * Returns the text matched by the current regular expression.
	 */
	public final String yytext() {
		return new String(zzBuffer, zzStartRead, zzMarkedPos - zzStartRead);
	}

	/**
	 * Returns the character at position <tt>pos</tt> from the 
	 * matched text. 
	 * 
	 * It is equivalent to yytext().charAt(pos), but faster
	 *
	 * @param pos the position of the character to fetch. 
	 *            A value from 0 to yylength()-1.
	 *
	 * @return the character at position pos
	 */
	public final char yycharat(int pos) {
		return zzBuffer[zzStartRead + pos];
	}

	/**
	 * Returns the length of the matched text region.
	 */
	public final int yylength() {
		return zzMarkedPos - zzStartRead;
	}

	/**
	 * Reports an error that occured while scanning.
	 *
	 * In a wellformed scanner (no or only correct usage of 
	 * yypushback(int) and a match-all fallback rule) this method 
	 * will only be called with things that "Can't Possibly Happen".
	 * If this method is called, something is seriously wrong
	 * (e.g. a JFlex bug producing a faulty scanner etc.).
	 *
	 * Usual syntax/scanner level error handling should be done
	 * in error fallback rules.
	 *
	 * @param   errorCode  the code of the errormessage to display
	 */
	private void zzScanError(int errorCode) {
		String message;
		try {
			message = ZZ_ERROR_MSG[errorCode];
		} catch (ArrayIndexOutOfBoundsException e) {
			message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
		}

		throw new Error(message);
	}

	/**
	 * Pushes the specified amount of characters back into the input stream.
	 *
	 * They will be read again by then next call of the scanning method
	 *
	 * @param number  the number of characters to be read again.
	 *                This number must not be greater than yylength()!
	 */
	public void yypushback(int number) {
		if (number > yylength())
			zzScanError(ZZ_PUSHBACK_2BIG);

		zzMarkedPos -= number;
	}

	/**
	 * Contains user EOF-code, which will be executed exactly once,
	 * when the end of file is reached
	 */
	private void zzDoEOF() throws java.io.IOException {
		if (!zzEOFDone) {
			zzEOFDone = true;
			yyclose();
		}
	}

	/**
	 * Resumes scanning until the next regular expression is matched,
	 * the end of input is encountered or an I/O-Error occurs.
	 *
	 * @return      the next token
	 * @exception   java.io.IOException  if any I/O-Error occurs
	 */
	@Override
	public java_cup.runtime.Symbol next_token() throws java.io.IOException {
		int zzInput;
		int zzAction;

		// cached fields:
		int zzCurrentPosL;
		int zzMarkedPosL;
		int zzEndReadL = zzEndRead;
		char[] zzBufferL = zzBuffer;
		char[] zzCMapL = ZZ_CMAP;

		int[] zzTransL = ZZ_TRANS;
		int[] zzRowMapL = ZZ_ROWMAP;
		int[] zzAttrL = ZZ_ATTRIBUTE;

		while (true) {
			zzMarkedPosL = zzMarkedPos;

			boolean zzR = false;
			for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL; zzCurrentPosL++) {
				switch (zzBufferL[zzCurrentPosL]) {
				case '\u000B':
				case '\u000C':
				case '\u0085':
				case '\u2028':
				case '\u2029':
					yyline++;
					yycolumn = 0;
					zzR = false;
					break;
				case '\r':
					yyline++;
					yycolumn = 0;
					zzR = true;
					break;
				case '\n':
					if (zzR)
						zzR = false;
					else {
						yyline++;
						yycolumn = 0;
					}
					break;
				default:
					zzR = false;
					yycolumn++;
				}
			}

			if (zzR) {
				// peek one character ahead if it is \n (if we have counted one line too much)
				boolean zzPeek;
				if (zzMarkedPosL < zzEndReadL)
					zzPeek = zzBufferL[zzMarkedPosL] == '\n';
				else if (zzAtEOF)
					zzPeek = false;
				else {
					boolean eof = zzRefill();
					zzEndReadL = zzEndRead;
					zzMarkedPosL = zzMarkedPos;
					zzBufferL = zzBuffer;
					if (eof)
						zzPeek = false;
					else
						zzPeek = zzBufferL[zzMarkedPosL] == '\n';
				}
				if (zzPeek)
					yyline--;
			}
			zzAction = -1;

			zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

			zzState = ZZ_LEXSTATE[zzLexicalState];

			// set up zzAction for empty match case:
			int zzAttributes = zzAttrL[zzState];
			if ((zzAttributes & 1) == 1) {
				zzAction = zzState;
			}

			zzForAction: {
				while (true) {

					if (zzCurrentPosL < zzEndReadL)
						zzInput = zzBufferL[zzCurrentPosL++];
					else if (zzAtEOF) {
						zzInput = YYEOF;
						break zzForAction;
					} else {
						// store back cached positions
						zzCurrentPos = zzCurrentPosL;
						zzMarkedPos = zzMarkedPosL;
						boolean eof = zzRefill();
						// get translated positions and possibly new buffer
						zzCurrentPosL = zzCurrentPos;
						zzMarkedPosL = zzMarkedPos;
						zzBufferL = zzBuffer;
						zzEndReadL = zzEndRead;
						if (eof) {
							zzInput = YYEOF;
							break zzForAction;
						} else {
							zzInput = zzBufferL[zzCurrentPosL++];
						}
					}
					int zzNext = zzTransL[zzRowMapL[zzState] + zzCMapL[zzInput]];
					if (zzNext == -1)
						break zzForAction;
					zzState = zzNext;

					zzAttributes = zzAttrL[zzState];
					if ((zzAttributes & 1) == 1) {
						zzAction = zzState;
						zzMarkedPosL = zzCurrentPosL;
						if ((zzAttributes & 8) == 8)
							break zzForAction;
					}

				}
			}

			// store back cached position
			zzMarkedPos = zzMarkedPosL;

			switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
			case 1: {
				return symbol(Tokens.VERBATIM_CONTENT, yytext());
			}
			case 132:
				break;
			case 2: {
				String s = yytext();
				int code = s.charAt(0);
				throw new RuntimeException("Illegal character '" + yytext() + "' (code " + code + ")");
			}
			case 133:
				break;
			case 3: { // ignore
			}
			case 134:
				break;
			case 4: {
				return symbol(Tokens.DIVIDE);
			}
			case 135:
				break;
			case 5: {
				return symbol(Tokens.TIMES);
			}
			case 136:
				break;
			case 6: {
				return symbol(Tokens.INTEGER_LITERAL, Integer.parseInt(yytext()));
			}
			case 137:
				break;
			case 7: {
				return symbol(Tokens.IDENTIFIER, yytext());
			}
			case 138:
				break;
			case 8: {
				return symbol(Tokens.LESS);
			}
			case 139:
				break;
			case 9: {
				stringBuilder.setLength(0);
				yybegin(DOUBLE_QUOTED_STRING);
			}
			case 140:
				break;
			case 10: {
				stringBuilder.setLength(0);
				yybegin(SINGLE_QUOTED_STRING);
			}
			case 141:
				break;
			case 11: {
				return symbol(Tokens.QUESTION_MARK);
			}
			case 142:
				break;
			case 12: {
				return symbol(Tokens.ASSIGN);
			}
			case 143:
				break;
			case 13: {
				return symbol(Tokens.GREATER);
			}
			case 144:
				break;
			case 14: {
				return symbol(Tokens.OPENING_PARENTHESIS);
			}
			case 145:
				break;
			case 15: {
				return symbol(Tokens.CLOSING_PARENTHESIS);
			}
			case 146:
				break;
			case 16: {
				return symbol(Tokens.OPENING_CURLY_BRACE);
			}
			case 147:
				break;
			case 17: {
				return symbol(Tokens.CLOSING_CURLY_BRACE);
			}
			case 148:
				break;
			case 18: {
				return symbol(Tokens.OPENING_SQUARE_BRACKET);
			}
			case 149:
				break;
			case 19: {
				return symbol(Tokens.CLOSING_SQUARE_BRACKET);
			}
			case 150:
				break;
			case 20: {
				return symbol(Tokens.MINUS);
			}
			case 151:
				break;
			case 21: {
				return symbol(Tokens.SEMICOLON);
			}
			case 152:
				break;
			case 22: {
				return symbol(Tokens.COLON);
			}
			case 153:
				break;
			case 23: {
				return symbol(Tokens.COMMA);
			}
			case 154:
				break;
			case 24: {
				return symbol(Tokens.PLUS);
			}
			case 155:
				break;
			case 25: {
				return symbol(Tokens.MOD);
			}
			case 156:
				break;
			case 26: {
				return symbol(Tokens.CONCAT);
			}
			case 157:
				break;
			case 27: {
				return symbol(Tokens.LOGICAL_NOT);
			}
			case 158:
				break;
			case 28: {
				return symbol(Tokens.BITWISE_AND);
			}
			case 159:
				break;
			case 29: {
				return symbol(Tokens.BITWISE_OR);
			}
			case 160:
				break;
			case 30: {
				return symbol(Tokens.BITWISE_NOT);
			}
			case 161:
				break;
			case 31: {
				return symbol(Tokens.BITWISE_XOR);
			}
			case 162:
				break;
			case 32: {
				return symbol(Tokens.SUPPRESS_ERRORS);
			}
			case 163:
				break;
			case 33: {
				stringBuilder.append(yytext());
			}
			case 164:
				break;
			case 34: {
				yybegin(CODE);
				return symbol(Tokens.STRING_LITERAL, stringBuilder.toString());
			}
			case 165:
				break;
			case 35: {
				stringBuilder.append('\\');
			}
			case 166:
				break;
			case 36: { // TODO interpolate
				stringBuilder.append(yytext());
			}
			case 167:
				break;
			case 37: {
				handleHeredocNowdocContent(yytext());
			}
			case 168:
				break;
			case 38:
				// lookahead expression with fixed base length
				zzMarkedPos = zzStartRead + 1;
				{
					return symbol(Tokens.VERBATIM_CONTENT, yytext());
				}
			case 169:
				break;
			case 39: {
				yybegin(CODE);
			}
			case 170:
				break;
			case 40: {
				return symbol(Tokens.DIVIDE_ASSIGN);
			}
			case 171:
				break;
			case 41: {
				return symbol(Tokens.POWER);
			}
			case 172:
				break;
			case 42: {
				return symbol(Tokens.TIMES_ASSIGN);
			}
			case 173:
				break;
			case 43: {
				String s = yytext();
				int index1 = s.indexOf('8');
				if (index1 != -1) {
					s = s.substring(0, index1);
				}
				int index2 = s.indexOf('9');
				if (index2 != -1) {
					s = s.substring(0, index2);
				}
				return symbol(Tokens.INTEGER_LITERAL, Integer.parseInt(s, 8));
			}
			case 174:
				break;
			case 44: {
				return symbol(Tokens.LOCAL_VARIABLE_SINGLE_INDIRECTION, yytext().substring(1));
			}
			case 175:
				break;
			case 45: {
				return symbol(Tokens.SHIFT_LEFT);
			}
			case 176:
				break;
			case 46: {
				return symbol(Tokens.LESS_EQUAL);
			}
			case 177:
				break;
			case 47: {
				return symbol(Tokens.NOT_EQUAL);
			}
			case 178:
				break;
			case 48: {
				yybegin(YYINITIAL);
				return symbol(Tokens.SEMICOLON);
			}
			case 179:
				break;
			case 49: {
				return symbol(Tokens.EQUAL);
			}
			case 180:
				break;
			case 50: {
				return symbol(Tokens.DOUBLE_RIGHT_ARROW);
			}
			case 181:
				break;
			case 51: {
				return symbol(Tokens.GREATER_EQUAL);
			}
			case 182:
				break;
			case 52: {
				return symbol(Tokens.SHIFT_RIGHT);
			}
			case 183:
				break;
			case 53: {
				return symbol(Tokens.MINUS_ASSIGN);
			}
			case 184:
				break;
			case 54: {
				return symbol(Tokens.RIGHT_ARROW);
			}
			case 185:
				break;
			case 55: {
				return symbol(Tokens.DECREMENT);
			}
			case 186:
				break;
			case 56: {
				return symbol(Tokens.SCOPE_RESOLUTION);
			}
			case 187:
				break;
			case 57: {
				return symbol(Tokens.IF);
			}
			case 188:
				break;
			case 58: {
				return symbol(Tokens.LOW_PRECEDENCE_LOGICAL_SHORTCUT_OR);
			}
			case 189:
				break;
			case 59: {
				return symbol(Tokens.AS);
			}
			case 190:
				break;
			case 60: {
				return symbol(Tokens.DO);
			}
			case 191:
				break;
			case 61: {
				return symbol(Tokens.PLUS_ASSIGN);
			}
			case 192:
				break;
			case 62: {
				return symbol(Tokens.INCREMENT);
			}
			case 193:
				break;
			case 63: {
				return symbol(Tokens.MOD_ASSIGN);
			}
			case 194:
				break;
			case 64: {
				return symbol(Tokens.CONCAT_ASSIGN);
			}
			case 195:
				break;
			case 65: {
				return symbol(Tokens.BITWISE_AND_ASSIGN);
			}
			case 196:
				break;
			case 66: {
				return symbol(Tokens.LOGICAL_SHORTCUT_AND);
			}
			case 197:
				break;
			case 67: {
				return symbol(Tokens.BITWISE_OR_ASSIGN);
			}
			case 198:
				break;
			case 68: {
				return symbol(Tokens.LOGICAL_SHORTCUT_OR);
			}
			case 199:
				break;
			case 69: {
				return symbol(Tokens.BITWISE_XOR_ASSIGN);
			}
			case 200:
				break;
			case 70: {
				stringBuilder.append('\'');
			}
			case 201:
				break;
			case 71: {
				stringBuilder.append('\n');
			}
			case 202:
				break;
			case 72: {
				stringBuilder.append('\t');
			}
			case 203:
				break;
			case 73: {
				stringBuilder.append('\r');
			}
			case 204:
				break;
			case 74: {
				stringBuilder.append('\"');
			}
			case 205:
				break;
			case 75:
			// general lookahead, find correct zzMarkedPos
			{
				int zzFState = 5;
				int zzFPos = zzStartRead;
				if (zzFin.length <= zzBufferL.length) {
					zzFin = new boolean[zzBufferL.length + 1];
				}
				boolean zzFinL[] = zzFin;
				while (zzFState != -1 && zzFPos < zzMarkedPos) {
					zzFinL[zzFPos] = ((zzAttrL[zzFState] & 1) == 1);
					zzInput = zzBufferL[zzFPos++];
					zzFState = zzTransL[zzRowMapL[zzFState] + zzCMapL[zzInput]];
				}
				if (zzFState != -1) {
					zzFinL[zzFPos++] = ((zzAttrL[zzFState] & 1) == 1);
				}
				while (zzFPos <= zzMarkedPos) {
					zzFinL[zzFPos++] = false;
				}

				zzFState = 6;
				zzFPos = zzMarkedPos;
				while (!zzFinL[zzFPos] || (zzAttrL[zzFState] & 1) != 1) {
					zzInput = zzBufferL[--zzFPos];
					zzFState = zzTransL[zzRowMapL[zzFState] + zzCMapL[zzInput]];
				}
				;
				zzMarkedPos = zzFPos;
			}
				{
					Symbol s = handleHeredocNowdocStopperCandidate(yytext());
					if (s != null) {
						return s;
					}
				}
			case 206:
				break;
			case 76: {
				yybegin(CODE);
				return symbol(Tokens.IDENTIFIER, "echo");
			}
			case 207:
				break;
			case 77: {
				return symbol(Tokens.INTEGER_LITERAL, Integer.parseInt(yytext().substring(2), 16));
			}
			case 208:
				break;
			case 78: {
				return symbol(Tokens.INTEGER_LITERAL, Integer.parseInt(yytext().substring(2), 2));
			}
			case 209:
				break;
			case 79: {
				return symbol(Tokens.LOW_PRECEDENCE_LOGICAL_XOR);
			}
			case 210:
				break;
			case 80: {
				return symbol(Tokens.LOCAL_VARIABLE_MULTI_INDIRECTION, LocalVariableExpression.parse(yytext()));
			}
			case 211:
				break;
			case 81: {
				return symbol(Tokens.SHIFT_LEFT_ASSIGN);
			}
			case 212:
				break;
			case 82: {
				return symbol(Tokens.IDENTICAL);
			}
			case 213:
				break;
			case 83: {
				return symbol(Tokens.SHIFT_RIGHT_ASSIGN);
			}
			case 214:
				break;
			case 84: {
				return symbol(Tokens.FOR);
			}
			case 215:
				break;
			case 85: {
				return symbol(Tokens.NEW);
			}
			case 216:
				break;
			case 86: {
				return symbol(Tokens.TRY);
			}
			case 217:
				break;
			case 87: {
				return symbol(Tokens.CAST_TYPE_NAME, yytext());
			}
			case 218:
				break;
			case 88: {
				return symbol(Tokens.LOW_PRECEDENCE_LOGICAL_SHORTCUT_AND);
			}
			case 219:
				break;
			case 89: {
				return symbol(Tokens.VAR);
			}
			case 220:
				break;
			case 90: {
				return symbol(Tokens.NOT_IDENTICAL);
			}
			case 221:
				break;
			case 91: {
				return symbol(Tokens.NULL_LITERAL);
			}
			case 222:
				break;
			case 92: {
				return symbol(Tokens.CASE);
			}
			case 223:
				break;
			case 93: {
				return symbol(Tokens.BOOLEAN_LITERAL, true);
			}
			case 224:
				break;
			case 94: {
				return symbol(Tokens.SELF);
			}
			case 225:
				break;
			case 95: {
				return symbol(Tokens.ECHO);
			}
			case 226:
				break;
			case 96: {
				return symbol(Tokens.ELSE);
			}
			case 227:
				break;
			case 97: {
				return symbol(Tokens.BREAK);
			}
			case 228:
				break;
			case 98: {
				beginHeredocNowdoc(yytext(), false, true);
			}
			case 229:
				break;
			case 99: {
				return symbol(Tokens.PRINT);
			}
			case 230:
				break;
			case 100: {
				return symbol(Tokens.FINAL);
			}
			case 231:
				break;
			case 101: {
				return symbol(Tokens.BOOLEAN_LITERAL, false);
			}
			case 232:
				break;
			case 102: {
				return symbol(Tokens.CONST);
			}
			case 233:
				break;
			case 103: {
				return symbol(Tokens.CLASS);
			}
			case 234:
				break;
			case 104: {
				return symbol(Tokens.CATCH);
			}
			case 235:
				break;
			case 105: {
				return symbol(Tokens.THROW);
			}
			case 236:
				break;
			case 106: {
				return symbol(Tokens.ARRAY);
			}
			case 237:
				break;
			case 107: {
				return symbol(Tokens.WHILE);
			}
			case 238:
				break;
			case 108: {
				return symbol(Tokens.PUBLIC);
			}
			case 239:
				break;
			case 109: {
				return symbol(Tokens.PARENT);
			}
			case 240:
				break;
			case 110: {
				return symbol(Tokens.STATIC);
			}
			case 241:
				break;
			case 111: {
				return symbol(Tokens.SWITCH);
			}
			case 242:
				break;
			case 112: {
				return symbol(Tokens.ELSEIF);
			}
			case 243:
				break;
			case 113: {
				return symbol(Tokens.RETURN);
			}
			case 244:
				break;
			case 114: {
				return symbol(Tokens.GLOBAL);
			}
			case 245:
				break;
			case 115: {
				beginHeredocNowdoc(yytext(), true, true);
			}
			case 246:
				break;
			case 116: {
				beginHeredocNowdoc(yytext(), true, false);
			}
			case 247:
				break;
			case 117: {
				return symbol(Tokens.PRIVATE);
			}
			case 248:
				break;
			case 118: {
				return symbol(Tokens.FINALLY);
			}
			case 249:
				break;
			case 119: {
				return symbol(Tokens.FOREACH);
			}
			case 250:
				break;
			case 120: {
				return symbol(Tokens.INCLUDE);
			}
			case 251:
				break;
			case 121: {
				return symbol(Tokens.EXTENDS);
			}
			case 252:
				break;
			case 122: {
				return symbol(Tokens.REQUIRE);
			}
			case 253:
				break;
			case 123: {
				return symbol(Tokens.DEFAULT);
			}
			case 254:
				break;
			case 124: {
				return symbol(Tokens.FUNCTION);
			}
			case 255:
				break;
			case 125: {
				return symbol(Tokens.ABSTRACT);
			}
			case 256:
				break;
			case 126: {
				return symbol(Tokens.PROTECTED);
			}
			case 257:
				break;
			case 127: {
				return symbol(Tokens.INTERFACE);
			}
			case 258:
				break;
			case 128: {
				return symbol(Tokens.INSTANCEOF);
			}
			case 259:
				break;
			case 129: {
				return symbol(Tokens.IMPLEMENTS);
			}
			case 260:
				break;
			case 130: {
				return symbol(Tokens.INCLUDE_ONCE);
			}
			case 261:
				break;
			case 131: {
				return symbol(Tokens.REQUIRE_ONCE);
			}
			case 262:
				break;
			default:
				if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
					zzAtEOF = true;
					zzDoEOF();
					{
						Location location = new Location(filePath, yyline, yycolumn);
						return symbolFactory.newSymbol("EOF", Tokens.EOF, location, location);
					}
				} else {
					zzScanError(ZZ_NO_MATCH);
				}
			}
		}
	}

}
