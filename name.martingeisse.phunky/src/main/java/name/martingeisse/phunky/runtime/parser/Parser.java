//----------------------------------------------------
// The following code was generated by CUP v0.11b beta 20140220
// Wed Jun 11 22:12:34 CEST 2014
//----------------------------------------------------

package name.martingeisse.phunky.runtime.parser;

import java.util.ArrayList;
import java.util.List;
import java_cup.runtime.ComplexSymbolFactory.ComplexSymbol;
import java_cup.runtime.ComplexSymbolFactory.Location;
import java_cup.runtime.Symbol;
import name.martingeisse.phunky.runtime.code.declaration.FunctionDefinition;
import name.martingeisse.phunky.runtime.code.declaration.OopEntityModifier;
import name.martingeisse.phunky.runtime.code.declaration.OopMemberDefinition;
import name.martingeisse.phunky.runtime.code.declaration.OopTypeDefinition;
import name.martingeisse.phunky.runtime.code.expression.ArrayConstructionExpression;
import name.martingeisse.phunky.runtime.code.expression.BinaryExpression;
import name.martingeisse.phunky.runtime.code.expression.BinaryOperator;
import name.martingeisse.phunky.runtime.code.expression.ConstantExpression;
import name.martingeisse.phunky.runtime.code.expression.Expression;
import name.martingeisse.phunky.runtime.code.expression.FunctionCall;
import name.martingeisse.phunky.runtime.code.expression.LiteralExpression;
import name.martingeisse.phunky.runtime.code.expression.LocalVariableExpression;
import name.martingeisse.phunky.runtime.code.statement.ExpressionStatement;
import name.martingeisse.phunky.runtime.code.statement.GlobalStatement;
import name.martingeisse.phunky.runtime.code.statement.NopStatement;
import name.martingeisse.phunky.runtime.code.statement.Statement;
import name.martingeisse.phunky.runtime.code.statement.StatementSequence;
import org.apache.commons.lang3.tuple.Pair;

/** CUP v0.11b beta 20140220 generated parser.
  * @version Wed Jun 11 22:12:34 CEST 2014
  */
@SuppressWarnings("all")
public class Parser extends java_cup.runtime.lr_parser {

	/** Default constructor. */
	public Parser() {
		super();
	}

	/** Constructor which sets the default scanner. */
	public Parser(final java_cup.runtime.Scanner s) {
		super(s);
	}

	/** Constructor which sets the default scanner. */
	public Parser(final java_cup.runtime.Scanner s, final java_cup.runtime.SymbolFactory sf) {
		super(s, sf);
	}

	/** Production table. */
	protected static final short _production_table[][] = unpackFromStrings(new String[] { "\000\106\000\002\002\004\000\002\002\003\000\002\003" + "\002\000\002\003\004\000\002\004\003\000\002\004\004" + "\000\002\004\005\000\002\004\003\000\002\004\005\000" + "\002\004\005\000\002\004\012\000\002\004\003\000\002" + "\004\004\000\002\005\002\000\002\005\003\000\002\006" + "\003\000\002\006\005\000\002\007\003\000\002\007\003" + "\000\002\007\003\000\002\007\003\000\002\007\003\000" + "\002\007\005\000\002\007\005\000\002\007\005\000\002" + "\007\005\000\002\007\005\000\002\007\005\000\002\007" + "\005\000\002\007\006\000\002\007\006\000\002\007\003" + "\000\002\010\002\000\002\010\003\000\002\011\003\000" + "\002\011\005\000\002\012\003\000\002\012\005\000\002" + "\013\002\000\002\013\003\000\002\014\003\000\002\014" + "\005\000\002\015\003\000\002\016\011\000\002\016\010" + "\000\002\017\002\000\002\017\004\000\002\020\002\000" + "\002\020\004\000\002\021\002\000\002\021\004\000\002" + "\022\002\000\002\022\003\000\002\023\003\000\002\023" + "\005\000\002\024\003\000\002\025\002\000\002\025\004" + "\000\002\026\007\000\002\026\005\000\002\026\005\000" + "\002\026\013\000\002\027\002\000\002\027\004\000\002" + "\030\003\000\002\030\003\000\002\030\003\000\002\030" + "\003\000\002\030\003\000\002\030\003" });

	/** Access to production table. */
	@Override
	public short[][] production_table() {
		return _production_table;
	}

	/** Parse-action table. */
	protected static final short[][] _action_table = unpackFromStrings(new String[] { "\000\174\000\044\002\uffff\003\uffff\004\uffff\005\uffff\007" + "\uffff\014\uffff\021\uffff\022\uffff\023\uffff\054\uffff\055\uffff" + "\121\uffff\125\uffff\126\uffff\127\uffff\130\uffff\131\uffff\001" + "\002\000\004\002\176\001\002\000\044\002\000\003\024" + "\004\020\005\012\007\015\014\007\021\016\022\006\023" + "\026\054\025\055\011\121\030\125\013\126\027\127\021" + "\130\014\131\017\001\002\000\004\130\164\001\002\000" + "\046\002\ufffd\003\ufffd\004\ufffd\005\ufffd\007\ufffd\010\ufffd" + "\014\ufffd\021\ufffd\022\ufffd\023\ufffd\054\ufffd\055\ufffd\121" + "\ufffd\125\ufffd\126\ufffd\127\ufffd\130\ufffd\131\ufffd\001\002" + "\000\046\002\ufffe\003\ufffe\004\ufffe\005\ufffe\007\ufffe\010" + "\ufffe\014\ufffe\021\ufffe\022\ufffe\023\ufffe\054\ufffe\055\ufffe" + "\121\ufffe\125\ufffe\126\ufffe\127\ufffe\130\ufffe\131\ufffe\001" + "\002\000\022\003\034\005\012\121\030\125\013\126\027" + "\127\021\130\014\131\017\001\002\000\022\003\034\005" + "\012\121\030\125\013\126\027\127\021\130\014\131\017" + "\001\002\000\026\006\ufff0\013\ufff0\014\ufff0\020\ufff0\056" + "\ufff0\057\ufff0\060\ufff0\061\ufff0\062\ufff0\104\ufff0\001\002" + "\000\030\005\151\006\uffec\013\uffec\014\uffec\020\uffec\056" + "\uffec\057\uffec\060\uffec\061\uffec\062\uffec\104\uffec\001\002" + "\000\044\003\uffff\004\uffff\005\uffff\007\uffff\010\uffff\014" + "\uffff\021\uffff\022\uffff\023\uffff\054\uffff\055\uffff\121\uffff" + "\125\uffff\126\uffff\127\uffff\130\uffff\131\uffff\001\002\000" + "\004\130\140\001\002\000\026\006\uffed\013\uffed\014\uffed" + "\020\uffed\056\uffed\057\uffed\060\uffed\061\uffed\062\uffed\104" + "\uffed\001\002\000\046\002\ufffa\003\ufffa\004\ufffa\005\ufffa" + "\007\ufffa\010\ufffa\014\ufffa\021\ufffa\022\ufffa\023\ufffa\054" + "\ufffa\055\ufffa\121\ufffa\125\ufffa\126\ufffa\127\ufffa\130\ufffa" + "\131\ufffa\001\002\000\026\006\uffee\013\uffee\014\uffee\020" + "\uffee\056\uffee\057\uffee\060\uffee\061\uffee\062\uffee\104\uffee" + "\001\002\000\046\002\ufff6\003\ufff6\004\ufff6\005\ufff6\007" + "\ufff6\010\ufff6\014\ufff6\021\ufff6\022\ufff6\023\ufff6\054\ufff6" + "\055\ufff6\121\ufff6\125\ufff6\126\ufff6\127\ufff6\130\ufff6\131" + "\ufff6\001\002\000\020\014\137\056\043\057\044\060\046" + "\061\045\062\042\104\047\001\002\000\020\014\136\056" + "\uffe2\057\uffe2\060\uffe2\061\uffe2\062\uffe2\104\uffe2\001\002" + "\000\004\131\134\001\002\000\004\130\060\001\002\000" + "\026\006\uffef\013\uffef\014\uffef\020\uffef\056\uffef\057\uffef" + "\060\uffef\061\uffef\062\uffef\104\uffef\001\002\000\004\005" + "\031\001\002\000\024\003\034\005\012\006\uffe1\121\030" + "\125\013\126\027\127\021\130\014\131\017\001\002\000" + "\004\006\057\001\002\000\024\006\uffdd\013\041\020\uffdd" + "\056\043\057\044\060\046\061\045\062\042\104\047\001" + "\002\000\026\006\uffe2\013\uffe2\014\uffe2\020\uffe2\056\uffe2" + "\057\uffe2\060\uffe2\061\uffe2\062\uffe2\104\uffe2\001\002\000" + "\006\006\uffe0\020\037\001\002\000\006\006\uffdf\020\uffdf" + "\001\002\000\022\003\034\005\012\121\030\125\013\126" + "\027\127\021\130\014\131\017\001\002\000\006\006\uffde" + "\020\uffde\001\002\000\022\003\034\005\012\121\030\125" + "\013\126\027\127\021\130\014\131\017\001\002\000\022" + "\003\034\005\012\121\030\125\013\126\027\127\021\130" + "\014\131\017\001\002\000\022\003\034\005\012\121\030" + "\125\013\126\027\127\021\130\014\131\017\001\002\000" + "\022\003\034\005\012\121\030\125\013\126\027\127\021" + "\130\014\131\017\001\002\000\022\003\034\005\012\121" + "\030\125\013\126\027\127\021\130\014\131\017\001\002" + "\000\022\003\034\005\012\121\030\125\013\126\027\127" + "\021\130\014\131\017\001\002\000\022\003\034\005\012" + "\121\030\125\013\126\027\127\021\130\014\131\017\001" + "\002\000\026\006\uffe5\013\uffe5\014\uffe5\020\uffe5\056\043" + "\057\044\060\046\061\045\062\042\104\047\001\002\000" + "\026\006\uffe8\013\uffe8\014\uffe8\020\uffe8\056\uffe8\057\uffe8" + "\060\uffe8\061\uffe8\062\uffe8\104\uffe8\001\002\000\026\006" + "\uffe7\013\uffe7\014\uffe7\020\uffe7\056\uffe7\057\uffe7\060\uffe7" + "\061\uffe7\062\uffe7\104\uffe7\001\002\000\026\006\uffe9\013" + "\uffe9\014\uffe9\020\uffe9\056\uffe9\057\uffe9\060\046\061\045" + "\062\042\104\uffe9\001\002\000\026\006\uffea\013\uffea\014" + "\uffea\020\uffea\056\uffea\057\uffea\060\046\061\045\062\042" + "\104\uffea\001\002\000\026\006\uffe6\013\uffe6\014\uffe6\020" + "\uffe6\056\uffe6\057\uffe6\060\uffe6\061\uffe6\062\uffe6\104\uffe6" + "\001\002\000\022\006\uffdc\020\uffdc\056\043\057\044\060" + "\046\061\045\062\042\104\047\001\002\000\026\006\uffe3" + "\013\uffe3\014\uffe3\020\uffe3\056\uffe3\057\uffe3\060\uffe3\061" + "\uffe3\062\uffe3\104\uffe3\001\002\000\006\007\uffd0\024\061" + "\001\002\000\006\007\uffce\130\131\001\002\000\004\007" + "\063\001\002\000\030\010\uffc9\021\uffc9\026\uffc9\027\uffc9" + "\030\uffc9\031\uffc9\032\uffc9\033\uffc9\034\uffc9\035\uffc9\131" + "\uffc9\001\002\000\030\010\066\021\uffc3\026\uffc3\027\uffc3" + "\030\uffc3\031\uffc3\032\uffc3\033\uffc3\034\067\035\065\131" + "\uffc3\001\002\000\004\130\122\001\002\000\046\002\uffd5" + "\003\uffd5\004\uffd5\005\uffd5\007\uffd5\010\uffd5\014\uffd5\021" + "\uffd5\022\uffd5\023\uffd5\054\uffd5\055\uffd5\121\uffd5\125\uffd5" + "\126\uffd5\127\uffd5\130\uffd5\131\uffd5\001\002\000\004\131" + "\120\001\002\000\030\010\uffc8\021\uffc8\026\uffc8\027\uffc8" + "\030\uffc8\031\uffc8\032\uffc8\033\uffc8\034\uffc8\035\uffc8\131" + "\uffc8\001\002\000\022\021\077\026\073\027\075\030\076" + "\031\074\032\072\033\102\131\100\001\002\000\022\021" + "\uffbd\026\uffbd\027\uffbd\030\uffbd\031\uffbd\032\uffbd\033\uffbd" + "\131\uffbd\001\002\000\022\021\uffc1\026\uffc1\027\uffc1\030" + "\uffc1\031\uffc1\032\uffc1\033\uffc1\131\uffc1\001\002\000\022" + "\021\uffbe\026\uffbe\027\uffbe\030\uffbe\031\uffbe\032\uffbe\033" + "\uffbe\131\uffbe\001\002\000\022\021\uffc0\026\uffc0\027\uffc0" + "\030\uffc0\031\uffc0\032\uffc0\033\uffc0\131\uffc0\001\002\000" + "\022\021\uffbf\026\uffbf\027\uffbf\030\uffbf\031\uffbf\032\uffbf" + "\033\uffbf\131\uffbf\001\002\000\004\130\104\001\002\000" + "\004\014\103\001\002\000\022\021\uffc2\026\uffc2\027\uffc2" + "\030\uffc2\031\uffc2\032\uffc2\033\uffc2\131\uffc2\001\002\000" + "\022\021\uffbc\026\uffbc\027\uffbc\030\uffbc\031\uffbc\032\uffbc" + "\033\uffbc\131\uffbc\001\002\000\030\010\uffc5\021\uffc5\026" + "\uffc5\027\uffc5\030\uffc5\031\uffc5\032\uffc5\033\uffc5\034\uffc5" + "\035\uffc5\131\uffc5\001\002\000\004\005\105\001\002\000" + "\006\006\uffdb\131\107\001\002\000\006\006\uffda\020\116" + "\001\002\000\006\006\uffd7\020\uffd7\001\002\000\004\006" + "\112\001\002\000\006\006\uffd9\020\uffd9\001\002\000\004" + "\007\113\001\002\000\044\003\uffff\004\uffff\005\uffff\007" + "\uffff\010\uffff\014\uffff\021\uffff\022\uffff\023\uffff\054\uffff" + "\055\uffff\121\uffff\125\uffff\126\uffff\127\uffff\130\uffff\131" + "\uffff\001\002\000\044\003\024\004\020\005\012\007\015" + "\010\115\014\007\021\016\022\006\023\026\054\025\055" + "\011\121\030\125\013\126\027\127\021\130\014\131\017" + "\001\002\000\030\010\uffc4\021\uffc4\026\uffc4\027\uffc4\030" + "\uffc4\031\uffc4\032\uffc4\033\uffc4\034\uffc4\035\uffc4\131\uffc4" + "\001\002\000\004\131\107\001\002\000\006\006\uffd8\020" + "\uffd8\001\002\000\004\014\121\001\002\000\030\010\uffc6" + "\021\uffc6\026\uffc6\027\uffc6\030\uffc6\031\uffc6\032\uffc6\033" + "\uffc6\034\uffc6\035\uffc6\131\uffc6\001\002\000\004\104\123" + "\001\002\000\022\003\034\005\012\121\030\125\013\126" + "\027\127\021\130\014\131\017\001\002\000\020\014\125" + "\056\043\057\044\060\046\061\045\062\042\104\047\001" + "\002\000\030\010\uffc7\021\uffc7\026\uffc7\027\uffc7\030\uffc7" + "\031\uffc7\032\uffc7\033\uffc7\034\uffc7\035\uffc7\131\uffc7\001" + "\002\000\006\007\uffcd\020\132\001\002\000\006\007\uffcc" + "\020\uffcc\001\002\000\004\007\uffcf\001\002\000\006\007" + "\uffca\020\uffca\001\002\000\004\130\131\001\002\000\006" + "\007\uffcb\020\uffcb\001\002\000\004\014\135\001\002\000" + "\046\002\ufff8\003\ufff8\004\ufff8\005\ufff8\007\ufff8\010\ufff8" + "\014\ufff8\021\ufff8\022\ufff8\023\ufff8\054\ufff8\055\ufff8\121" + "\ufff8\125\ufff8\126\ufff8\127\ufff8\130\ufff8\131\ufff8\001\002" + "\000\046\002\ufff5\003\ufff5\004\ufff5\005\ufff5\007\ufff5\010" + "\ufff5\014\ufff5\021\ufff5\022\ufff5\023\ufff5\054\ufff5\055\ufff5" + "\121\ufff5\125\ufff5\126\ufff5\127\ufff5\130\ufff5\131\ufff5\001" + "\002\000\046\002\ufffc\003\ufffc\004\ufffc\005\ufffc\007\ufffc" + "\010\ufffc\014\ufffc\021\ufffc\022\ufffc\023\ufffc\054\ufffc\055" + "\ufffc\121\ufffc\125\ufffc\126\ufffc\127\ufffc\130\ufffc\131\ufffc" + "\001\002\000\004\005\141\001\002\000\006\006\uffdb\131" + "\107\001\002\000\004\006\143\001\002\000\004\007\144" + "\001\002\000\044\003\uffff\004\uffff\005\uffff\007\uffff\010" + "\uffff\014\uffff\021\uffff\022\uffff\023\uffff\054\uffff\055\uffff" + "\121\uffff\125\uffff\126\uffff\127\uffff\130\uffff\131\uffff\001" + "\002\000\044\003\024\004\020\005\012\007\015\010\146" + "\014\007\021\016\022\006\023\026\054\025\055\011\121" + "\030\125\013\126\027\127\021\130\014\131\017\001\002" + "\000\046\002\ufff7\003\ufff7\004\ufff7\005\ufff7\007\ufff7\010" + "\ufff7\014\ufff7\021\ufff7\022\ufff7\023\ufff7\054\ufff7\055\ufff7" + "\121\ufff7\125\ufff7\126\ufff7\127\ufff7\130\ufff7\131\ufff7\001" + "\002\000\044\003\024\004\020\005\012\007\015\010\150" + "\014\007\021\016\022\006\023\026\054\025\055\011\121" + "\030\125\013\126\027\127\021\130\014\131\017\001\002" + "\000\046\002\ufffb\003\ufffb\004\ufffb\005\ufffb\007\ufffb\010" + "\ufffb\014\ufffb\021\ufffb\022\ufffb\023\ufffb\054\ufffb\055\ufffb" + "\121\ufffb\125\ufffb\126\ufffb\127\ufffb\130\ufffb\131\ufffb\001" + "\002\000\024\003\034\005\012\006\ufff4\121\030\125\013" + "\126\027\127\021\130\014\131\017\001\002\000\006\006" + "\ufff3\020\156\001\002\000\004\006\155\001\002\000\024" + "\006\ufff2\014\ufff2\020\ufff2\056\043\057\044\060\046\061"
			+ "\045\062\042\104\047\001\002\000\026\006\uffe4\013\uffe4" + "\014\uffe4\020\uffe4\056\uffe4\057\uffe4\060\uffe4\061\uffe4\062" + "\uffe4\104\uffe4\001\002\000\022\003\034\005\012\121\030" + "\125\013\126\027\127\021\130\014\131\017\001\002\000" + "\024\006\ufff1\014\ufff1\020\ufff1\056\043\057\044\060\046" + "\061\045\062\042\104\047\001\002\000\020\006\161\056" + "\043\057\044\060\046\061\045\062\042\104\047\001\002" + "\000\026\006\uffeb\013\uffeb\014\uffeb\020\uffeb\056\uffeb\057" + "\uffeb\060\uffeb\061\uffeb\062\uffeb\104\uffeb\001\002\000\006" + "\014\163\020\156\001\002\000\046\002\ufff9\003\ufff9\004" + "\ufff9\005\ufff9\007\ufff9\010\ufff9\014\ufff9\021\ufff9\022\ufff9" + "\023\ufff9\054\ufff9\055\ufff9\121\ufff9\125\ufff9\126\ufff9\127" + "\ufff9\130\ufff9\131\ufff9\001\002\000\010\007\uffd4\024\166" + "\025\uffd4\001\002\000\006\007\uffd2\025\171\001\002\000" + "\004\130\167\001\002\000\006\007\uffd3\025\uffd3\001\002" + "\000\004\007\173\001\002\000\006\007\uffce\130\131\001" + "\002\000\004\007\uffd1\001\002\000\030\010\uffc9\021\uffc9" + "\026\uffc9\027\uffc9\030\uffc9\031\uffc9\032\uffc9\033\uffc9\034" + "\uffc9\035\uffc9\131\uffc9\001\002\000\030\010\175\021\uffc3" + "\026\uffc3\027\uffc3\030\uffc3\031\uffc3\032\uffc3\033\uffc3\034" + "\067\035\065\131\uffc3\001\002\000\046\002\uffd6\003\uffd6" + "\004\uffd6\005\uffd6\007\uffd6\010\uffd6\014\uffd6\021\uffd6\022" + "\uffd6\023\uffd6\054\uffd6\055\uffd6\121\uffd6\125\uffd6\126\uffd6" + "\127\uffd6\130\uffd6\131\uffd6\001\002\000\004\002\001\001" + "\002" });

	/** Access to parse-action table. */
	@Override
	public short[][] action_table() {
		return _action_table;
	}

	/** <code>reduce_goto</code> table. */
	protected static final short[][] _reduce_table = unpackFromStrings(new String[] { "\000\174\000\006\002\003\003\004\001\001\000\002\001" + "\001\000\010\004\007\007\022\016\021\001\001\000\002" + "\001\001\000\002\001\001\000\002\001\001\000\006\006" + "\161\007\153\001\001\000\004\007\157\001\001\000\002" + "\001\001\000\002\001\001\000\004\003\146\001\001\000" + "\002\001\001\000\002\001\001\000\002\001\001\000\002" + "\001\001\000\002\001\001\000\002\001\001\000\002\001" + "\001\000\002\001\001\000\002\001\001\000\002\001\001" + "\000\002\001\001\000\012\007\032\010\031\011\034\012" + "\035\001\001\000\002\001\001\000\002\001\001\000\002" + "\001\001\000\002\001\001\000\002\001\001\000\006\007" + "\032\012\037\001\001\000\002\001\001\000\004\007\055" + "\001\001\000\004\007\054\001\001\000\004\007\053\001" + "\001\000\004\007\052\001\001\000\004\007\051\001\001" + "\000\004\007\050\001\001\000\004\007\047\001\001\000" + "\002\001\001\000\002\001\001\000\002\001\001\000\002" + "\001\001\000\002\001\001\000\002\001\001\000\002\001" + "\001\000\002\001\001\000\004\021\061\001\001\000\010" + "\022\127\023\125\024\126\001\001\000\002\001\001\000" + "\004\025\063\001\001\000\006\026\067\027\070\001\001" + "\000\002\001\001\000\002\001\001\000\002\001\001\000" + "\002\001\001\000\004\030\100\001\001\000\002\001\001" + "\000\002\001\001\000\002\001\001\000\002\001\001\000" + "\002\001\001\000\002\001\001\000\002\001\001\000\002" + "\001\001\000\002\001\001\000\002\001\001\000\002\001" + "\001\000\010\013\107\014\105\015\110\001\001\000\002" + "\001\001\000\002\001\001\000\002\001\001\000\002\001" + "\001\000\002\001\001\000\004\003\113\001\001\000\010" + "\004\007\007\022\016\021\001\001\000\002\001\001\000" + "\004\015\116\001\001\000\002\001\001\000\002\001\001" + "\000\002\001\001\000\002\001\001\000\004\007\123\001" + "\001\000\002\001\001\000\002\001\001\000\002\001\001" + "\000\002\001\001\000\002\001\001\000\002\001\001\000" + "\004\024\132\001\001\000\002\001\001\000\002\001\001" + "\000\002\001\001\000\002\001\001\000\002\001\001\000" + "\002\001\001\000\010\013\141\014\105\015\110\001\001" + "\000\002\001\001\000\002\001\001\000\004\003\144\001" + "\001\000\010\004\007\007\022\016\021\001\001\000\002" + "\001\001\000\010\004\007\007\022\016\021\001\001\000" + "\002\001\001\000\010\005\152\006\151\007\153\001\001" + "\000\002\001\001\000\002\001\001\000\002\001\001\000" + "\002\001\001\000\004\007\156\001\001\000\002\001\001" + "\000\002\001\001\000\002\001\001\000\002\001\001\000" + "\002\001\001\000\004\017\164\001\001\000\004\020\167" + "\001\001\000\002\001\001\000\002\001\001\000\002\001" + "\001\000\010\022\171\023\125\024\126\001\001\000\002" + "\001\001\000\004\025\173\001\001\000\006\026\067\027" + "\070\001\001\000\002\001\001\000\002\001\001" });

	/** Access to <code>reduce_goto</code> table. */
	@Override
	public short[][] reduce_table() {
		return _reduce_table;
	}

	/** Instance of action encapsulation class. */
	protected CUP$Parser$actions action_obj;

	/** Action encapsulation object initializer. */
	@Override
	protected void init_actions() {
		action_obj = new CUP$Parser$actions(this);
	}

	/** Invoke a user supplied parse action. */
	@Override
	public java_cup.runtime.Symbol do_action(final int act_num, final java_cup.runtime.lr_parser parser, final java.util.Stack stack, final int top) throws java.lang.Exception {
		/* call code in generated class */
		return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
	}

	/** Indicates start state. */
	@Override
	public int start_state() {
		return 0;
	}

	/** Indicates start production. */
	@Override
	public int start_production() {
		return 0;
	}

	/** <code>EOF</code> Symbol index. */
	@Override
	public int EOF_sym() {
		return 0;
	}

	/** <code>error</code> Symbol index. */
	@Override
	public int error_sym() {
		return 1;
	}

	/** User initialization code. */
	@Override
	public void user_init() throws java.lang.Exception {

	}

	/** Scan to get the next Symbol. */
	@Override
	public java_cup.runtime.Symbol scan() throws java.lang.Exception {

		return getScanner().next_token();

	}

	/* (non-Javadoc)
	 * @see java_cup.runtime.lr_parser#syntax_error(java_cup.runtime.Symbol)
	 */
	@Override
	public void syntax_error(final Symbol token) {
		if (token instanceof ComplexSymbol) {

			final ComplexSymbol complexSymbol = (ComplexSymbol)token;
			final int line = complexSymbol.getLeft().getLine();
			final int column = complexSymbol.getLeft().getColumn();
			System.err.println("Syntax error at line " + line + ", col " + column + ", symbol " + complexSymbol.sym + ", value " + complexSymbol.value);

			System.err.print("Valid symbols at this point:");
			final int state = ((Symbol)stack.peek()).parse_state;
			final short[] actionRow = action_tab[state];
			for (int i = 0; i < actionRow.length; i += 2) {
				if (actionRow[i + 1] != 0) {
					System.err.print(" " + actionRow[i]);
				}
			}
			System.err.println();

		} else {
			super.syntax_error(token);
		}
	}

}

/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings("all")
class CUP$Parser$actions {
	private final Parser parser;

	/** Constructor */
	CUP$Parser$actions(final Parser parser) {
		this.parser = parser;
	}

	/** Method 0 with the actual generated action code for actions 0 to 300. */
	public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(final int CUP$Parser$act_num, final java_cup.runtime.lr_parser CUP$Parser$parser, final java.util.Stack CUP$Parser$stack, final int CUP$Parser$top) throws java.lang.Exception {
		/* Symbol object for return from actions */
		java_cup.runtime.Symbol CUP$Parser$result;

		/* select the action based on the action number */
		switch (CUP$Parser$act_num) {
		/*. . . . . . . . . . . . . . . . . . . .*/
		case 0: // $START ::= program EOF 
		{
			Object RESULT = null;
			final Location start_valxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).xleft;
			final Location start_valxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).xright;
			final StatementSequence start_val = (StatementSequence)((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).value;
			RESULT = start_val;
			CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START", 0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top - 1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
		}
			/* ACCEPT */
			CUP$Parser$parser.done_parsing();
			return CUP$Parser$result;

			/*. . . . . . . . . . . . . . . . . . . .*/
		case 1: // program ::= statements 
		{
			StatementSequence RESULT = null;
			final Location stsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
			final Location stsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
			final List<Statement> sts = (List<Statement>)((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).value;
			RESULT = new StatementSequence(sts);
			CUP$Parser$result = parser.getSymbolFactory().newSymbol("program", 0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
		}
			return CUP$Parser$result;

			/*. . . . . . . . . . . . . . . . . . . .*/
		case 2: // statements ::= 
		{
			List<Statement> RESULT = null;
			RESULT = new ArrayList<Statement>();
			CUP$Parser$result = parser.getSymbolFactory().newSymbol("statements", 1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
		}
			return CUP$Parser$result;

			/*. . . . . . . . . . . . . . . . . . . .*/
		case 3: // statements ::= statements statement 
		{
			List<Statement> RESULT = null;
			final Location stsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).xleft;
			final Location stsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).xright;
			final List<Statement> sts = (List<Statement>)((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).value;
			final Location stxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
			final Location stxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
			final Statement st = (Statement)((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).value;
			sts.add(st);
			RESULT = sts;
			CUP$Parser$result = parser.getSymbolFactory().newSymbol("statements", 1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top - 1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
		}
			return CUP$Parser$result;

			/*. . . . . . . . . . . . . . . . . . . .*/
		case 4: // statement ::= SEMICOLON 
		{
			Statement RESULT = null;
			RESULT = new NopStatement();
			CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement", 2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
		}
			return CUP$Parser$result;

			/*. . . . . . . . . . . . . . . . . . . .*/
		case 5: // statement ::= expression SEMICOLON 
		{
			Statement RESULT = null;
			final Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).xleft;
			final Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).xright;
			final Expression e = (Expression)((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).value;
			RESULT = new ExpressionStatement(e);
			CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement", 2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top - 1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
		}
			return CUP$Parser$result;

			/*. . . . . . . . . . . . . . . . . . . .*/
		case 6: // statement ::= OPENING_CURLY_BRACE statements CLOSING_CURLY_BRACE 
		{
			Statement RESULT = null;
			final Location stsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).xleft;
			final Location stsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).xright;
			final List<Statement> sts = (List<Statement>)((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).value;
			RESULT = new StatementSequence(sts);
			CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement", 2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top - 2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
		}
			return CUP$Parser$result;

			/*. . . . . . . . . . . . . . . . . . . .*/
		case 7: // statement ::= VERBATIM_CONTENT 
		{
			Statement RESULT = null;
			final Location cxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
			final Location cxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
			final String c = (String)((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).value;
			RESULT = new ExpressionStatement(new FunctionCall("echo", new LiteralExpression(c)));
			CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement", 2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
		}
			return CUP$Parser$result;

			/*. . . . . . . . . . . . . . . . . . . .*/
		case 8: // statement ::= ECHO one_or_more_expressions SEMICOLON 
		{
			Statement RESULT = null;
			final Location exsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).xleft;
			final Location exsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).xright;
			final List<Expression> exs = (List<Expression>)((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).value;
			RESULT = new ExpressionStatement(new FunctionCall("echo", exs.toArray(new Expression[exs.size()])));
			CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement", 2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top - 2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
		}
			return CUP$Parser$result;

			/*. . . . . . . . . . . . . . . . . . . .*/
		case 9: // statement ::= GLOBAL LOCAL_VARIABLE SEMICOLON 
		{
			Statement RESULT = null;
			final Location vxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).xleft;
			final Location vxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).xright;
			final String v = (String)((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).value;
			RESULT = new GlobalStatement(v);
			CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement", 2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top - 2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
		}
			return CUP$Parser$result;

			/*. . . . . . . . . . . . . . . . . . . .*/
		case 10: // statement ::= FUNCTION IDENTIFIER OPENING_PARENTHESIS parameter_declarations CLOSING_PARENTHESIS OPENING_CURLY_BRACE statements CLOSING_CURLY_BRACE 
		{
			Statement RESULT = null;
			final Location idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top - 6)).xleft;
			final Location idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top - 6)).xright;
			final String id = (String)((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top - 6)).value;
			final Location declsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top - 4)).xleft;
			final Location declsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top - 4)).xright;
			final List<String> decls = (List<String>)((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top - 4)).value;
			final Location stsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).xleft;
			final Location stsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).xright;
			final List<Statement> sts = (List<Statement>)((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).value;
			RESULT = new FunctionDefinition(id, decls.toArray(new String[decls.size()]), new StatementSequence(sts));
			CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement", 2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top - 7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
		}
			return CUP$Parser$result;

			/*. . . . . . . . . . . . . . . . . . . .*/
		case 11: // statement ::= oop_type_definition 
		{
			Statement RESULT = null;
			final Location defxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
			final Location defxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
			final OopTypeDefinition def = (OopTypeDefinition)((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).value;
			RESULT = def;
			CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement", 2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
		}
			return CUP$Parser$result;

			/*. . . . . . . . . . . . . . . . . . . .*/
		case 12: // statement ::= error SEMICOLON 
		{
			Statement RESULT = null;
			System.err.println("syntax error");
			RESULT = new NopStatement();
			CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement", 2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top - 1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
		}
			return CUP$Parser$result;

			/*. . . . . . . . . . . . . . . . . . . .*/
		case 13: // expressions ::= 
		{
			List<Expression> RESULT = null;
			RESULT = new ArrayList<Expression>();
			CUP$Parser$result = parser.getSymbolFactory().newSymbol("expressions", 3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
		}
			return CUP$Parser$result;

			/*. . . . . . . . . . . . . . . . . . . .*/
		case 14: // expressions ::= one_or_more_expressions 
		{
			List<Expression> RESULT = null;
			final Location exsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
			final Location exsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
			final List<Expression> exs = (List<Expression>)((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).value;
			RESULT = exs;
			CUP$Parser$result = parser.getSymbolFactory().newSymbol("expressions", 3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
		}
			return CUP$Parser$result;

			/*. . . . . . . . . . . . . . . . . . . .*/
		case 15: // one_or_more_expressions ::= expression 
		{
			List<Expression> RESULT = null;
			final Location exxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
			final Location exxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
			final Expression ex = (Expression)((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).value;
			RESULT = new ArrayList<Expression>();
			RESULT.add(ex);
			CUP$Parser$result = parser.getSymbolFactory().newSymbol("one_or_more_expressions", 4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
		}
			return CUP$Parser$result;

			/*. . . . . . . . . . . . . . . . . . . .*/
		case 16: // one_or_more_expressions ::= one_or_more_expressions COMMA expression 
		{
			List<Expression> RESULT = null;
			final Location exsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).xleft;
			final Location exsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).xright;
			final List<Expression> exs = (List<Expression>)((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).value;
			final Location exxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
			final Location exxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
			final Expression ex = (Expression)((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).value;
			exs.add(ex);
			RESULT = exs;
			CUP$Parser$result = parser.getSymbolFactory().newSymbol("one_or_more_expressions", 4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top - 2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
		}
			return CUP$Parser$result;

			/*. . . . . . . . . . . . . . . . . . . .*/
		case 17: // expression ::= BOOLEAN_LITERAL 
		{
			Expression RESULT = null;
			final Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
			final Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
			final Boolean e = (Boolean)((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).value;
			RESULT = new LiteralExpression(e);
			CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression", 5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
		}
			return CUP$Parser$result;

			/*. . . . . . . . . . . . . . . . . . . .*/
		case 18: // expression ::= INTEGER_LITERAL 
		{
			Expression RESULT = null;
			final Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
			final Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
			final Integer e = (Integer)((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).value;
			RESULT = new LiteralExpression(e);
			CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression", 5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
		}
			return CUP$Parser$result;

			/*. . . . . . . . . . . . . . . . . . . .*/
		case 19: // expression ::= STRING_LITERAL 
		{
			Expression RESULT = null;
			final Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
			final Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
			final String e = (String)((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).value;
			RESULT = new LiteralExpression(e);
			CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression", 5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
		}
			return CUP$Parser$result;

			/*. . . . . . . . . . . . . . . . . . . .*/
		case 20: // expression ::= LOCAL_VARIABLE 
		{
			Expression RESULT = null;
			final Location idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
			final Location idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
			final String id = (String)((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).value;
			RESULT = new LocalVariableExpression(id);
			CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression", 5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
		}
			return CUP$Parser$result;

			/*. . . . . . . . . . . . . . . . . . . .*/
		case 21: // expression ::= IDENTIFIER 
		{
			Expression RESULT = null;
			final Location idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
			final Location idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
			final String id = (String)((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).value;
			RESULT = new ConstantExpression(id);
			CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression", 5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
		}
			return CUP$Parser$result;

			/*. . . . . . . . . . . . . . . . . . . .*/
		case 22: // expression ::= OPENING_PARENTHESIS expression CLOSING_PARENTHESIS 
		{
			Expression RESULT = null;
			final Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).xleft;
			final Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).xright;
			final Expression e = (Expression)((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).value;
			RESULT = e;
			CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression", 5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top - 2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
		}
			return CUP$Parser$result;

			/*. . . . . . . . . . . . . . . . . . . .*/
		case 23: // expression ::= expression PLUS expression 
		{
			Expression RESULT = null;
			final Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).xleft;
			final Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).xright;
			final Expression e1 = (Expression)((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).value;
			final Location e2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
			final Location e2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
			final Expression e2 = (Expression)((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).value;
			RESULT = new BinaryExpression(e1, BinaryOperator.ADD, e2);
			CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression", 5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top - 2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
		}
			return CUP$Parser$result;

			/*. . . . . . . . . . . . . . . . . . . .*/
		case 24: // expression ::= expression MINUS expression 
		{
			Expression RESULT = null;
			final Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).xleft;
			final Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).xright;
			final Expression e1 = (Expression)((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).value;
			final Location e2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
			final Location e2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
			final Expression e2 = (Expression)((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).value;
			RESULT = new BinaryExpression(e1, BinaryOperator.SUBTRACT, e2);
			CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression", 5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top - 2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
		}
			return CUP$Parser$result;

			/*. . . . . . . . . . . . . . . . . . . .*/
		case 25: // expression ::= expression TIMES expression 
		{
			Expression RESULT = null;
			final Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).xleft;
			final Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).xright;
			final Expression e1 = (Expression)((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).value;
			final Location e2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
			final Location e2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
			final Expression e2 = (Expression)((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).value;
			RESULT = new BinaryExpression(e1, BinaryOperator.MULTIPLY, e2);
			CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression", 5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top - 2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
		}
			return CUP$Parser$result;

			/*. . . . . . . . . . . . . . . . . . . .*/
		case 26: // expression ::= expression DIVIDE expression 
		{
			Expression RESULT = null;
			final Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).xleft;
			final Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).xright;
			final Expression e1 = (Expression)((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).value;
			final Location e2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
			final Location e2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
			final Expression e2 = (Expression)((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).value;
			RESULT = new BinaryExpression(e1, BinaryOperator.DIVIDE, e2);
			CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression", 5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top - 2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
		}
			return CUP$Parser$result;

			/*. . . . . . . . . . . . . . . . . . . .*/
		case 27: // expression ::= expression MOD expression 
		{
			Expression RESULT = null;
			final Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).xleft;
			final Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).xright;
			final Expression e1 = (Expression)((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).value;
			final Location e2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
			final Location e2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
			final Expression e2 = (Expression)((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).value;
			RESULT = new BinaryExpression(e1, BinaryOperator.REMAINDER, e2);
			CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression", 5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top - 2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
		}
			return CUP$Parser$result;

			/*. . . . . . . . . . . . . . . . . . . .*/
		case 28: // expression ::= expression ASSIGN expression 
		{
			Expression RESULT = null;
			final Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).xleft;
			final Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).xright;
			final Expression e1 = (Expression)((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).value;
			final Location e2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
			final Location e2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
			final Expression e2 = (Expression)((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).value;
			RESULT = new BinaryExpression(e1, BinaryOperator.ASSIGN, e2);
			CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression", 5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top - 2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
		}
			return CUP$Parser$result;

			/*. . . . . . . . . . . . . . . . . . . .*/
		case 29: // expression ::= IDENTIFIER OPENING_PARENTHESIS expressions CLOSING_PARENTHESIS 
		{
			Expression RESULT = null;
			final Location idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top - 3)).xleft;
			final Location idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top - 3)).xright;
			final String id = (String)((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top - 3)).value;
			final Location exsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).xleft;
			final Location exsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).xright;
			final List<Expression> exs = (List<Expression>)((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).value;
			RESULT = ParserHelper.buildFunctionCallLikeExpression(idxleft, id, exs);
			CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression", 5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top - 3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
		}
			return CUP$Parser$result;

			/*. . . . . . . . . . . . . . . . . . . .*/
		case 30: // expression ::= ARRAY OPENING_PARENTHESIS array_literal_elements CLOSING_PARENTHESIS 
		{
			Expression RESULT = null;
			final Location elsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).xleft;
			final Location elsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).xright;
			final List<Pair<Expression, Expression>> els = (List<Pair<Expression, Expression>>)((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).value;
			RESULT = new ArrayConstructionExpression(els);
			CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression", 5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top - 3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
		}
			return CUP$Parser$result;

			/*. . . . . . . . . . . . . . . . . . . .*/
		case 31: // expression ::= error 
		{
			Expression RESULT = null;
			RESULT = new LiteralExpression(null);
			CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression", 5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
		}
			return CUP$Parser$result;

			/*. . . . . . . . . . . . . . . . . . . .*/
		case 32: // array_literal_elements ::= 
		{
			List<Pair<Expression, Expression>> RESULT = null;
			RESULT = new ArrayList<Pair<Expression, Expression>>();
			CUP$Parser$result = parser.getSymbolFactory().newSymbol("array_literal_elements", 6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
		}
			return CUP$Parser$result;

			/*. . . . . . . . . . . . . . . . . . . .*/
		case 33: // array_literal_elements ::= one_or_more_array_literal_elements 
		{
			List<Pair<Expression, Expression>> RESULT = null;
			final Location elsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
			final Location elsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
			final List<Pair<Expression, Expression>> els = (List<Pair<Expression, Expression>>)((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).value;
			RESULT = els;
			CUP$Parser$result = parser.getSymbolFactory().newSymbol("array_literal_elements", 6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
		}
			return CUP$Parser$result;

			/*. . . . . . . . . . . . . . . . . . . .*/
		case 34: // one_or_more_array_literal_elements ::= array_literal_element 
		{
			List<Pair<Expression, Expression>> RESULT = null;
			final Location elxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
			final Location elxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
			final Pair<Expression, Expression> el = (Pair<Expression, Expression>)((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).value;
			RESULT = new ArrayList<Pair<Expression, Expression>>();
			RESULT.add(el);
			CUP$Parser$result = parser.getSymbolFactory().newSymbol("one_or_more_array_literal_elements", 7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
		}
			return CUP$Parser$result;

			/*. . . . . . . . . . . . . . . . . . . .*/
		case 35: // one_or_more_array_literal_elements ::= one_or_more_array_literal_elements COMMA array_literal_element 
		{
			List<Pair<Expression, Expression>> RESULT = null;
			final Location elsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).xleft;
			final Location elsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).xright;
			final List<Pair<Expression, Expression>> els = (List<Pair<Expression, Expression>>)((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).value;
			final Location elxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
			final Location elxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
			final Pair<Expression, Expression> el = (Pair<Expression, Expression>)((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).value;
			els.add(el);
			RESULT = els;
			CUP$Parser$result = parser.getSymbolFactory().newSymbol("one_or_more_array_literal_elements", 7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top - 2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
		}
			return CUP$Parser$result;

			/*. . . . . . . . . . . . . . . . . . . .*/
		case 36: // array_literal_element ::= expression 
		{
			Pair<Expression, Expression> RESULT = null;
			final Location vxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
			final Location vxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
			final Expression v = (Expression)((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).value;
			RESULT = Pair.of(null, v);
			CUP$Parser$result = parser.getSymbolFactory().newSymbol("array_literal_element", 8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
		}
			return CUP$Parser$result;

			/*. . . . . . . . . . . . . . . . . . . .*/
		case 37: // array_literal_element ::= expression RIGHT_ARROW expression 
		{
			Pair<Expression, Expression> RESULT = null;
			final Location kxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).xleft;
			final Location kxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).xright;
			final Expression k = (Expression)((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).value;
			final Location vxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
			final Location vxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
			final Expression v = (Expression)((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).value;
			RESULT = Pair.of(k, v);
			CUP$Parser$result = parser.getSymbolFactory().newSymbol("array_literal_element", 8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top - 2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
		}
			return CUP$Parser$result;

			/*. . . . . . . . . . . . . . . . . . . .*/
		case 38: // parameter_declarations ::= 
		{
			List<String> RESULT = null;
			RESULT = new ArrayList<String>();
			CUP$Parser$result = parser.getSymbolFactory().newSymbol("parameter_declarations", 9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
		}
			return CUP$Parser$result;

			/*. . . . . . . . . . . . . . . . . . . .*/
		case 39: // parameter_declarations ::= one_or_more_parameter_declarations 
		{
			List<String> RESULT = null;
			final Location declsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
			final Location declsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
			final List<String> decls = (List<String>)((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).value;
			RESULT = decls;
			CUP$Parser$result = parser.getSymbolFactory().newSymbol("parameter_declarations", 9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
		}
			return CUP$Parser$result;

			/*. . . . . . . . . . . . . . . . . . . .*/
		case 40: // one_or_more_parameter_declarations ::= parameter_declaration 
		{
			List<String> RESULT = null;
			final Location declxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
			final Location declxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
			final String decl = (String)((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).value;
			RESULT = new ArrayList<String>();
			RESULT.add(decl);
			CUP$Parser$result = parser.getSymbolFactory().newSymbol("one_or_more_parameter_declarations", 10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
		}
			return CUP$Parser$result;

			/*. . . . . . . . . . . . . . . . . . . .*/
		case 41: // one_or_more_parameter_declarations ::= one_or_more_parameter_declarations COMMA parameter_declaration 
		{
			List<String> RESULT = null;
			final Location declsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).xleft;
			final Location declsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).xright;
			final List<String> decls = (List<String>)((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).value;
			final Location declxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
			final Location declxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
			final String decl = (String)((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).value;
			decls.add(decl);
			RESULT = decls;
			CUP$Parser$result = parser.getSymbolFactory().newSymbol("one_or_more_parameter_declarations", 10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top - 2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
		}
			return CUP$Parser$result;

			/*. . . . . . . . . . . . . . . . . . . .*/
		case 42: // parameter_declaration ::= LOCAL_VARIABLE 
		{
			String RESULT = null;
			final Location vxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
			final Location vxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
			final String v = (String)((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).value;
			RESULT = v;
			CUP$Parser$result = parser.getSymbolFactory().newSymbol("parameter_declaration", 11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
		}
			return CUP$Parser$result;

			/*. . . . . . . . . . . . . . . . . . . .*/
		case 43: // oop_type_definition ::= CLASS IDENTIFIER oop_class_extends_clause oop_class_implements_clause OPENING_CURLY_BRACE oop_member_definitions CLOSING_CURLY_BRACE 
		{
			final OopTypeDefinition RESULT = null;
			final Location idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top - 5)).xleft;
			final Location idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top - 5)).xright;
			final String id = (String)((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top - 5)).value;
			final Location membersxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).xleft;
			final Location membersxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).xright;
			final List<OopMemberDefinition> members = (List<OopMemberDefinition>)((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).value;

			CUP$Parser$result = parser.getSymbolFactory().newSymbol("oop_type_definition", 12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top - 6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
		}
			return CUP$Parser$result;

			/*. . . . . . . . . . . . . . . . . . . .*/
		case 44: // oop_type_definition ::= INTERFACE IDENTIFIER oop_interface_extends_clause OPENING_CURLY_BRACE oop_member_definitions CLOSING_CURLY_BRACE 
		{
			final OopTypeDefinition RESULT = null;
			final Location idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top - 4)).xleft;
			final Location idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top - 4)).xright;
			final String id = (String)((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top - 4)).value;
			final Location membersxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).xleft;
			final Location membersxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).xright;
			final List<OopMemberDefinition> members = (List<OopMemberDefinition>)((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).value;

			CUP$Parser$result = parser.getSymbolFactory().newSymbol("oop_type_definition", 12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top - 5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
		}
			return CUP$Parser$result;

			/*. . . . . . . . . . . . . . . . . . . .*/
		case 45: // oop_class_extends_clause ::= 
		{
			final String RESULT = null;

			CUP$Parser$result = parser.getSymbolFactory().newSymbol("oop_class_extends_clause", 13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
		}
			return CUP$Parser$result;

			/*. . . . . . . . . . . . . . . . . . . .*/
		case 46: // oop_class_extends_clause ::= EXTENDS IDENTIFIER 
		{
			final String RESULT = null;
			final Location idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
			final Location idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
			final String id = (String)((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).value;

			CUP$Parser$result = parser.getSymbolFactory().newSymbol("oop_class_extends_clause", 13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top - 1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
		}
			return CUP$Parser$result;

			/*. . . . . . . . . . . . . . . . . . . .*/
		case 47: // oop_class_implements_clause ::= 
		{
			final List<String> RESULT = null;

			CUP$Parser$result = parser.getSymbolFactory().newSymbol("oop_class_implements_clause", 14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
		}
			return CUP$Parser$result;

			/*. . . . . . . . . . . . . . . . . . . .*/
		case 48: // oop_class_implements_clause ::= IMPLEMENTS interface_references 
		{
			final List<String> RESULT = null;
			final Location itfsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
			final Location itfsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
			final List<String> itfs = (List<String>)((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).value;

			CUP$Parser$result = parser.getSymbolFactory().newSymbol("oop_class_implements_clause", 14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top - 1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
		}
			return CUP$Parser$result;

			/*. . . . . . . . . . . . . . . . . . . .*/
		case 49: // oop_interface_extends_clause ::= 
		{
			final List<String> RESULT = null;

			CUP$Parser$result = parser.getSymbolFactory().newSymbol("oop_interface_extends_clause", 15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
		}
			return CUP$Parser$result;

			/*. . . . . . . . . . . . . . . . . . . .*/
		case 50: // oop_interface_extends_clause ::= EXTENDS interface_references 
		{
			final List<String> RESULT = null;
			final Location itfsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
			final Location itfsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
			final List<String> itfs = (List<String>)((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).value;

			CUP$Parser$result = parser.getSymbolFactory().newSymbol("oop_interface_extends_clause", 15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top - 1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
		}
			return CUP$Parser$result;

			/*. . . . . . . . . . . . . . . . . . . .*/
		case 51: // interface_references ::= 
		{
			List<String> RESULT = null;
			RESULT = new ArrayList<String>();
			CUP$Parser$result = parser.getSymbolFactory().newSymbol("interface_references", 16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
		}
			return CUP$Parser$result;

			/*. . . . . . . . . . . . . . . . . . . .*/
		case 52: // interface_references ::= one_or_more_interface_references 
		{
			List<String> RESULT = null;
			final Location itfsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
			final Location itfsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
			final List<String> itfs = (List<String>)((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).value;
			RESULT = itfs;
			CUP$Parser$result = parser.getSymbolFactory().newSymbol("interface_references", 16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
		}
			return CUP$Parser$result;

			/*. . . . . . . . . . . . . . . . . . . .*/
		case 53: // one_or_more_interface_references ::= interface_reference 
		{
			List<String> RESULT = null;
			final Location itfxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
			final Location itfxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
			final String itf = (String)((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).value;
			RESULT = new ArrayList<String>();
			RESULT.add(itf);
			CUP$Parser$result = parser.getSymbolFactory().newSymbol("one_or_more_interface_references", 17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
		}
			return CUP$Parser$result;

			/*. . . . . . . . . . . . . . . . . . . .*/
		case 54: // one_or_more_interface_references ::= one_or_more_interface_references COMMA interface_reference 
		{
			List<String> RESULT = null;
			final Location itfsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).xleft;
			final Location itfsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).xright;
			final List<String> itfs = (List<String>)((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).value;
			final Location itfxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
			final Location itfxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
			final String itf = (String)((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).value;
			itfs.add(itf);
			RESULT = itfs;
			CUP$Parser$result = parser.getSymbolFactory().newSymbol("one_or_more_interface_references", 17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top - 2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
		}
			return CUP$Parser$result;

			/*. . . . . . . . . . . . . . . . . . . .*/
		case 55: // interface_reference ::= IDENTIFIER 
		{
			String RESULT = null;
			final Location idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
			final Location idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
			final String id = (String)((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).value;
			RESULT = id;
			CUP$Parser$result = parser.getSymbolFactory().newSymbol("interface_reference", 18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
		}
			return CUP$Parser$result;

			/*. . . . . . . . . . . . . . . . . . . .*/
		case 56: // oop_member_definitions ::= 
		{
			List<OopMemberDefinition> RESULT = null;
			RESULT = new ArrayList<OopMemberDefinition>();
			CUP$Parser$result = parser.getSymbolFactory().newSymbol("oop_member_definitions", 19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
		}
			return CUP$Parser$result;

			/*. . . . . . . . . . . . . . . . . . . .*/
		case 57: // oop_member_definitions ::= oop_member_definitions oop_member_definition 
		{
			List<OopMemberDefinition> RESULT = null;
			final Location mbrsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).xleft;
			final Location mbrsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).xright;
			final List<OopMemberDefinition> mbrs = (List<OopMemberDefinition>)((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).value;
			final Location mbrxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
			final Location mbrxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
			final OopMemberDefinition mbr = (OopMemberDefinition)((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).value;
			mbrs.add(mbr);
			RESULT = mbrs;
			CUP$Parser$result = parser.getSymbolFactory().newSymbol("oop_member_definitions", 19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top - 1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
		}
			return CUP$Parser$result;

			/*. . . . . . . . . . . . . . . . . . . .*/
		case 58: // oop_member_definition ::= CONST IDENTIFIER ASSIGN expression SEMICOLON 
		{
			final OopMemberDefinition RESULT = null;
			final Location idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top - 3)).xleft;
			final Location idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top - 3)).xright;
			final String id = (String)((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top - 3)).value;
			final Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).xleft;
			final Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).xright;
			final Expression e = (Expression)((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).value;

			CUP$Parser$result = parser.getSymbolFactory().newSymbol("oop_member_definition", 20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top - 4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
		}
			return CUP$Parser$result;

			/*. . . . . . . . . . . . . . . . . . . .*/
		case 59: // oop_member_definition ::= VAR LOCAL_VARIABLE SEMICOLON 
		{
			final OopMemberDefinition RESULT = null;
			final Location vxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).xleft;
			final Location vxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).xright;
			final String v = (String)((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).value;

			CUP$Parser$result = parser.getSymbolFactory().newSymbol("oop_member_definition", 20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top - 2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
		}
			return CUP$Parser$result;

			/*. . . . . . . . . . . . . . . . . . . .*/
		case 60: // oop_member_definition ::= oop_entity_modifiers LOCAL_VARIABLE SEMICOLON 
		{
			final OopMemberDefinition RESULT = null;
			final Location modsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).xleft;
			final Location modsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).xright;
			final List<OopEntityModifier> mods = (List<OopEntityModifier>)((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).value;
			final Location vxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).xleft;
			final Location vxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).xright;
			final String v = (String)((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).value;

			CUP$Parser$result = parser.getSymbolFactory().newSymbol("oop_member_definition", 20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top - 2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
		}
			return CUP$Parser$result;

			/*. . . . . . . . . . . . . . . . . . . .*/
		case 61: // oop_member_definition ::= oop_entity_modifiers FUNCTION IDENTIFIER OPENING_PARENTHESIS parameter_declarations CLOSING_PARENTHESIS OPENING_CURLY_BRACE statements CLOSING_CURLY_BRACE 
		{
			final OopMemberDefinition RESULT = null;
			final Location modsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top - 8)).xleft;
			final Location modsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top - 8)).xright;
			final List<OopEntityModifier> mods = (List<OopEntityModifier>)((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top - 8)).value;
			final Location idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top - 6)).xleft;
			final Location idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top - 6)).xright;
			final String id = (String)((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top - 6)).value;
			final Location declsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top - 4)).xleft;
			final Location declsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top - 4)).xright;
			final List<String> decls = (List<String>)((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top - 4)).value;
			final Location stsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).xleft;
			final Location stsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).xright;
			final List<Statement> sts = (List<Statement>)((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).value;

			CUP$Parser$result = parser.getSymbolFactory().newSymbol("oop_member_definition", 20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top - 8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
		}
			return CUP$Parser$result;

			/*. . . . . . . . . . . . . . . . . . . .*/
		case 62: // oop_entity_modifiers ::= 
		{
			List<OopEntityModifier> RESULT = null;
			RESULT = new ArrayList<OopEntityModifier>();
			CUP$Parser$result = parser.getSymbolFactory().newSymbol("oop_entity_modifiers", 21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
		}
			return CUP$Parser$result;

			/*. . . . . . . . . . . . . . . . . . . .*/
		case 63: // oop_entity_modifiers ::= oop_entity_modifiers oop_entity_modifier 
		{
			List<OopEntityModifier> RESULT = null;
			final Location modsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).xleft;
			final Location modsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).xright;
			final List<OopEntityModifier> mods = (List<OopEntityModifier>)((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).value;
			final Location modxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
			final Location modxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
			final OopEntityModifier mod = (OopEntityModifier)((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).value;
			mods.add(mod);
			RESULT = mods;
			CUP$Parser$result = parser.getSymbolFactory().newSymbol("oop_entity_modifiers", 21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top - 1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
		}
			return CUP$Parser$result;

			/*. . . . . . . . . . . . . . . . . . . .*/
		case 64: // oop_entity_modifier ::= PUBLIC 
		{
			final OopEntityModifier RESULT = null;

			CUP$Parser$result = parser.getSymbolFactory().newSymbol("oop_entity_modifier", 22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
		}
			return CUP$Parser$result;

			/*. . . . . . . . . . . . . . . . . . . .*/
		case 65: // oop_entity_modifier ::= PROTECTED 
		{
			final OopEntityModifier RESULT = null;

			CUP$Parser$result = parser.getSymbolFactory().newSymbol("oop_entity_modifier", 22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
		}
			return CUP$Parser$result;

			/*. . . . . . . . . . . . . . . . . . . .*/
		case 66: // oop_entity_modifier ::= PRIVATE 
		{
			final OopEntityModifier RESULT = null;

			CUP$Parser$result = parser.getSymbolFactory().newSymbol("oop_entity_modifier", 22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
		}
			return CUP$Parser$result;

			/*. . . . . . . . . . . . . . . . . . . .*/
		case 67: // oop_entity_modifier ::= STATIC 
		{
			final OopEntityModifier RESULT = null;

			CUP$Parser$result = parser.getSymbolFactory().newSymbol("oop_entity_modifier", 22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
		}
			return CUP$Parser$result;

			/*. . . . . . . . . . . . . . . . . . . .*/
		case 68: // oop_entity_modifier ::= ABSTRACT 
		{
			final OopEntityModifier RESULT = null;

			CUP$Parser$result = parser.getSymbolFactory().newSymbol("oop_entity_modifier", 22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
		}
			return CUP$Parser$result;

			/*. . . . . . . . . . . . . . . . . . . .*/
		case 69: // oop_entity_modifier ::= FINAL 
		{
			final OopEntityModifier RESULT = null;

			CUP$Parser$result = parser.getSymbolFactory().newSymbol("oop_entity_modifier", 22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
		}
			return CUP$Parser$result;

			/* . . . . . .*/
		default:
			throw new Exception("Invalid action number " + CUP$Parser$act_num + "found in internal parse table");

		}
	} /* end of method */

	/** Method splitting the generated action code into several parts. */
	public final java_cup.runtime.Symbol CUP$Parser$do_action(final int CUP$Parser$act_num, final java_cup.runtime.lr_parser CUP$Parser$parser, final java.util.Stack CUP$Parser$stack, final int CUP$Parser$top) throws java.lang.Exception {
		return CUP$Parser$do_action_part00000000(CUP$Parser$act_num, CUP$Parser$parser, CUP$Parser$stack, CUP$Parser$top);
	}
}
