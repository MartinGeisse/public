
//----------------------------------------------------
// The following code was generated by CUP v0.11b beta 20140220
// Fri Jun 20 07:58:02 CEST 2014
//----------------------------------------------------

package name.martingeisse.phunky.runtime.parser;

import java.util.ArrayList;
import java.util.List;

import java_cup.runtime.ComplexSymbolFactory.ComplexSymbol;
import java_cup.runtime.ComplexSymbolFactory.Location;
import java_cup.runtime.Symbol;
import name.martingeisse.phunky.runtime.code.declaration.FunctionDefinition;
import name.martingeisse.phunky.runtime.code.declaration.OopEntityModifier;
import name.martingeisse.phunky.runtime.code.declaration.OopMemberDefinition;
import name.martingeisse.phunky.runtime.code.declaration.OopTypeDefinition;
import name.martingeisse.phunky.runtime.code.expression.ConstantExpression;
import name.martingeisse.phunky.runtime.code.expression.Expression;
import name.martingeisse.phunky.runtime.code.expression.FunctionCall;
import name.martingeisse.phunky.runtime.code.expression.LiteralExpression;
import name.martingeisse.phunky.runtime.code.expression.LocalVariableExpression;
import name.martingeisse.phunky.runtime.code.expression.array.ArrayConstructionExpression;
import name.martingeisse.phunky.runtime.code.expression.oop.InstanceFieldAccess;
import name.martingeisse.phunky.runtime.code.expression.oop.InstanceMethodCall;
import name.martingeisse.phunky.runtime.code.expression.oop.InstanceofExpression;
import name.martingeisse.phunky.runtime.code.expression.oop.NewExpression;
import name.martingeisse.phunky.runtime.code.expression.operation.BinaryExpression;
import name.martingeisse.phunky.runtime.code.expression.operation.BinaryOperator;
import name.martingeisse.phunky.runtime.code.statement.DoWhileStatement;
import name.martingeisse.phunky.runtime.code.statement.ExpressionStatement;
import name.martingeisse.phunky.runtime.code.statement.GlobalStatement;
import name.martingeisse.phunky.runtime.code.statement.IfStatement;
import name.martingeisse.phunky.runtime.code.statement.NopStatement;
import name.martingeisse.phunky.runtime.code.statement.Statement;
import name.martingeisse.phunky.runtime.code.statement.StatementSequence;
import name.martingeisse.phunky.runtime.code.statement.WhileStatement;

import org.apache.commons.lang3.tuple.Pair;

/** CUP v0.11b beta 20140220 generated parser.
  * @version Fri Jun 20 07:58:02 CEST 2014
  */
@SuppressWarnings("all")
public class Parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\163\000\002\002\004\000\002\002\003\000\002\003" +
    "\002\000\002\003\004\000\002\004\003\000\002\004\004" +
    "\000\002\004\005\000\002\004\003\000\002\004\005\000" +
    "\002\004\005\000\002\004\004\000\002\004\007\000\002" +
    "\004\010\000\002\004\012\000\002\004\003\000\002\004" +
    "\004\000\002\005\006\000\002\005\010\000\002\005\010" +
    "\000\002\006\002\000\002\006\003\000\002\007\003\000" +
    "\002\007\005\000\002\010\003\000\002\010\003\000\002" +
    "\010\003\000\002\010\003\000\002\010\003\000\002\010" +
    "\005\000\002\010\005\000\002\010\005\000\002\010\005" +
    "\000\002\010\005\000\002\010\005\000\002\010\005\000" +
    "\002\010\005\000\002\010\005\000\002\010\005\000\002" +
    "\010\005\000\002\010\005\000\002\010\005\000\002\010" +
    "\005\000\002\010\005\000\002\010\005\000\002\010\005" +
    "\000\002\010\005\000\002\010\005\000\002\010\005\000" +
    "\002\010\005\000\002\010\005\000\002\010\005\000\002" +
    "\010\005\000\002\010\005\000\002\010\005\000\002\010" +
    "\005\000\002\010\005\000\002\010\005\000\002\010\005" +
    "\000\002\010\005\000\002\010\005\000\002\010\005\000" +
    "\002\010\005\000\002\010\005\000\002\010\005\000\002" +
    "\010\005\000\002\010\005\000\002\010\005\000\002\010" +
    "\005\000\002\010\005\000\002\010\005\000\002\010\006" +
    "\000\002\010\006\000\002\010\007\000\002\010\005\000" +
    "\002\010\005\000\002\010\010\000\002\010\003\000\002" +
    "\011\002\000\002\011\003\000\002\012\003\000\002\012" +
    "\005\000\002\013\003\000\002\013\005\000\002\014\002" +
    "\000\002\014\003\000\002\015\003\000\002\015\005\000" +
    "\002\016\003\000\002\017\011\000\002\017\010\000\002" +
    "\020\002\000\002\020\004\000\002\021\002\000\002\021" +
    "\004\000\002\022\002\000\002\022\004\000\002\023\002" +
    "\000\002\023\003\000\002\024\003\000\002\024\005\000" +
    "\002\025\003\000\002\026\002\000\002\026\004\000\002" +
    "\027\007\000\002\027\005\000\002\027\005\000\002\027" +
    "\013\000\002\030\002\000\002\030\004\000\002\031\003" +
    "\000\002\031\003\000\002\031\003\000\002\031\003\000" +
    "\002\031\003\000\002\031\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\343\000\054\002\uffff\003\uffff\004\uffff\005\uffff\007" +
    "\uffff\015\uffff\022\uffff\023\uffff\024\uffff\042\uffff\043\uffff" +
    "\045\uffff\055\uffff\056\uffff\130\uffff\133\uffff\136\uffff\137" +
    "\uffff\140\uffff\141\uffff\142\uffff\001\002\000\004\002\345" +
    "\001\002\000\054\002\000\003\027\004\023\005\014\007" +
    "\016\015\006\022\017\023\007\024\031\042\022\043\012" +
    "\045\021\055\030\056\011\130\034\133\032\136\013\137" +
    "\033\140\024\141\015\142\020\001\002\000\062\002\ufffd" +
    "\003\ufffd\004\ufffd\005\ufffd\007\ufffd\010\ufffd\015\ufffd\022" +
    "\ufffd\023\ufffd\024\ufffd\042\ufffd\043\ufffd\045\ufffd\046\ufffd" +
    "\047\ufffd\055\ufffd\056\ufffd\130\ufffd\133\ufffd\136\ufffd\137" +
    "\ufffd\140\ufffd\141\ufffd\142\ufffd\001\002\000\004\141\333" +
    "\001\002\000\056\002\ufffe\003\ufffe\004\ufffe\005\ufffe\007" +
    "\ufffe\010\ufffe\015\ufffe\022\ufffe\023\ufffe\024\ufffe\042\ufffe" +
    "\043\ufffe\045\ufffe\055\ufffe\056\ufffe\130\ufffe\133\ufffe\136" +
    "\ufffe\137\ufffe\140\ufffe\141\ufffe\142\ufffe\001\002\000\024" +
    "\003\040\005\014\130\034\133\032\136\013\137\033\140" +
    "\024\141\015\142\020\001\002\000\004\005\325\001\002" +
    "\000\140\006\uffea\013\uffea\014\uffea\015\uffea\021\uffea\057" +
    "\uffea\060\uffea\061\uffea\062\uffea\063\uffea\064\uffea\065\uffea" +
    "\066\uffea\067\uffea\070\uffea\071\uffea\072\uffea\073\uffea\074" +
    "\uffea\075\uffea\076\uffea\077\uffea\100\uffea\101\uffea\102\uffea" +
    "\103\uffea\104\uffea\105\uffea\106\uffea\107\uffea\110\uffea\111" +
    "\uffea\112\uffea\113\uffea\114\uffea\115\uffea\116\uffea\117\uffea" +
    "\120\uffea\121\uffea\122\uffea\123\uffea\124\uffea\125\uffea\126" +
    "\uffea\127\uffea\134\uffea\001\002\000\024\003\040\005\014" +
    "\130\034\133\032\136\013\137\033\140\024\141\015\142" +
    "\020\001\002\000\142\005\320\006\uffe6\013\uffe6\014\uffe6" +
    "\015\uffe6\021\uffe6\057\uffe6\060\uffe6\061\uffe6\062\uffe6\063" +
    "\uffe6\064\uffe6\065\uffe6\066\uffe6\067\uffe6\070\uffe6\071\uffe6" +
    "\072\uffe6\073\uffe6\074\uffe6\075\uffe6\076\uffe6\077\uffe6\100" +
    "\uffe6\101\uffe6\102\uffe6\103\uffe6\104\uffe6\105\uffe6\106\uffe6" +
    "\107\uffe6\110\uffe6\111\uffe6\112\uffe6\113\uffe6\114\uffe6\115" +
    "\uffe6\116\uffe6\117\uffe6\120\uffe6\121\uffe6\122\uffe6\123\uffe6" +
    "\124\uffe6\125\uffe6\126\uffe6\127\uffe6\134\uffe6\001\002\000" +
    "\054\003\uffff\004\uffff\005\uffff\007\uffff\010\uffff\015\uffff" +
    "\022\uffff\023\uffff\024\uffff\042\uffff\043\uffff\045\uffff\055" +
    "\uffff\056\uffff\130\uffff\133\uffff\136\uffff\137\uffff\140\uffff" +
    "\141\uffff\142\uffff\001\002\000\004\141\307\001\002\000" +
    "\140\006\uffe7\013\uffe7\014\uffe7\015\uffe7\021\uffe7\057\uffe7" +
    "\060\uffe7\061\uffe7\062\uffe7\063\uffe7\064\uffe7\065\uffe7\066" +
    "\uffe7\067\uffe7\070\uffe7\071\uffe7\072\uffe7\073\uffe7\074\uffe7" +
    "\075\uffe7\076\uffe7\077\uffe7\100\uffe7\101\uffe7\102\uffe7\103" +
    "\uffe7\104\uffe7\105\uffe7\106\uffe7\107\uffe7\110\uffe7\111\uffe7" +
    "\112\uffe7\113\uffe7\114\uffe7\115\uffe7\116\uffe7\117\uffe7\120" +
    "\uffe7\121\uffe7\122\uffe7\123\uffe7\124\uffe7\125\uffe7\126\uffe7" +
    "\127\uffe7\134\uffe7\001\002\000\004\005\277\001\002\000" +
    "\052\003\027\004\023\005\014\007\016\015\006\022\017" +
    "\023\007\024\031\042\022\043\012\045\021\055\030\056" +
    "\011\130\034\133\032\136\013\137\033\140\024\141\015" +
    "\142\020\001\002\000\062\002\ufffa\003\ufffa\004\ufffa\005" +
    "\ufffa\007\ufffa\010\ufffa\015\ufffa\022\ufffa\023\ufffa\024\ufffa" +
    "\042\ufffa\043\ufffa\045\ufffa\046\ufffa\047\ufffa\055\ufffa\056" +
    "\ufffa\130\ufffa\133\ufffa\136\ufffa\137\ufffa\140\ufffa\141\ufffa" +
    "\142\ufffa\001\002\000\140\006\uffe8\013\uffe8\014\uffe8\015" +
    "\uffe8\021\uffe8\057\uffe8\060\uffe8\061\uffe8\062\uffe8\063\uffe8" +
    "\064\uffe8\065\uffe8\066\uffe8\067\uffe8\070\uffe8\071\uffe8\072" +
    "\uffe8\073\uffe8\074\uffe8\075\uffe8\076\uffe8\077\uffe8\100\uffe8" +
    "\101\uffe8\102\uffe8\103\uffe8\104\uffe8\105\uffe8\106\uffe8\107" +
    "\uffe8\110\uffe8\111\uffe8\112\uffe8\113\uffe8\114\uffe8\115\uffe8" +
    "\116\uffe8\117\uffe8\120\uffe8\121\uffe8\122\uffe8\123\uffe8\124" +
    "\uffe8\125\uffe8\126\uffe8\127\uffe8\134\uffe8\001\002\000\062" +
    "\002\ufff3\003\ufff3\004\ufff3\005\ufff3\007\ufff3\010\ufff3\015" +
    "\ufff3\022\ufff3\023\ufff3\024\ufff3\042\ufff3\043\ufff3\045\ufff3" +
    "\046\ufff3\047\ufff3\055\ufff3\056\ufff3\130\ufff3\133\ufff3\136" +
    "\ufff3\137\ufff3\140\ufff3\141\ufff3\142\ufff3\001\002\000\132" +
    "\013\113\015\270\057\071\060\064\061\106\062\047\063" +
    "\101\064\054\065\052\066\111\067\067\070\050\071\045" +
    "\072\046\073\061\074\115\075\104\076\066\077\100\100" +
    "\102\101\116\102\075\103\056\104\051\105\107\106\057" +
    "\107\063\110\076\111\070\112\072\113\053\114\062\115" +
    "\055\116\117\117\110\120\112\121\103\122\073\123\060" +
    "\124\077\125\074\126\120\127\105\134\065\001\002\000" +
    "\132\013\uffb5\015\267\057\uffb5\060\uffb5\061\uffb5\062\uffb5" +
    "\063\uffb5\064\uffb5\065\uffb5\066\uffb5\067\uffb5\070\uffb5\071" +
    "\uffb5\072\uffb5\073\uffb5\074\uffb5\075\uffb5\076\uffb5\077\uffb5" +
    "\100\uffb5\101\uffb5\102\uffb5\103\uffb5\104\uffb5\105\uffb5\106" +
    "\uffb5\107\uffb5\110\uffb5\111\uffb5\112\uffb5\113\uffb5\114\uffb5" +
    "\115\uffb5\116\uffb5\117\uffb5\120\uffb5\121\uffb5\122\uffb5\123" +
    "\uffb5\124\uffb5\125\uffb5\126\uffb5\127\uffb5\134\uffb5\001\002" +
    "\000\004\142\265\001\002\000\004\141\211\001\002\000" +
    "\004\141\205\001\002\000\140\006\uffe9\013\uffe9\014\uffe9" +
    "\015\uffe9\021\uffe9\057\uffe9\060\uffe9\061\uffe9\062\uffe9\063" +
    "\uffe9\064\uffe9\065\uffe9\066\uffe9\067\uffe9\070\uffe9\071\uffe9" +
    "\072\uffe9\073\uffe9\074\uffe9\075\uffe9\076\uffe9\077\uffe9\100" +
    "\uffe9\101\uffe9\102\uffe9\103\uffe9\104\uffe9\105\uffe9\106\uffe9" +
    "\107\uffe9\110\uffe9\111\uffe9\112\uffe9\113\uffe9\114\uffe9\115" +
    "\uffe9\116\uffe9\117\uffe9\120\uffe9\121\uffe9\122\uffe9\123\uffe9" +
    "\124\uffe9\125\uffe9\126\uffe9\127\uffe9\134\uffe9\001\002\000" +
    "\004\005\035\001\002\000\026\003\040\005\014\006\uffb4" +
    "\130\034\133\032\136\013\137\033\140\024\141\015\142" +
    "\020\001\002\000\004\006\204\001\002\000\136\006\uffb0" +
    "\013\113\014\114\021\uffb0\057\071\060\064\061\106\062" +
    "\047\063\101\064\054\065\052\066\111\067\067\070\050" +
    "\071\045\072\046\073\061\074\115\075\104\076\066\077" +
    "\100\100\102\101\116\102\075\103\056\104\051\105\107" +
    "\106\057\107\063\110\076\111\070\112\072\113\053\114" +
    "\062\115\055\116\117\117\110\120\112\121\103\122\073" +
    "\123\060\124\077\125\074\126\120\127\105\134\065\001" +
    "\002\000\140\006\uffb5\013\uffb5\014\uffb5\015\uffb5\021\uffb5" +
    "\057\uffb5\060\uffb5\061\uffb5\062\uffb5\063\uffb5\064\uffb5\065" +
    "\uffb5\066\uffb5\067\uffb5\070\uffb5\071\uffb5\072\uffb5\073\uffb5" +
    "\074\uffb5\075\uffb5\076\uffb5\077\uffb5\100\uffb5\101\uffb5\102" +
    "\uffb5\103\uffb5\104\uffb5\105\uffb5\106\uffb5\107\uffb5\110\uffb5" +
    "\111\uffb5\112\uffb5\113\uffb5\114\uffb5\115\uffb5\116\uffb5\117" +
    "\uffb5\120\uffb5\121\uffb5\122\uffb5\123\uffb5\124\uffb5\125\uffb5" +
    "\126\uffb5\127\uffb5\134\uffb5\001\002\000\006\006\uffb3\021" +
    "\043\001\002\000\006\006\uffb2\021\uffb2\001\002\000\024" +
    "\003\040\005\014\130\034\133\032\136\013\137\033\140" +
    "\024\141\015\142\020\001\002\000\006\006\uffb1\021\uffb1" +
    "\001\002\000\024\003\040\005\014\130\034\133\032\136" +
    "\013\137\033\140\024\141\015\142\020\001\002\000\024" +
    "\003\040\005\014\130\034\133\032\136\013\137\033\140" +
    "\024\141\015\142\020\001\002\000\024\003\040\005\014" +
    "\130\034\133\032\136\013\137\033\140\024\141\015\142" +
    "\020\001\002\000\024\003\040\005\014\130\034\133\032" +
    "\136\013\137\033\140\024\141\015\142\020\001\002\000" +
    "\024\003\040\005\014\130\034\133\032\136\013\137\033" +
    "\140\024\141\015\142\020\001\002\000\024\003\040\005" +
    "\014\130\034\133\032\136\013\137\033\140\024\141\015" +
    "\142\020\001\002\000\024\003\040\005\014\130\034\133" +
    "\032\136\013\137\033\140\024\141\015\142\020\001\002" +
    "\000\024\003\040\005\014\130\034\133\032\136\013\137" +
    "\033\140\024\141\015\142\020\001\002\000\024\003\040" +
    "\005\014\130\034\133\032\136\013\137\033\140\024\141" +
    "\015\142\020\001\002\000\024\003\040\005\014\130\034" +
    "\133\032\136\013\137\033\140\024\141\015\142\020\001" +
    "\002\000\024\003\040\005\014\130\034\133\032\136\013" +
    "\137\033\140\024\141\015\142\020\001\002\000\024\003" +
    "\040\005\014\130\034\133\032\136\013\137\033\140\024" +
    "\141\015\142\020\001\002\000\024\003\040\005\014\130" +
    "\034\133\032\136\013\137\033\140\024\141\015\142\020" +
    "\001\002\000\024\003\040\005\014\130\034\133\032\136" +
    "\013\137\033\140\024\141\015\142\020\001\002\000\024" +
    "\003\040\005\014\130\034\133\032\136\013\137\033\140" +
    "\024\141\015\142\020\001\002\000\024\003\040\005\014" +
    "\130\034\133\032\136\013\137\033\140\024\141\015\142" +
    "\020\001\002\000\004\141\163\001\002\000\024\003\040" +
    "\005\014\130\034\133\032\136\013\137\033\140\024\141" +
    "\015\142\020\001\002\000\024\003\040\005\014\130\034" +
    "\133\032\136\013\137\033\140\024\141\015\142\020\001" +
    "\002\000\024\003\040\005\014\130\034\133\032\136\013" +
    "\137\033\140\024\141\015\142\020\001\002\000\024\003" +
    "\040\005\014\130\034\133\032\136\013\137\033\140\024" +
    "\141\015\142\020\001\002\000\024\003\040\005\014\130" +
    "\034\133\032\136\013\137\033\140\024\141\015\142\020" +
    "\001\002\000\024\003\040\005\014\130\034\133\032\136" +
    "\013\137\033\140\024\141\015\142\020\001\002\000\024" +
    "\003\040\005\014\130\034\133\032\136\013\137\033\140" +
    "\024\141\015\142\020\001\002\000\024\003\040\005\014" +
    "\130\034\133\032\136\013\137\033\140\024\141\015\142" +
    "\020\001\002\000\024\003\040\005\014\130\034\133\032" +
    "\136\013\137\033\140\024\141\015\142\020\001\002\000" +
    "\024\003\040\005\014\130\034\133\032\136\013\137\033" +
    "\140\024\141\015\142\020\001\002\000\024\003\040\005" +
    "\014\130\034\133\032\136\013\137\033\140\024\141\015" +
    "\142\020\001\002\000\024\003\040\005\014\130\034\133" +
    "\032\136\013\137\033\140\024\141\015\142\020\001\002" +
    "\000\024\003\040\005\014\130\034\133\032\136\013\137" +
    "\033\140\024\141\015\142\020\001\002\000\024\003\040" +
    "\005\014\130\034\133\032\136\013\137\033\140\024\141" +
    "\015\142\020\001\002\000\024\003\040\005\014\130\034" +
    "\133\032\136\013\137\033\140\024\141\015\142\020\001" +
    "\002\000\024\003\040\005\014\130\034\133\032\136\013" +
    "\137\033\140\024\141\015\142\020\001\002\000\024\003" +
    "\040\005\014\130\034\133\032\136\013\137\033\140\024" +
    "\141\015\142\020\001\002\000\024\003\040\005\014\130" +
    "\034\133\032\136\013\137\033\140\024\141\015\142\020" +
    "\001\002\000\024\003\040\005\014\130\034\133\032\136" +
    "\013\137\033\140\024\141\015\142\020\001\002\000\024" +
    "\003\040\005\014\130\034\133\032\136\013\137\033\140" +
    "\024\141\015\142\020\001\002\000\024\003\040\005\014" +
    "\130\034\133\032\136\013\137\033\140\024\141\015\142" +
    "\020\001\002\000\004\141\126\001\002\000\024\003\040" +
    "\005\014\130\034\133\032\136\013\137\033\140\024\141" +
    "\015\142\020\001\002\000\024\003\040\005\014\130\034" +
    "\133\032\136\013\137\033\140\024\141\015\142\020\001" +
    "\002\000\024\003\040\005\014\130\034\133\032\136\013" +
    "\137\033\140\024\141\015\142\020\001\002\000\024\003" +
    "\040\005\014\130\034\133\032\136\013\137\033\140\024" +
    "\141\015\142\020\001\002\000\024\003\040\005\014\130" +
    "\034\133\032\136\013\137\033\140\024\141\015\142\020" +
    "\001\002\000\140\006\uffbd\013\uffbd\014\uffbd\015\uffbd\021" +
    "\uffbd\057\071\060\064\061\106\062\047\063\101\064\054" +
    "\065\052\066\111\067\067\070\050\071\045\072\046\073" +
    "\061\074\115\075\uffbd\076\uffbd\077\uffbd\100\102\101\116" +
    "\102\075\103\056\104\051\105\107\106\057\107\063\110" +
    "\076\111\070\112\072\113\053\114\062\115\055\116\117" +
    "\117\110\120\112\121\103\122\073\123\060\124\077\125" +
    "\074\126\120\127\105\134\065\001\002\000\140\006\uffc5" +
    "\013\uffc5\014\uffc5\015\uffc5\021\uffc5\057\071\060\064\061" +
    "\106\062\047\063\101\064\054\065\052\066\111\067\067" +
    "\070\050\071\045\072\046\073\061\074\115\075\uffc5\076" +
    "\uffc5\077\uffc5\100\102\101\116\102\075\103\056\104\051" +
    "\105\107\106\057\107\063\110\076\111\070\112\072\113" +
    "\053\114\062\115\055\116\117\117\110\120\112\121\103" +
    "\122\073\123\060\124\077\125\074\126\120\127\105\134" +
    "\065\001\002\000\140\006\uffd2\013\uffd2\014\uffd2\015\uffd2" +
    "\021\uffd2\057\071\060\064\061\106\062\047\063\101\064" +
    "\054\065\052\066\111\067\uffd2\070\uffd2\071\045\072\uffd2" +
    "\073\uffd2\074\uffd2\075\uffd2\076\uffd2\077\uffd2\100\uffd2\101" +
    "\uffd2\102\uffd2\103\uffd2\104\uffd2\105\uffd2\106\uffd2\107\uffd2" +
    "\110\uffd2\111\uffd2\112\uffd2\113\053\114\062\115\uffd2\116" +
    "\uffd2\117\uffd2\120\uffd2\121\uffd2\122\uffd2\123\uffd2\124\uffd2" +
    "\125\uffd2\126\uffd2\127\uffd2\134\065\001\002\000\140\006" +
    "\uffd4\013\uffd4\014\uffd4\015\uffd4\021\uffd4\057\071\060\064" +
    "\061\106\062\047\063\101\064\054\065\052\066\111\067" +
    "\uffd4\070\uffd4\071\045\072\046\073\uffd4\074\uffd4\075\uffd4" +
    "\076\uffd4\077\uffd4\100\102\101\116\102\075\103\056\104" +
    "\051\105\107\106\057\107\063\110\076\111\070\112\uffd4" +
    "\113\053\114\062\115\uffd4\116\uffd4\117\uffd4\120\uffd4\121" +
    "\uffd4\122\uffd4\123\uffd4\124\uffd4\125\uffd4\126\uffd4\127\uffd4" +
    "\134\065\001\002\000\134\006\uffaf\013\113\021\uffaf\057" +
    "\071\060\064\061\106\062\047\063\101\064\054\065\052" +
    "\066\111\067\067\070\050\071\045\072\046\073\061\074" +
    "\115\075\104\076\066\077\100\100\102\101\116\102\075" +
    "\103\056\104\051\105\107\106\057\107\063\110\076\111" +
    "\070\112\072\113\053\114\062\115\055\116\117\117\110" +
    "\120\112\121\103\122\073\123\060\124\077\125\074\126" +
    "\120\127\105\134\065\001\002\000\142\005\127\006\uffb7" +
    "\013\uffb7\014\uffb7\015\uffb7\021\uffb7\057\uffb7\060\uffb7\061" +
    "\uffb7\062\uffb7\063\uffb7\064\uffb7\065\uffb7\066\uffb7\067\uffb7" +
    "\070\uffb7\071\uffb7\072\uffb7\073\uffb7\074\uffb7\075\uffb7\076" +
    "\uffb7\077\uffb7\100\uffb7\101\uffb7\102\uffb7\103\uffb7\104\uffb7" +
    "\105\uffb7\106\uffb7\107\uffb7\110\uffb7\111\uffb7\112\uffb7\113" +
    "\uffb7\114\uffb7\115\uffb7\116\uffb7\117\uffb7\120\uffb7\121\uffb7" +
    "\122\uffb7\123\uffb7\124\uffb7\125\uffb7\126\uffb7\127\uffb7\134" +
    "\uffb7\001\002\000\026\003\040\005\014\006\uffee\130\034" +
    "\133\032\136\013\137\033\140\024\141\015\142\020\001" +
    "\002\000\006\006\uffed\021\134\001\002\000\004\006\133" +
    "\001\002\000\136\006\uffec\013\113\015\uffec\021\uffec\057" +
    "\071\060\064\061\106\062\047\063\101\064\054\065\052" +
    "\066\111\067\067\070\050\071\045\072\046\073\061\074" +
    "\115\075\104\076\066\077\100\100\102\101\116\102\075" +
    "\103\056\104\051\105\107\106\057\107\063\110\076\111" +
    "\070\112\072\113\053\114\062\115\055\116\117\117\110" +
    "\120\112\121\103\122\073\123\060\124\077\125\074\126" +
    "\120\127\105\134\065\001\002\000\140\006\uffb6\013\uffb6" +
    "\014\uffb6\015\uffb6\021\uffb6\057\uffb6\060\uffb6\061\uffb6\062" +
    "\uffb6\063\uffb6\064\uffb6\065\uffb6\066\uffb6\067\uffb6\070\uffb6" +
    "\071\uffb6\072\uffb6\073\uffb6\074\uffb6\075\uffb6\076\uffb6\077" +
    "\uffb6\100\uffb6\101\uffb6\102\uffb6\103\uffb6\104\uffb6\105\uffb6" +
    "\106\uffb6\107\uffb6\110\uffb6\111\uffb6\112\uffb6\113\uffb6\114" +
    "\uffb6\115\uffb6\116\uffb6\117\uffb6\120\uffb6\121\uffb6\122\uffb6" +
    "\123\uffb6\124\uffb6\125\uffb6\126\uffb6\127\uffb6\134\uffb6\001" +
    "\002\000\024\003\040\005\014\130\034\133\032\136\013" +
    "\137\033\140\024\141\015\142\020\001\002\000\136\006" +
    "\uffeb\013\113\015\uffeb\021\uffeb\057\071\060\064\061\106" +
    "\062\047\063\101\064\054\065\052\066\111\067\067\070" +
    "\050\071\045\072\046\073\061\074\115\075\104\076\066" +
    "\077\100\100\102\101\116\102\075\103\056\104\051\105" +
    "\107\106\057\107\063\110\076\111\070\112\072\113\053" +
    "\114\062\115\055\116\117\117\110\120\112\121\103\122" +
    "\073\123\060\124\077\125\074\126\120\127\105\134\065" +
    "\001\002\000\140\006\uffc3\013\uffc3\014\uffc3\015\uffc3\021" +
    "\uffc3\057\071\060\064\061\106\062\047\063\101\064\054" +
    "\065\052\066\111\067\067\070\050\071\045\072\046\073" +
    "\061\074\115\075\uffc3\076\uffc3\077\uffc3\100\102\101\116" +
    "\102\075\103\056\104\051\105\107\106\057\107\063\110" +
    "\076\111\070\112\072\113\053\114\062\115\055\116\117" +
    "\117\110\120\112\121\103\122\073\123\060\124\077\125" +
    "\074\126\120\127\105\134\065\001\002\000\140\006\uffdd" +
    "\013\uffdd\014\uffdd\015\uffdd\021\uffdd\057\uffdd\060\uffdd\061" +
    "\uffdd\062\uffdd\063\uffdd\064\uffdd\065\052\066\111\067\uffdd" +
    "\070\uffdd\071\045\072\uffdd\073\uffdd\074\uffdd\075\uffdd\076" +
    "\uffdd\077\uffdd\100\uffdd\101\uffdd\102\uffdd\103\uffdd\104\uffdd" +
    "\105\uffdd\106\uffdd\107\uffdd\110\uffdd\111\uffdd\112\uffdd\113" +
    "\053\114\062\115\uffdd\116\uffdd\117\uffdd\120\uffdd\121\uffdd" +
    "\122\uffdd\123\uffdd\124\uffdd\125\uffdd\126\uffdd\127\uffdd\134" +
    "\065\001\002\000\140\006\uffc4\013\uffc4\014\uffc4\015\uffc4" +
    "\021\uffc4\057\071\060\064\061\106\062\047\063\101\064" +
    "\054\065\052\066\111\067\067\070\050\071\045\072\046" +
    "\073\061\074\115\075\uffc4\076\uffc4\077\uffc4\100\102\101" +
    "\116\102\075\103\056\104\051\105\107\106\057\107\063" +
    "\110\076\111\070\112\072\113\053\114\062\115\055\116" +
    "\117\117\110\120\112\121\103\122\073\123\060\124\077" +
    "\125\074\126\120\127\105\134\065\001\002\000\120\006" +
    "\uffce\013\uffce\014\uffce\015\uffce\021\uffce\057\071\060\064" +
    "\061\106\062\047\063\101\064\054\065\052\066\111\067" +
    "\uffce\070\uffce\071\045\072\uffce\073\uffce\074\uffce\075\uffce" +
    "\076\uffce\077\uffce\100\102\101\116\112\uffce\113\053\114" +
    "\062\115\uffce\116\uffce\117\uffce\120\uffce\121\uffce\122\uffce" +
    "\123\uffce\124\uffce\125\uffce\126\uffce\127\uffce\134\065\001" +
    "\002\000\140\006\uffe2\013\uffe2\014\uffe2\015\uffe2\021\uffe2" +
    "\057\uffe2\060\uffe2\061\uffe2\062\uffe2\063\uffe2\064\uffe2\065" +
    "\052\066\111\067\uffe2\070\uffe2\071\045\072\uffe2\073\uffe2" +
    "\074\uffe2\075\uffe2\076\uffe2\077\uffe2\100\uffe2\101\uffe2\102" +
    "\uffe2\103\uffe2\104\uffe2\105\uffe2\106\uffe2\107\uffe2\110\uffe2" +
    "\111\uffe2\112\uffe2\113\053\114\062\115\uffe2\116\uffe2\117" +
    "\uffe2\120\uffe2\121\uffe2\122\uffe2\123\uffe2\124\uffe2\125\uffe2" +
    "\126\uffe2\127\uffe2\134\065\001\002\000\140\006\uffbc\013" +
    "\uffbc\014\uffbc\015\uffbc\021\uffbc\057\071\060\064\061\106" +
    "\062\047\063\101\064\054\065\052\066\111\067\067\070" +
    "\050\071\045\072\046\073\061\074\115\075\uffbc\076\uffbc" +
    "\077\uffbc\100\102\101\116\102\075\103\056\104\051\105" +
    "\107\106\057\107\063\110\076\111\070\112\072\113\053" +
    "\114\062\115\055\116\117\117\110\120\112\121\103\122" +
    "\073\123\060\124\077\125\074\126\120\127\105\134\065" +
    "\001\002\000\140\006\uffda\013\uffda\014\uffda\015\uffda\021" +
    "\uffda\057\071\060\064\061\106\062\047\063\101\064\054" +
    "\065\052\066\111\067\067\070\050\071\045\072\046\073" +
    "\061\074\115\075\uffda\076\uffda\077\uffda\100\102\101\116" +
    "\102\075\103\056\104\051\105\107\106\057\107\063\110" +
    "\076\111\070\112\072\113\053\114\062\115\055\116\117" +
    "\117\110\120\112\121\103\122\073\123\060\124\077\125" +
    "\074\126\120\127\105\134\065\001\002\000\140\006\uffc2" +
    "\013\uffc2\014\uffc2\015\uffc2\021\uffc2\057\071\060\064\061" +
    "\106\062\047\063\101\064\054\065\052\066\111\067\067" +
    "\070\050\071\045\072\046\073\061\074\115\075\uffc2\076" +
    "\uffc2\077\uffc2\100\102\101\116\102\075\103\056\104\051" +
    "\105\107\106\057\107\063\110\076\111\070\112\072\113" +
    "\053\114\062\115\055\116\117\117\110\120\112\121\103" +
    "\122\073\123\060\124\077\125\074\126\120\127\105\134" +
    "\065\001\002\000\140\006\uffd3\013\uffd3\014\uffd3\015\uffd3" +
    "\021\uffd3\057\071\060\064\061\106\062\047\063\101\064" +
    "\054\065\052\066\111\067\uffd3\070\uffd3\071\045\072\uffd3" +
    "\073\uffd3\074\uffd3\075\uffd3\076\uffd3\077\uffd3\100\uffd3\101" +
    "\uffd3\102\uffd3\103\uffd3\104\uffd3\105\uffd3\106\uffd3\107\uffd3" +
    "\110\uffd3\111\uffd3\112\uffd3\113\053\114\062\115\uffd3\116" +
    "\uffd3\117\uffd3\120\uffd3\121\uffd3\122\uffd3\123\uffd3\124\uffd3" +
    "\125\uffd3\126\uffd3\127\uffd3\134\065\001\002\000\140\006" +
    "\uffe0\013\uffe0\014\uffe0\015\uffe0\021\uffe0\057\uffe0\060\uffe0" +
    "\061\uffe0\062\uffe0\063\uffe0\064\uffe0\065\052\066\111\067" +
    "\uffe0\070\uffe0\071\045\072\uffe0\073\uffe0\074\uffe0\075\uffe0" +
    "\076\uffe0\077\uffe0\100\uffe0\101\uffe0\102\uffe0\103\uffe0\104" +
    "\uffe0\105\uffe0\106\uffe0\107\uffe0\110\uffe0\111\uffe0\112\uffe0" +
    "\113\053\114\062\115\uffe0\116\uffe0\117\uffe0\120\uffe0\121" +
    "\uffe0\122\uffe0\123\uffe0\124\uffe0\125\uffe0\126\uffe0\127\uffe0" +
    "\134\065\001\002\000\140\006\uffd8\013\uffd8\014\uffd8\015" +
    "\uffd8\021\uffd8\057\071\060\064\061\106\062\047\063\101" +
    "\064\054\065\052\066\111\067\067\070\050\071\045\072" +
    "\046\073\061\074\115\075\104\076\uffd8\077\uffd8\100\102" +
    "\101\116\102\075\103\056\104\051\105\107\106\057\107" +
    "\063\110\076\111\070\112\072\113\053\114\062\115\055" +
    "\116\117\117\110\120\112\121\103\122\073\123\060\124" +
    "\077\125\074\126\120\127\105\134\065\001\002\000\140" +
    "\006\uffbf\013\uffbf\014\uffbf\015\uffbf\021\uffbf\057\071\060" +
    "\064\061\106\062\047\063\101\064\054\065\052\066\111" +
    "\067\067\070\050\071\045\072\046\073\061\074\115\075" +
    "\uffbf\076\uffbf\077\uffbf\100\102\101\116\102\075\103\056" +
    "\104\051\105\107\106\057\107\063\110\076\111\070\112" +
    "\072\113\053\114\062\115\055\116\117\117\110\120\112" +
    "\121\103\122\073\123\060\124\077\125\074\126\120\127" +
    "\105\134\065\001\002\000\120\006\uffcb\013\uffcb\014\uffcb" +
    "\015\uffcb\021\uffcb\057\071\060\064\061\106\062\047\063" +
    "\101\064\054\065\052\066\111\067\uffcb\070\uffcb\071\045" +
    "\072\uffcb\073\uffcb\074\uffcb\075\uffcb\076\uffcb\077\uffcb\100" +
    "\102\101\116\112\uffcb\113\053\114\062\115\uffcb\116\uffcb" +
    "\117\uffcb\120\uffcb\121\uffcb\122\uffcb\123\uffcb\124\uffcb\125" +
    "\uffcb\126\uffcb\127\uffcb\134\065\001\002\000\120\006\uffd1" +
    "\013\uffd1\014\uffd1\015\uffd1\021\uffd1\057\071\060\064\061" +
    "\106\062\047\063\101\064\054\065\052\066\111\067\uffd1" +
    "\070\uffd1\071\045\072\uffd1\073\uffd1\074\uffd1\075\uffd1\076" +
    "\uffd1\077\uffd1\100\102\101\116\112\uffd1\113\053\114\062" +
    "\115\uffd1\116\uffd1\117\uffd1\120\uffd1\121\uffd1\122\uffd1\123" +
    "\uffd1\124\uffd1\125\uffd1\126\uffd1\127\uffd1\134\065\001\002" +
    "\000\140\006\uffbe\013\uffbe\014\uffbe\015\uffbe\021\uffbe\057" +
    "\071\060\064\061\106\062\047\063\101\064\054\065\052" +
    "\066\111\067\067\070\050\071\045\072\046\073\061\074" +
    "\115\075\uffbe\076\uffbe\077\uffbe\100\102\101\116\102\075" +
    "\103\056\104\051\105\107\106\057\107\063\110\076\111" +
    "\070\112\072\113\053\114\062\115\055\116\117\117\110" +
    "\120\112\121\103\122\073\123\060\124\077\125\074\126" +
    "\120\127\105\134\065\001\002\000\140\006\uffc1\013\uffc1" +
    "\014\uffc1\015\uffc1\021\uffc1\057\071\060\064\061\106\062" +
    "\047\063\101\064\054\065\052\066\111\067\067\070\050" +
    "\071\045\072\046\073\061\074\115\075\uffc1\076\uffc1\077" +
    "\uffc1\100\102\101\116\102\075\103\056\104\051\105\107" +
    "\106\057\107\063\110\076\111\070\112\072\113\053\114" +
    "\062\115\055\116\117\117\110\120\112\121\103\122\073" +
    "\123\060\124\077\125\074\126\120\127\105\134\065\001" +
    "\002\000\140\006\uffc9\013\uffc9\014\uffc9\015\uffc9\021\uffc9" +
    "\057\071\060\064\061\106\062\047\063\101\064\054\065" +
    "\052\066\111\067\067\070\050\071\045\072\046\073\061" +
    "\074\115\075\uffc9\076\uffc9\077\uffc9\100\102\101\116\102" +
    "\075\103\056\104\051\105\107\106\057\107\063\110\076" +
    "\111\070\112\072\113\053\114\062\115\055\116\117\117" +
    "\110\120\112\121\103\122\073\123\060\124\077\125\074" +
    "\126\120\127\105\134\065\001\002\000\140\006\uffe4\013" +
    "\uffe4\014\uffe4\015\uffe4\021\uffe4\057\uffe4\060\uffe4\061\106" +
    "\062\047\063\101\064\uffe4\065\052\066\111\067\uffe4\070" +
    "\uffe4\071\045\072\uffe4\073\uffe4\074\uffe4\075\uffe4\076\uffe4" +
    "\077\uffe4\100\uffe4\101\uffe4\102\uffe4\103\uffe4\104\uffe4\105" +
    "\uffe4\106\uffe4\107\uffe4\110\uffe4\111\uffe4\112\uffe4\113\053" +
    "\114\062\115\uffe4\116\uffe4\117\uffe4\120\uffe4\121\uffe4\122" +
    "\uffe4\123\uffe4\124\uffe4\125\uffe4\126\uffe4\127\uffe4\134\065" +
    "\001\002\000\120\006\uffca\013\uffca\014\uffca\015\uffca\021" +
    "\uffca\057\071\060\064\061\106\062\047\063\101\064\054" +
    "\065\052\066\111\067\uffca\070\uffca\071\045\072\uffca\073" +
    "\uffca\074\uffca\075\uffca\076\uffca\077\uffca\100\102\101\116" +
    "\112\uffca\113\053\114\062\115\uffca\116\uffca\117\uffca\120" +
    "\uffca\121\uffca\122\uffca\123\uffca\124\uffca\125\uffca\126\uffca" +
    "\127\uffca\134\065\001\002\000\140\006\uffdc\013\uffdc\014" +
    "\uffdc\015\uffdc\021\uffdc\057\071\060\064\061\106\062\047" +
    "\063\101\064\054\065\052\066\111\067\uffdc\070\uffdc\071" +
    "\045\072\046\073\061\074\115\075\uffdc\076\uffdc\077\uffdc" +
    "\100\102\101\116\102\075\103\056\104\051\105\107\106" +
    "\057\107\063\110\076\111\070\112\uffdc\113\053\114\062" +
    "\115\uffdc\116\uffdc\117\uffdc\120\uffdc\121\uffdc\122\uffdc\123" +
    "\uffdc\124\uffdc\125\uffdc\126\uffdc\127\uffdc\134\065\001\002" +
    "\000\140\006\uffd9\013\uffd9\014\uffd9\015\uffd9\021\uffd9\057" +
    "\071\060\064\061\106\062\047\063\101\064\054\065\052" +
    "\066\111\067\067\070\050\071\045\072\046\073\061\074" +
    "\115\075\104\076\uffd9\077\100\100\102\101\116\102\075" +
    "\103\056\104\051\105\107\106\057\107\063\110\076\111" +
    "\070\112\072\113\053\114\062\115\055\116\117\117\110" +
    "\120\112\121\103\122\073\123\060\124\077\125\074\126" +
    "\120\127\105\134\065\001\002\000\140\006\uffb8\013\uffb8" +
    "\014\uffb8\015\uffb8\021\uffb8\057\uffb8\060\uffb8\061\uffb8\062" +
    "\uffb8\063\uffb8\064\uffb8\065\uffb8\066\uffb8\067\uffb8\070\uffb8" +
    "\071\uffb8\072\uffb8\073\uffb8\074\uffb8\075\uffb8\076\uffb8\077" +
    "\uffb8\100\uffb8\101\uffb8\102\uffb8\103\uffb8\104\uffb8\105\uffb8" +
    "\106\uffb8\107\uffb8\110\uffb8\111\uffb8\112\uffb8\113\uffb8\114" +
    "\uffb8\115\uffb8\116\uffb8\117\uffb8\120\uffb8\121\uffb8\122\uffb8" +
    "\123\uffb8\124\uffb8\125\uffb8\126\uffb8\127\uffb8\134\uffb8\001" +
    "\002\000\140\006\uffe3\013\uffe3\014\uffe3\015\uffe3\021\uffe3" +
    "\057\uffe3\060\uffe3\061\106\062\047\063\101\064\uffe3\065" +
    "\052\066\111\067\uffe3\070\uffe3\071\045\072\uffe3\073\uffe3" +
    "\074\uffe3\075\uffe3\076\uffe3\077\uffe3\100\uffe3\101\uffe3\102" +
    "\uffe3\103\uffe3\104\uffe3\105\uffe3\106\uffe3\107\uffe3\110\uffe3" +
    "\111\uffe3\112\uffe3\113\053\114\062\115\uffe3\116\uffe3\117" +
    "\uffe3\120\uffe3\121\uffe3\122\uffe3\123\uffe3\124\uffe3\125\uffe3" +
    "\126\uffe3\127\uffe3\134\065\001\002\000\120\006\uffcc\013" +
    "\uffcc\014\uffcc\015\uffcc\021\uffcc\057\071\060\064\061\106" +
    "\062\047\063\101\064\054\065\052\066\111\067\uffcc\070" +
    "\uffcc\071\045\072\uffcc\073\uffcc\074\uffcc\075\uffcc\076\uffcc" +
    "\077\uffcc\100\102\101\116\112\uffcc\113\053\114\062\115" +
    "\uffcc\116\uffcc\117\uffcc\120\uffcc\121\uffcc\122\uffcc\123\uffcc" +
    "\124\uffcc\125\uffcc\126\uffcc\127\uffcc\134\065\001\002\000" +
    "\140\006\uffc7\013\uffc7\014\uffc7\015\uffc7\021\uffc7\057\uffc7" +
    "\060\uffc7\061\uffc7\062\uffc7\063\uffc7\064\uffc7\065\052\066" +
    "\uffc7\067\uffc7\070\uffc7\071\045\072\uffc7\073\uffc7\074\uffc7" +
    "\075\uffc7\076\uffc7\077\uffc7\100\uffc7\101\uffc7\102\uffc7\103" +
    "\uffc7\104\uffc7\105\uffc7\106\uffc7\107\uffc7\110\uffc7\111\uffc7" +
    "\112\uffc7\113\053\114\062\115\uffc7\116\uffc7\117\uffc7\120" +
    "\uffc7\121\uffc7\122\uffc7\123\uffc7\124\uffc7\125\uffc7\126\uffc7" +
    "\127\uffc7\134\uffc7\001\002\000\140\006\uffd5\013\uffd5\014" +
    "\uffd5\015\uffd5\021\uffd5\057\071\060\064\061\106\062\047" +
    "\063\101\064\054\065\052\066\111\067\uffd5\070\uffd5\071" +
    "\045\072\046\073\uffd5\074\115\075\uffd5\076\uffd5\077\uffd5" +
    "\100\102\101\116\102\075\103\056\104\051\105\107\106" +
    "\057\107\063\110\076\111\070\112\uffd5\113\053\114\062" +
    "\115\uffd5\116\uffd5\117\uffd5\120\uffd5\121\uffd5\122\uffd5\123" +
    "\uffd5\124\uffd5\125\uffd5\126\uffd5\127\uffd5\134\065\001\002" +
    "\000\140\006\uffc0\013\uffc0\014\uffc0\015\uffc0\021\uffc0\057" +
    "\071\060\064\061\106\062\047\063\101\064\054\065\052" +
    "\066\111\067\067\070\050\071\045\072\046\073\061\074" +
    "\115\075\uffc0\076\uffc0\077\uffc0\100\102\101\116\102\075" +
    "\103\056\104\051\105\107\106\057\107\063\110\076\111" +
    "\070\112\072\113\053\114\062\115\055\116\117\117\110" +
    "\120\112\121\103\122\073\123\060\124\077\125\074\126" +
    "\120\127\105\134\065\001\002\000\120\006\uffcd\013\uffcd" +
    "\014\uffcd\015\uffcd\021\uffcd\057\071\060\064\061\106\062" +
    "\047\063\101\064\054\065\052\066\111\067\uffcd\070\uffcd" +
    "\071\045\072\uffcd\073\uffcd\074\uffcd\075\uffcd\076\uffcd\077" +
    "\uffcd\100\102\101\116\112\uffcd\113\053\114\062\115\uffcd" +
    "\116\uffcd\117\uffcd\120\uffcd\121\uffcd\122\uffcd\123\uffcd\124" +
    "\uffcd\125\uffcd\126\uffcd\127\uffcd\134\065\001\002\000\120" +
    "\006\uffd0\013\uffd0\014\uffd0\015\uffd0\021\uffd0\057\071\060" +
    "\064\061\106\062\047\063\101\064\054\065\052\066\111" +
    "\067\uffd0\070\uffd0\071\045\072\uffd0\073\uffd0\074\uffd0\075" +
    "\uffd0\076\uffd0\077\uffd0\100\102\101\116\112\uffd0\113\053" +
    "\114\062\115\uffd0\116\uffd0\117\uffd0\120\uffd0\121\uffd0\122" +
    "\uffd0\123\uffd0\124\uffd0\125\uffd0\126\uffd0\127\uffd0\134\065" +
    "\001\002\000\140\006\uffc6\013\uffc6\014\uffc6\015\uffc6\021" +
    "\uffc6\057\071\060\064\061\106\062\047\063\101\064\054" +
    "\065\052\066\111\067\067\070\050\071\045\072\046\073" +
    "\061\074\115\075\uffc6\076\uffc6\077\uffc6\100\102\101\116" +
    "\102\075\103\056\104\051\105\107\106\057\107\063\110" +
    "\076\111\070\112\072\113\053\114\062\115\055\116\117" +
    "\117\110\120\112\121\103\122\073\123\060\124\077\125" +
    "\074\126\120\127\105\134\065\001\002\000\140\006\uffdf" +
    "\013\uffdf\014\uffdf\015\uffdf\021\uffdf\057\uffdf\060\uffdf\061" +
    "\106\062\047\063\101\064\uffdf\065\052\066\111\067\uffdf" +
    "\070\uffdf\071\045\072\uffdf\073\uffdf\074\uffdf\075\uffdf\076" +
    "\uffdf\077\uffdf\100\uffdf\101\uffdf\102\uffdf\103\uffdf\104\uffdf" +
    "\105\uffdf\106\uffdf\107\uffdf\110\uffdf\111\uffdf\112\uffdf\113" +
    "\053\114\062\115\uffdf\116\uffdf\117\uffdf\120\uffdf\121\uffdf" +
    "\122\uffdf\123\uffdf\124\uffdf\125\uffdf\126\uffdf\127\uffdf\134" +
    "\065\001\002\000\140\006\uffc8\013\uffc8\014\uffc8\015\uffc8" +
    "\021\uffc8\057\uffc8\060\uffc8\061\uffc8\062\uffc8\063\uffc8\064" +
    "\uffc8\065\052\066\uffc8\067\uffc8\070\uffc8\071\045\072\uffc8" +
    "\073\uffc8\074\uffc8\075\uffc8\076\uffc8\077\uffc8\100\uffc8\101" +
    "\uffc8\102\uffc8\103\uffc8\104\uffc8\105\uffc8\106\uffc8\107\uffc8" +
    "\110\uffc8\111\uffc8\112\uffc8\113\053\114\062\115\uffc8\116" +
    "\uffc8\117\uffc8\120\uffc8\121\uffc8\122\uffc8\123\uffc8\124\uffc8" +
    "\125\uffc8\126\uffc8\127\uffc8\134\uffc8\001\002\000\140\006" +
    "\uffde\013\uffde\014\uffde\015\uffde\021\uffde\057\uffde\060\uffde" +
    "\061\uffde\062\uffde\063\uffde\064\uffde\065\uffde\066\uffde\067" +
    "\uffde\070\uffde\071\uffde\072\uffde\073\uffde\074\uffde\075\uffde" +
    "\076\uffde\077\uffde\100\uffde\101\uffde\102\uffde\103\uffde\104" +
    "\uffde\105\uffde\106\uffde\107\uffde\110\uffde\111\uffde\112\uffde" +
    "\113\uffde\114\uffde\115\uffde\116\uffde\117\uffde\120\uffde\121" +
    "\uffde\122\uffde\123\uffde\124\uffde\125\uffde\126\uffde\127\uffde" +
    "\134\uffde\001\002\000\120\006\uffcf\013\uffcf\014\uffcf\015" +
    "\uffcf\021\uffcf\057\071\060\064\061\106\062\047\063\101" +
    "\064\054\065\052\066\111\067\uffcf\070\uffcf\071\045\072" +
    "\uffcf\073\uffcf\074\uffcf\075\uffcf\076\uffcf\077\uffcf\100\102" +
    "\101\116\112\uffcf\113\053\114\062\115\uffcf\116\uffcf\117" +
    "\uffcf\120\uffcf\121\uffcf\122\uffcf\123\uffcf\124\uffcf\125\uffcf" +
    "\126\uffcf\127\uffcf\134\065\001\002\000\140\006\uffdb\013" +
    "\uffdb\014\uffdb\015\uffdb\021\uffdb\057\071\060\064\061\106" +
    "\062\047\063\101\064\054\065\052\066\111\067\067\070" +
    "\uffdb\071\045\072\046\073\061\074\115\075\uffdb\076\uffdb" +
    "\077\uffdb\100\102\101\116\102\075\103\056\104\051\105" +
    "\107\106\057\107\063\110\076\111\070\112\uffdb\113\053" +
    "\114\062\115\uffdb\116\uffdb\117\uffdb\120\uffdb\121\uffdb\122" +
    "\uffdb\123\uffdb\124\uffdb\125\uffdb\126\uffdb\127\uffdb\134\065" +
    "\001\002\000\140\006\uffe1\013\uffe1\014\uffe1\015\uffe1\021" +
    "\uffe1\057\uffe1\060\uffe1\061\uffe1\062\uffe1\063\uffe1\064\uffe1" +
    "\065\052\066\111\067\uffe1\070\uffe1\071\045\072\uffe1\073" +
    "\uffe1\074\uffe1\075\uffe1\076\uffe1\077\uffe1\100\uffe1\101\uffe1" +
    "\102\uffe1\103\uffe1\104\uffe1\105\uffe1\106\uffe1\107\uffe1\110" +
    "\uffe1\111\uffe1\112\uffe1\113\053\114\062\115\uffe1\116\uffe1" +
    "\117\uffe1\120\uffe1\121\uffe1\122\uffe1\123\uffe1\124\uffe1\125" +
    "\uffe1\126\uffe1\127\uffe1\134\065\001\002\000\140\006\uffd6" +
    "\013\uffd6\014\uffd6\015\uffd6\021\uffd6\057\071\060\064\061" +
    "\106\062\047\063\101\064\054\065\052\066\111\067\uffd6" +
    "\070\uffd6\071\045\072\uffd6\073\uffd6\074\uffd6\075\uffd6\076" +
    "\uffd6\077\uffd6\100\102\101\116\102\075\103\056\104\051" +
    "\105\107\106\057\107\063\110\076\111\070\112\uffd6\113" +
    "\053\114\062\115\uffd6\116\uffd6\117\uffd6\120\uffd6\121\uffd6" +
    "\122\uffd6\123\uffd6\124\uffd6\125\uffd6\126\uffd6\127\uffd6\134" +
    "\065\001\002\000\140\006\uffd7\013\uffd7\014\uffd7\015\uffd7" +
    "\021\uffd7\057\uffd7\060\uffd7\061\uffd7\062\uffd7\063\uffd7\064" +
    "\uffd7\065\052\066\uffd7\067\uffd7\070\uffd7\071\045\072\uffd7" +
    "\073\uffd7\074\uffd7\075\uffd7\076\uffd7\077\uffd7\100\uffd7\101" +
    "\uffd7\102\uffd7\103\uffd7\104\uffd7\105\uffd7\106\uffd7\107\uffd7" +
    "\110\uffd7\111\uffd7\112\uffd7\113\053\114\062\115\uffd7\116" +
    "\uffd7\117\uffd7\120\uffd7\121\uffd7\122\uffd7\123\uffd7\124\uffd7" +
    "\125\uffd7\126\uffd7\127\uffd7\134\uffd7\001\002\000\140\006" +
    "\uffba\013\uffba\014\uffba\015\uffba\021\uffba\057\uffba\060\uffba" +
    "\061\uffba\062\uffba\063\uffba\064\uffba\065\uffba\066\uffba\067" +
    "\uffba\070\uffba\071\uffba\072\uffba\073\uffba\074\uffba\075\uffba" +
    "\076\uffba\077\uffba\100\uffba\101\uffba\102\uffba\103\uffba\104" +
    "\uffba\105\uffba\106\uffba\107\uffba\110\uffba\111\uffba\112\uffba" +
    "\113\uffba\114\uffba\115\uffba\116\uffba\117\uffba\120\uffba\121" +
    "\uffba\122\uffba\123\uffba\124\uffba\125\uffba\126\uffba\127\uffba" +
    "\134\uffba\001\002\000\004\005\206\001\002\000\026\003" +
    "\040\005\014\006\uffee\130\034\133\032\136\013\137\033" +
    "\140\024\141\015\142\020\001\002\000\004\006\210\001" +
    "\002\000\140\006\uffb9\013\uffb9\014\uffb9\015\uffb9\021\uffb9" +
    "\057\uffb9\060\uffb9\061\uffb9\062\uffb9\063\uffb9\064\uffb9\065" +
    "\uffb9\066\uffb9\067\uffb9\070\uffb9\071\uffb9\072\uffb9\073\uffb9" +
    "\074\uffb9\075\uffb9\076\uffb9\077\uffb9\100\uffb9\101\uffb9\102" +
    "\uffb9\103\uffb9\104\uffb9\105\uffb9\106\uffb9\107\uffb9\110\uffb9" +
    "\111\uffb9\112\uffb9\113\uffb9\114\uffb9\115\uffb9\116\uffb9\117" +
    "\uffb9\120\uffb9\121\uffb9\122\uffb9\123\uffb9\124\uffb9\125\uffb9" +
    "\126\uffb9\127\uffb9\134\uffb9\001\002\000\006\007\uffa3\025" +
    "\212\001\002\000\006\007\uffa1\141\262\001\002\000\004" +
    "\007\214\001\002\000\030\010\uff9c\022\uff9c\027\uff9c\030" +
    "\uff9c\031\uff9c\032\uff9c\033\uff9c\034\uff9c\035\uff9c\036\uff9c" +
    "\142\uff9c\001\002\000\030\010\217\022\uff96\027\uff96\030" +
    "\uff96\031\uff96\032\uff96\033\uff96\034\uff96\035\220\036\216" +
    "\142\uff96\001\002\000\004\141\253\001\002\000\062\002" +
    "\uffa8\003\uffa8\004\uffa8\005\uffa8\007\uffa8\010\uffa8\015\uffa8" +
    "\022\uffa8\023\uffa8\024\uffa8\042\uffa8\043\uffa8\045\uffa8\046" +
    "\uffa8\047\uffa8\055\uffa8\056\uffa8\130\uffa8\133\uffa8\136\uffa8" +
    "\137\uffa8\140\uffa8\141\uffa8\142\uffa8\001\002\000\004\142" +
    "\251\001\002\000\030\010\uff9b\022\uff9b\027\uff9b\030\uff9b" +
    "\031\uff9b\032\uff9b\033\uff9b\034\uff9b\035\uff9b\036\uff9b\142" +
    "\uff9b\001\002\000\022\022\230\027\224\030\226\031\227" +
    "\032\225\033\223\034\233\142\231\001\002\000\022\022" +
    "\uff90\027\uff90\030\uff90\031\uff90\032\uff90\033\uff90\034\uff90" +
    "\142\uff90\001\002\000\022\022\uff94\027\uff94\030\uff94\031" +
    "\uff94\032\uff94\033\uff94\034\uff94\142\uff94\001\002\000\022" +
    "\022\uff91\027\uff91\030\uff91\031\uff91\032\uff91\033\uff91\034" +
    "\uff91\142\uff91\001\002\000\022\022\uff93\027\uff93\030\uff93" +
    "\031\uff93\032\uff93\033\uff93\034\uff93\142\uff93\001\002\000" +
    "\022\022\uff92\027\uff92\030\uff92\031\uff92\032\uff92\033\uff92" +
    "\034\uff92\142\uff92\001\002\000\004\141\235\001\002\000" +
    "\004\015\234\001\002\000\022\022\uff95\027\uff95\030\uff95" +
    "\031\uff95\032\uff95\033\uff95\034\uff95\142\uff95\001\002\000" +
    "\022\022\uff8f\027\uff8f\030\uff8f\031\uff8f\032\uff8f\033\uff8f" +
    "\034\uff8f\142\uff8f\001\002\000\030\010\uff98\022\uff98\027" +
    "\uff98\030\uff98\031\uff98\032\uff98\033\uff98\034\uff98\035\uff98" +
    "\036\uff98\142\uff98\001\002\000\004\005\236\001\002\000" +
    "\006\006\uffae\142\240\001\002\000\006\006\uffad\021\247" +
    "\001\002\000\006\006\uffaa\021\uffaa\001\002\000\004\006" +
    "\243\001\002\000\006\006\uffac\021\uffac\001\002\000\004" +
    "\007\244\001\002\000\054\003\uffff\004\uffff\005\uffff\007" +
    "\uffff\010\uffff\015\uffff\022\uffff\023\uffff\024\uffff\042\uffff" +
    "\043\uffff\045\uffff\055\uffff\056\uffff\130\uffff\133\uffff\136" +
    "\uffff\137\uffff\140\uffff\141\uffff\142\uffff\001\002\000\054" +
    "\003\027\004\023\005\014\007\016\010\246\015\006\022" +
    "\017\023\007\024\031\042\022\043\012\045\021\055\030" +
    "\056\011\130\034\133\032\136\013\137\033\140\024\141" +
    "\015\142\020\001\002\000\030\010\uff97\022\uff97\027\uff97" +
    "\030\uff97\031\uff97\032\uff97\033\uff97\034\uff97\035\uff97\036" +
    "\uff97\142\uff97\001\002\000\004\142\240\001\002\000\006" +
    "\006\uffab\021\uffab\001\002\000\004\015\252\001\002\000" +
    "\030\010\uff99\022\uff99\027\uff99\030\uff99\031\uff99\032\uff99" +
    "\033\uff99\034\uff99\035\uff99\036\uff99\142\uff99\001\002\000" +
    "\004\112\254\001\002\000\024\003\040\005\014\130\034" +
    "\133\032\136\013\137\033\140\024\141\015\142\020\001" +
    "\002\000\132\013\113\015\256\057\071\060\064\061\106" +
    "\062\047\063\101\064\054\065\052\066\111\067\067\070" +
    "\050\071\045\072\046\073\061\074\115\075\104\076\066" +
    "\077\100\100\102\101\116\102\075\103\056\104\051\105" +
    "\107\106\057\107\063\110\076\111\070\112\072\113\053" +
    "\114\062\115\055\116\117\117\110\120\112\121\103\122" +
    "\073\123\060\124\077\125\074\126\120\127\105\134\065" +
    "\001\002\000\030\010\uff9a\022\uff9a\027\uff9a\030\uff9a\031" +
    "\uff9a\032\uff9a\033\uff9a\034\uff9a\035\uff9a\036\uff9a\142\uff9a" +
    "\001\002\000\006\007\uffa0\021\263\001\002\000\006\007" +
    "\uff9f\021\uff9f\001\002\000\004\007\uffa2\001\002\000\006" +
    "\007\uff9d\021\uff9d\001\002\000\004\141\262\001\002\000" +
    "\006\007\uff9e\021\uff9e\001\002\000\004\015\266\001\002" +
    "\000\062\002\ufff8\003\ufff8\004\ufff8\005\ufff8\007\ufff8\010" +
    "\ufff8\015\ufff8\022\ufff8\023\ufff8\024\ufff8\042\ufff8\043\ufff8" +
    "\045\ufff8\046\ufff8\047\ufff8\055\ufff8\056\ufff8\130\ufff8\133" +
    "\ufff8\136\ufff8\137\ufff8\140\ufff8\141\ufff8\142\ufff8\001\002" +
    "\000\062\002\ufff2\003\ufff2\004\ufff2\005\ufff2\007\ufff2\010" +
    "\ufff2\015\ufff2\022\ufff2\023\ufff2\024\ufff2\042\ufff2\043\ufff2" +
    "\045\ufff2\046\ufff2\047\ufff2\055\ufff2\056\ufff2\130\ufff2\133" +
    "\ufff2\136\ufff2\137\ufff2\140\ufff2\141\ufff2\142\ufff2\001\002" +
    "\000\062\002\ufffc\003\ufffc\004\ufffc\005\ufffc\007\ufffc\010" +
    "\ufffc\015\ufffc\022\ufffc\023\ufffc\024\ufffc\042\ufffc\043\ufffc" +
    "\045\ufffc\046\ufffc\047\ufffc\055\ufffc\056\ufffc\130\ufffc\133" +
    "\ufffc\136\ufffc\137\ufffc\140\ufffc\141\ufffc\142\ufffc\001\002" +
    "\000\004\043\272\001\002\000\004\005\273\001\002\000" +
    "\024\003\040\005\014\130\034\133\032\136\013\137\033" +
    "\140\024\141\015\142\020\001\002\000\132\006\275\013" +
    "\113\057\071\060\064\061\106\062\047\063\101\064\054" +
    "\065\052\066\111\067\067\070\050\071\045\072\046\073" +
    "\061\074\115\075\104\076\066\077\100\100\102\101\116" +
    "\102\075\103\056\104\051\105\107\106\057\107\063\110" +
    "\076\111\070\112\072\113\053\114\062\115\055\116\117" +
    "\117\110\120\112\121\103\122\073\123\060\124\077\125" +
    "\074\126\120\127\105\134\065\001\002\000\062\002\ufff5" +
    "\003\ufff5\004\ufff5\005\ufff5\007\ufff5\010\ufff5\015\ufff5\022" +
    "\ufff5\023\ufff5\024\ufff5\042\ufff5\043\ufff5\045\ufff5\046\ufff5" +
    "\047\ufff5\055\ufff5\056\ufff5\130\ufff5\133\ufff5\136\ufff5\137" +
    "\ufff5\140\ufff5\141\ufff5\142\ufff5\001\002\000\062\002\ufff7" +
    "\003\ufff7\004\ufff7\005\ufff7\007\ufff7\010\ufff7\015\ufff7\022" +
    "\ufff7\023\ufff7\024\ufff7\042\ufff7\043\ufff7\045\ufff7\046\ufff7" +
    "\047\ufff7\055\ufff7\056\ufff7\130\ufff7\133\ufff7\136\ufff7\137" +
    "\ufff7\140\ufff7\141\ufff7\142\ufff7\001\002\000\024\003\040" +
    "\005\014\130\034\133\032\136\013\137\033\140\024\141" +
    "\015\142\020\001\002\000\132\006\301\013\113\057\071" +
    "\060\064\061\106\062\047\063\101\064\054\065\052\066" +
    "\111\067\067\070\050\071\045\072\046\073\061\074\115" +
    "\075\104\076\066\077\100\100\102\101\116\102\075\103" +
    "\056\104\051\105\107\106\057\107\063\110\076\111\070" +
    "\112\072\113\053\114\062\115\055\116\117\117\110\120" +
    "\112\121\103\122\073\123\060\124\077\125\074\126\120" +
    "\127\105\134\065\001\002\000\052\003\027\004\023\005" +
    "\014\007\016\015\006\022\017\023\007\024\031\042\022" +
    "\043\012\045\021\055\030\056\011\130\034\133\032\136" +
    "\013\137\033\140\024\141\015\142\020\001\002\000\062" +
    "\002\ufff1\003\ufff1\004\ufff1\005\ufff1\007\ufff1\010\ufff1\015" +
    "\ufff1\022\ufff1\023\ufff1\024\ufff1\042\ufff1\043\ufff1\045\ufff1" +
    "\046\304\047\303\055\ufff1\056\ufff1\130\ufff1\133\ufff1\136" +
    "\ufff1\137\ufff1\140\ufff1\141\ufff1\142\ufff1\001\002\000\052" +
    "\003\027\004\023\005\014\007\016\015\006\022\017\023" +
    "\007\024\031\042\022\043\012\045\021\055\030\056\011" +
    "\130\034\133\032\136\013\137\033\140\024\141\015\142" +
    "\020\001\002\000\004\005\277\001\002\000\062\002\uffef" +
    "\003\uffef\004\uffef\005\uffef\007\uffef\010\uffef\015\uffef\022" +
    "\uffef\023\uffef\024\uffef\042\uffef\043\uffef\045\uffef\046\uffef" +
    "\047\uffef\055\uffef\056\uffef\130\uffef\133\uffef\136\uffef\137" +
    "\uffef\140\uffef\141\uffef\142\uffef\001\002\000\062\002\ufff0" +
    "\003\ufff0\004\ufff0\005\ufff0\007\ufff0\010\ufff0\015\ufff0\022" +
    "\ufff0\023\ufff0\024\ufff0\042\ufff0\043\ufff0\045\ufff0\046\ufff0" +
    "\047\ufff0\055\ufff0\056\ufff0\130\ufff0\133\ufff0\136\ufff0\137" +
    "\ufff0\140\ufff0\141\ufff0\142\ufff0\001\002\000\004\005\310" +
    "\001\002\000\006\006\uffae\142\240\001\002\000\004\006" +
    "\312\001\002\000\004\007\313\001\002\000\054\003\uffff" +
    "\004\uffff\005\uffff\007\uffff\010\uffff\015\uffff\022\uffff\023" +
    "\uffff\024\uffff\042\uffff\043\uffff\045\uffff\055\uffff\056\uffff" +
    "\130\uffff\133\uffff\136\uffff\137\uffff\140\uffff\141\uffff\142" +
    "\uffff\001\002\000\054\003\027\004\023\005\014\007\016" +
    "\010\315\015\006\022\017\023\007\024\031\042\022\043" +
    "\012\045\021\055\030\056\011\130\034\133\032\136\013" +
    "\137\033\140\024\141\015\142\020\001\002\000\062\002" +
    "\ufff4\003\ufff4\004\ufff4\005\ufff4\007\ufff4\010\ufff4\015\ufff4" +
    "\022\ufff4\023\ufff4\024\ufff4\042\ufff4\043\ufff4\045\ufff4\046" +
    "\ufff4\047\ufff4\055\ufff4\056\ufff4\130\ufff4\133\ufff4\136\ufff4" +
    "\137\ufff4\140\ufff4\141\ufff4\142\ufff4\001\002\000\054\003" +
    "\027\004\023\005\014\007\016\010\317\015\006\022\017" +
    "\023\007\024\031\042\022\043\012\045\021\055\030\056" +
    "\011\130\034\133\032\136\013\137\033\140\024\141\015" +
    "\142\020\001\002\000\062\002\ufffb\003\ufffb\004\ufffb\005" +
    "\ufffb\007\ufffb\010\ufffb\015\ufffb\022\ufffb\023\ufffb\024\ufffb" +
    "\042\ufffb\043\ufffb\045\ufffb\046\ufffb\047\ufffb\055\ufffb\056" +
    "\ufffb\130\ufffb\133\ufffb\136\ufffb\137\ufffb\140\ufffb\141\ufffb" +
    "\142\ufffb\001\002\000\026\003\040\005\014\006\uffee\130" +
    "\034\133\032\136\013\137\033\140\024\141\015\142\020" +
    "\001\002\000\004\006\322\001\002\000\140\006\uffbb\013" +
    "\uffbb\014\uffbb\015\uffbb\021\uffbb\057\uffbb\060\uffbb\061\uffbb" +
    "\062\uffbb\063\uffbb\064\uffbb\065\uffbb\066\uffbb\067\uffbb\070" +
    "\uffbb\071\uffbb\072\uffbb\073\uffbb\074\uffbb\075\uffbb\076\uffbb" +
    "\077\uffbb\100\uffbb\101\uffbb\102\uffbb\103\uffbb\104\uffbb\105" +
    "\uffbb\106\uffbb\107\uffbb\110\uffbb\111\uffbb\112\uffbb\113\uffbb" +
    "\114\uffbb\115\uffbb\116\uffbb\117\uffbb\120\uffbb\121\uffbb\122" +
    "\uffbb\123\uffbb\124\uffbb\125\uffbb\126\uffbb\127\uffbb\134\uffbb" +
    "\001\002\000\132\006\324\013\113\057\071\060\064\061" +
    "\106\062\047\063\101\064\054\065\052\066\111\067\067" +
    "\070\050\071\045\072\046\073\061\074\115\075\104\076" +
    "\066\077\100\100\102\101\116\102\075\103\056\104\051" +
    "\105\107\106\057\107\063\110\076\111\070\112\072\113" +
    "\053\114\062\115\055\116\117\117\110\120\112\121\103" +
    "\122\073\123\060\124\077\125\074\126\120\127\105\134" +
    "\065\001\002\000\140\006\uffe5\013\uffe5\014\uffe5\015\uffe5" +
    "\021\uffe5\057\uffe5\060\uffe5\061\uffe5\062\uffe5\063\uffe5\064" +
    "\uffe5\065\uffe5\066\uffe5\067\uffe5\070\uffe5\071\uffe5\072\uffe5" +
    "\073\uffe5\074\uffe5\075\uffe5\076\uffe5\077\uffe5\100\uffe5\101" +
    "\uffe5\102\uffe5\103\uffe5\104\uffe5\105\uffe5\106\uffe5\107\uffe5" +
    "\110\uffe5\111\uffe5\112\uffe5\113\uffe5\114\uffe5\115\uffe5\116" +
    "\uffe5\117\uffe5\120\uffe5\121\uffe5\122\uffe5\123\uffe5\124\uffe5" +
    "\125\uffe5\126\uffe5\127\uffe5\134\uffe5\001\002\000\024\003" +
    "\040\005\014\130\034\133\032\136\013\137\033\140\024" +
    "\141\015\142\020\001\002\000\132\006\327\013\113\057" +
    "\071\060\064\061\106\062\047\063\101\064\054\065\052" +
    "\066\111\067\067\070\050\071\045\072\046\073\061\074" +
    "\115\075\104\076\066\077\100\100\102\101\116\102\075" +
    "\103\056\104\051\105\107\106\057\107\063\110\076\111" +
    "\070\112\072\113\053\114\062\115\055\116\117\117\110" +
    "\120\112\121\103\122\073\123\060\124\077\125\074\126" +
    "\120\127\105\134\065\001\002\000\052\003\027\004\023" +
    "\005\014\007\016\015\006\022\017\023\007\024\031\042" +
    "\022\043\012\045\021\055\030\056\011\130\034\133\032" +
    "\136\013\137\033\140\024\141\015\142\020\001\002\000" +
    "\062\002\ufff6\003\ufff6\004\ufff6\005\ufff6\007\ufff6\010\ufff6" +
    "\015\ufff6\022\ufff6\023\ufff6\024\ufff6\042\ufff6\043\ufff6\045" +
    "\ufff6\046\ufff6\047\ufff6\055\ufff6\056\ufff6\130\ufff6\133\ufff6" +
    "\136\ufff6\137\ufff6\140\ufff6\141\ufff6\142\ufff6\001\002\000" +
    "\006\015\332\021\134\001\002\000\062\002\ufff9\003\ufff9" +
    "\004\ufff9\005\ufff9\007\ufff9\010\ufff9\015\ufff9\022\ufff9\023" +
    "\ufff9\024\ufff9\042\ufff9\043\ufff9\045\ufff9\046\ufff9\047\ufff9" +
    "\055\ufff9\056\ufff9\130\ufff9\133\ufff9\136\ufff9\137\ufff9\140" +
    "\ufff9\141\ufff9\142\ufff9\001\002\000\010\007\uffa7\025\335" +
    "\026\uffa7\001\002\000\006\007\uffa5\026\340\001\002\000" +
    "\004\141\336\001\002\000\006\007\uffa6\026\uffa6\001\002" +
    "\000\004\007\342\001\002\000\006\007\uffa1\141\262\001" +
    "\002\000\004\007\uffa4\001\002\000\030\010\uff9c\022\uff9c" +
    "\027\uff9c\030\uff9c\031\uff9c\032\uff9c\033\uff9c\034\uff9c\035" +
    "\uff9c\036\uff9c\142\uff9c\001\002\000\030\010\344\022\uff96" +
    "\027\uff96\030\uff96\031\uff96\032\uff96\033\uff96\034\uff96\035" +
    "\220\036\216\142\uff96\001\002\000\062\002\uffa9\003\uffa9" +
    "\004\uffa9\005\uffa9\007\uffa9\010\uffa9\015\uffa9\022\uffa9\023" +
    "\uffa9\024\uffa9\042\uffa9\043\uffa9\045\uffa9\046\uffa9\047\uffa9" +
    "\055\uffa9\056\uffa9\130\uffa9\133\uffa9\136\uffa9\137\uffa9\140" +
    "\uffa9\141\uffa9\142\uffa9\001\002\000\004\002\001\001\002" +
    "" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\343\000\006\002\003\003\004\001\001\000\002\001" +
    "\001\000\010\004\007\010\025\017\024\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\007" +
    "\330\010\131\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\010\322\001\001\000\002\001\001\000\004\003" +
    "\315\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\005\275\001\001\000\010\004\270\010\025\017\024\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\010\036\011\035\012\040\013\041\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\010\036\013" +
    "\043\001\001\000\002\001\001\000\004\010\202\001\001" +
    "\000\004\010\201\001\001\000\004\010\200\001\001\000" +
    "\004\010\177\001\001\000\004\010\176\001\001\000\004" +
    "\010\175\001\001\000\004\010\174\001\001\000\004\010" +
    "\173\001\001\000\004\010\172\001\001\000\004\010\171" +
    "\001\001\000\004\010\170\001\001\000\004\010\167\001" +
    "\001\000\004\010\166\001\001\000\004\010\165\001\001" +
    "\000\004\010\164\001\001\000\004\010\163\001\001\000" +
    "\002\001\001\000\004\010\161\001\001\000\004\010\160" +
    "\001\001\000\004\010\157\001\001\000\004\010\156\001" +
    "\001\000\004\010\155\001\001\000\004\010\154\001\001" +
    "\000\004\010\153\001\001\000\004\010\152\001\001\000" +
    "\004\010\151\001\001\000\004\010\150\001\001\000\004" +
    "\010\147\001\001\000\004\010\146\001\001\000\004\010" +
    "\145\001\001\000\004\010\144\001\001\000\004\010\143" +
    "\001\001\000\004\010\142\001\001\000\004\010\141\001" +
    "\001\000\004\010\140\001\001\000\004\010\137\001\001" +
    "\000\004\010\136\001\001\000\004\010\135\001\001\000" +
    "\002\001\001\000\004\010\124\001\001\000\004\010\123" +
    "\001\001\000\004\010\122\001\001\000\004\010\121\001" +
    "\001\000\004\010\120\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\006\130\007\127\010\131" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\010\134\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\006\206\007\127\010" +
    "\131\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\022\212\001\001\000\010\023\260\024\256\025\257\001" +
    "\001\000\002\001\001\000\004\026\214\001\001\000\006" +
    "\027\220\030\221\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\031\231" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\014\240\015\236" +
    "\016\241\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\003\244\001\001\000\010\004\007\010\025\017\024\001" +
    "\001\000\002\001\001\000\004\016\247\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\010\254\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\025\263\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\010\273\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\010\277\001\001\000\002" +
    "\001\001\000\010\004\301\010\025\017\024\001\001\000" +
    "\002\001\001\000\010\004\305\010\025\017\024\001\001" +
    "\000\004\005\304\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\014\310\015\236\016\241" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\003" +
    "\313\001\001\000\010\004\007\010\025\017\024\001\001" +
    "\000\002\001\001\000\010\004\007\010\025\017\024\001" +
    "\001\000\002\001\001\000\010\006\320\007\127\010\131" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\010\325\001\001\000\002" +
    "\001\001\000\010\004\327\010\025\017\024\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\020\333\001\001\000\004\021\336\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\023\340" +
    "\024\256\025\257\001\001\000\002\001\001\000\004\026" +
    "\342\001\001\000\006\027\220\030\221\001\001\000\002" +
    "\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {


    }

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {

	return getScanner().next_token();

    }



	/* (non-Javadoc)
	 * @see java_cup.runtime.lr_parser#syntax_error(java_cup.runtime.Symbol)
	 */
	@Override
	public void syntax_error(final Symbol token) {
		if (token instanceof ComplexSymbol) {
			
			ComplexSymbol complexSymbol = (ComplexSymbol)token;
			int line = complexSymbol.getLeft().getLine();
			int column = complexSymbol.getLeft().getColumn();
			System.err.println("Syntax error at line " + (line + 1) + ", col " + (column + 1) + ", symbol " + complexSymbol.sym + ", value " + complexSymbol.value);
			
			System.err.print("Valid symbols at this point:");
			int state = ((Symbol)stack.peek()).parse_state;
			short[] actionRow = action_tab[state];
			for (int i=0; i<actionRow.length; i+=2) {
				if (actionRow[i + 1] != 0) {
					System.err.print(" " + actionRow[i]);
				}
			}
			System.err.println();
			
		} else {
			super.syntax_error(token);
		}
	}


}

/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings("all")
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= program EOF 
            {
              Object RESULT =null;
		Location start_valxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location start_valxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		StatementSequence start_val = (StatementSequence)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // program ::= statements 
            {
              StatementSequence RESULT =null;
		Location stsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location stsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		List<Statement> sts = (List<Statement>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new StatementSequence(sts); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // statements ::= 
            {
              List<Statement> RESULT =null;
		 RESULT = new ArrayList<Statement>(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statements",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // statements ::= statements statement 
            {
              List<Statement> RESULT =null;
		Location stsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location stsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		List<Statement> sts = (List<Statement>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location stxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location stxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Statement st = (Statement)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 sts.add(st); RESULT = sts; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statements",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // statement ::= SEMICOLON 
            {
              Statement RESULT =null;
		 RESULT = new NopStatement(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // statement ::= expression SEMICOLON 
            {
              Statement RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new ExpressionStatement(e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // statement ::= OPENING_CURLY_BRACE statements CLOSING_CURLY_BRACE 
            {
              Statement RESULT =null;
		Location stsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location stsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		List<Statement> sts = (List<Statement>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new StatementSequence(sts); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // statement ::= VERBATIM_CONTENT 
            {
              Statement RESULT =null;
		Location cxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location cxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		String c = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ExpressionStatement(new FunctionCall("echo", new LiteralExpression(c))); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // statement ::= ECHO one_or_more_expressions SEMICOLON 
            {
              Statement RESULT =null;
		Location exsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location exsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		List<Expression> exs = (List<Expression>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new ExpressionStatement(new FunctionCall("echo", exs.toArray(new Expression[exs.size()]))); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // statement ::= GLOBAL LOCAL_VARIABLE SEMICOLON 
            {
              Statement RESULT =null;
		Location vxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location vxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		String v = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new GlobalStatement(v); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // statement ::= IF if_statement_continuation 
            {
              Statement RESULT =null;
		Location cxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location cxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Statement c = (Statement)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = c; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // statement ::= WHILE OPENING_PARENTHESIS expression CLOSING_PARENTHESIS statement 
            {
              Statement RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location sxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location sxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new WhileStatement(e, s); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // statement ::= DO statement WHILE OPENING_PARENTHESIS expression CLOSING_PARENTHESIS 
            {
              Statement RESULT =null;
		Location sxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xleft;
		Location sxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xright;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new DoWhileStatement(s, e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // statement ::= FUNCTION IDENTIFIER OPENING_PARENTHESIS parameter_declarations CLOSING_PARENTHESIS OPENING_CURLY_BRACE statements CLOSING_CURLY_BRACE 
            {
              Statement RESULT =null;
		Location idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).xleft;
		Location idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).xright;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		Location declsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xleft;
		Location declsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xright;
		List<String> decls = (List<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		Location stsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location stsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		List<Statement> sts = (List<Statement>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new FunctionDefinition(id, decls.toArray(new String[decls.size()]), new StatementSequence(sts)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // statement ::= oop_type_definition 
            {
              Statement RESULT =null;
		Location defxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location defxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		OopTypeDefinition def = (OopTypeDefinition)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = def; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // statement ::= error SEMICOLON 
            {
              Statement RESULT =null;
		 System.err.println("syntax error"); RESULT = new NopStatement(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // if_statement_continuation ::= OPENING_PARENTHESIS expression CLOSING_PARENTHESIS statement 
            {
              Statement RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location sxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location sxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new IfStatement(e, s, NopStatement.INSTANCE); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("if_statement_continuation",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // if_statement_continuation ::= OPENING_PARENTHESIS expression CLOSING_PARENTHESIS statement ELSE statement 
            {
              Statement RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xright;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		Location s1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location s1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Statement s1 = (Statement)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location s2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location s2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Statement s2 = (Statement)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new IfStatement(e, s1, s2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("if_statement_continuation",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // if_statement_continuation ::= OPENING_PARENTHESIS expression CLOSING_PARENTHESIS statement ELSEIF if_statement_continuation 
            {
              Statement RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xright;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		Location sxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location sxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location cxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location cxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Statement c = (Statement)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new IfStatement(e, s, c); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("if_statement_continuation",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // expressions ::= 
            {
              List<Expression> RESULT =null;
		 RESULT = new ArrayList<Expression>(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expressions",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // expressions ::= one_or_more_expressions 
            {
              List<Expression> RESULT =null;
		Location exsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location exsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		List<Expression> exs = (List<Expression>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = exs; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expressions",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // one_or_more_expressions ::= expression 
            {
              List<Expression> RESULT =null;
		Location exxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location exxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Expression ex = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ArrayList<Expression>(); RESULT.add(ex); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("one_or_more_expressions",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // one_or_more_expressions ::= one_or_more_expressions COMMA expression 
            {
              List<Expression> RESULT =null;
		Location exsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location exsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		List<Expression> exs = (List<Expression>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location exxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location exxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Expression ex = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 exs.add(ex); RESULT = exs; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("one_or_more_expressions",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // expression ::= BOOLEAN_LITERAL 
            {
              Expression RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Boolean e = (Boolean)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new LiteralExpression(e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // expression ::= INTEGER_LITERAL 
            {
              Expression RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Integer e = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new LiteralExpression(e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // expression ::= STRING_LITERAL 
            {
              Expression RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new LiteralExpression(e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // expression ::= LOCAL_VARIABLE 
            {
              Expression RESULT =null;
		Location idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new LocalVariableExpression(id); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // expression ::= IDENTIFIER 
            {
              Expression RESULT =null;
		Location idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ConstantExpression(id); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // expression ::= OPENING_PARENTHESIS expression CLOSING_PARENTHESIS 
            {
              Expression RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = e; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // expression ::= expression PLUS expression 
            {
              Expression RESULT =null;
		Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location e2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location e2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new BinaryExpression(e1, BinaryOperator.ADD, e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // expression ::= expression MINUS expression 
            {
              Expression RESULT =null;
		Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location e2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location e2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new BinaryExpression(e1, BinaryOperator.SUBTRACT, e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // expression ::= expression TIMES expression 
            {
              Expression RESULT =null;
		Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location e2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location e2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new BinaryExpression(e1, BinaryOperator.MULTIPLY, e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // expression ::= expression DIVIDE expression 
            {
              Expression RESULT =null;
		Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location e2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location e2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new BinaryExpression(e1, BinaryOperator.DIVIDE, e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // expression ::= expression MOD expression 
            {
              Expression RESULT =null;
		Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location e2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location e2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new BinaryExpression(e1, BinaryOperator.REMAINDER, e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // expression ::= expression CONCAT expression 
            {
              Expression RESULT =null;
		Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location e2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location e2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 if (1==1) throw new RuntimeException(); RESULT = new BinaryExpression(e1, BinaryOperator.REMAINDER, e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // expression ::= expression POWER expression 
            {
              Expression RESULT =null;
		Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location e2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location e2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 if (1==1) throw new RuntimeException(); RESULT = new BinaryExpression(e1, BinaryOperator.REMAINDER, e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // expression ::= expression LOGICAL_NOT expression 
            {
              Expression RESULT =null;
		Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location e2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location e2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 if (1==1) throw new RuntimeException(); RESULT = new BinaryExpression(e1, BinaryOperator.REMAINDER, e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // expression ::= expression LOGICAL_SHORTCUT_AND expression 
            {
              Expression RESULT =null;
		Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location e2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location e2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 if (1==1) throw new RuntimeException(); RESULT = new BinaryExpression(e1, BinaryOperator.REMAINDER, e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // expression ::= expression LOGICAL_SHORTCUT_OR expression 
            {
              Expression RESULT =null;
		Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location e2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location e2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 if (1==1) throw new RuntimeException(); RESULT = new BinaryExpression(e1, BinaryOperator.REMAINDER, e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // expression ::= expression LOW_PRECEDENCE_LOGICAL_SHORTCUT_AND expression 
            {
              Expression RESULT =null;
		Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location e2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location e2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 if (1==1) throw new RuntimeException(); RESULT = new BinaryExpression(e1, BinaryOperator.REMAINDER, e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // expression ::= expression LOW_PRECEDENCE_LOGICAL_SHORTCUT_OR expression 
            {
              Expression RESULT =null;
		Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location e2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location e2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 if (1==1) throw new RuntimeException(); RESULT = new BinaryExpression(e1, BinaryOperator.REMAINDER, e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // expression ::= expression LOW_PRECEDENCE_LOGICAL_SHORTCUT_XOR expression 
            {
              Expression RESULT =null;
		Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location e2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location e2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 if (1==1) throw new RuntimeException(); RESULT = new BinaryExpression(e1, BinaryOperator.REMAINDER, e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // expression ::= expression BITWISE_NOT expression 
            {
              Expression RESULT =null;
		Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location e2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location e2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 if (1==1) throw new RuntimeException(); RESULT = new BinaryExpression(e1, BinaryOperator.REMAINDER, e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // expression ::= expression BITWISE_AND expression 
            {
              Expression RESULT =null;
		Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location e2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location e2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 if (1==1) throw new RuntimeException(); RESULT = new BinaryExpression(e1, BinaryOperator.REMAINDER, e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // expression ::= expression BITWISE_OR expression 
            {
              Expression RESULT =null;
		Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location e2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location e2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 if (1==1) throw new RuntimeException(); RESULT = new BinaryExpression(e1, BinaryOperator.REMAINDER, e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // expression ::= expression BITWISE_XOR expression 
            {
              Expression RESULT =null;
		Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location e2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location e2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 if (1==1) throw new RuntimeException(); RESULT = new BinaryExpression(e1, BinaryOperator.REMAINDER, e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // expression ::= expression SHIFT_LEFT expression 
            {
              Expression RESULT =null;
		Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location e2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location e2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 if (1==1) throw new RuntimeException(); RESULT = new BinaryExpression(e1, BinaryOperator.REMAINDER, e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // expression ::= expression SHIFT_RIGHT expression 
            {
              Expression RESULT =null;
		Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location e2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location e2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 if (1==1) throw new RuntimeException(); RESULT = new BinaryExpression(e1, BinaryOperator.REMAINDER, e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // expression ::= expression EQUAL expression 
            {
              Expression RESULT =null;
		Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location e2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location e2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 if (1==1) throw new RuntimeException(); RESULT = new BinaryExpression(e1, BinaryOperator.REMAINDER, e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // expression ::= expression NOT_EQUAL expression 
            {
              Expression RESULT =null;
		Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location e2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location e2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 if (1==1) throw new RuntimeException(); RESULT = new BinaryExpression(e1, BinaryOperator.REMAINDER, e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // expression ::= expression IDENTICAL expression 
            {
              Expression RESULT =null;
		Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location e2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location e2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 if (1==1) throw new RuntimeException(); RESULT = new BinaryExpression(e1, BinaryOperator.REMAINDER, e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // expression ::= expression NOT_IDENTICAL expression 
            {
              Expression RESULT =null;
		Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location e2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location e2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 if (1==1) throw new RuntimeException(); RESULT = new BinaryExpression(e1, BinaryOperator.REMAINDER, e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // expression ::= expression GREATER expression 
            {
              Expression RESULT =null;
		Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location e2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location e2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 if (1==1) throw new RuntimeException(); RESULT = new BinaryExpression(e1, BinaryOperator.REMAINDER, e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // expression ::= expression LESS expression 
            {
              Expression RESULT =null;
		Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location e2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location e2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 if (1==1) throw new RuntimeException(); RESULT = new BinaryExpression(e1, BinaryOperator.REMAINDER, e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // expression ::= expression GREATER_EQUAL expression 
            {
              Expression RESULT =null;
		Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location e2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location e2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 if (1==1) throw new RuntimeException(); RESULT = new BinaryExpression(e1, BinaryOperator.REMAINDER, e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // expression ::= expression LESS_EQUAL expression 
            {
              Expression RESULT =null;
		Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location e2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location e2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 if (1==1) throw new RuntimeException(); RESULT = new BinaryExpression(e1, BinaryOperator.REMAINDER, e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // expression ::= expression ASSIGN expression 
            {
              Expression RESULT =null;
		Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location e2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location e2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new BinaryExpression(e1, BinaryOperator.ASSIGN, e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // expression ::= expression INCREMENT expression 
            {
              Expression RESULT =null;
		Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location e2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location e2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 if (1==1) throw new RuntimeException(); RESULT = new BinaryExpression(e1, BinaryOperator.REMAINDER, e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // expression ::= expression DECREMENT expression 
            {
              Expression RESULT =null;
		Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location e2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location e2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 if (1==1) throw new RuntimeException(); RESULT = new BinaryExpression(e1, BinaryOperator.REMAINDER, e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // expression ::= expression PLUS_ASSIGN expression 
            {
              Expression RESULT =null;
		Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location e2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location e2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 if (1==1) throw new RuntimeException(); RESULT = new BinaryExpression(e1, BinaryOperator.REMAINDER, e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // expression ::= expression MINUS_ASSIGN expression 
            {
              Expression RESULT =null;
		Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location e2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location e2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 if (1==1) throw new RuntimeException(); RESULT = new BinaryExpression(e1, BinaryOperator.REMAINDER, e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // expression ::= expression TIMES_ASSIGN expression 
            {
              Expression RESULT =null;
		Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location e2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location e2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 if (1==1) throw new RuntimeException(); RESULT = new BinaryExpression(e1, BinaryOperator.REMAINDER, e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // expression ::= expression DIVIDE_ASSIGN expression 
            {
              Expression RESULT =null;
		Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location e2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location e2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 if (1==1) throw new RuntimeException(); RESULT = new BinaryExpression(e1, BinaryOperator.REMAINDER, e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // expression ::= expression MOD_ASSIGN expression 
            {
              Expression RESULT =null;
		Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location e2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location e2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 if (1==1) throw new RuntimeException(); RESULT = new BinaryExpression(e1, BinaryOperator.REMAINDER, e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // expression ::= expression CONCAT_ASSIGN expression 
            {
              Expression RESULT =null;
		Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location e2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location e2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 if (1==1) throw new RuntimeException(); RESULT = new BinaryExpression(e1, BinaryOperator.REMAINDER, e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // expression ::= expression BITWISE_AND_ASSIGN expression 
            {
              Expression RESULT =null;
		Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location e2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location e2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 if (1==1) throw new RuntimeException(); RESULT = new BinaryExpression(e1, BinaryOperator.REMAINDER, e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // expression ::= expression BITWISE_OR_ASSIGN expression 
            {
              Expression RESULT =null;
		Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location e2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location e2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 if (1==1) throw new RuntimeException(); RESULT = new BinaryExpression(e1, BinaryOperator.REMAINDER, e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // expression ::= expression BITWISE_XOR_ASSIGN expression 
            {
              Expression RESULT =null;
		Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location e2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location e2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 if (1==1) throw new RuntimeException(); RESULT = new BinaryExpression(e1, BinaryOperator.REMAINDER, e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // expression ::= expression SHIFT_LEFT_ASSIGN expression 
            {
              Expression RESULT =null;
		Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location e2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location e2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 if (1==1) throw new RuntimeException(); RESULT = new BinaryExpression(e1, BinaryOperator.REMAINDER, e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // expression ::= expression SHIFT_RIGHT_ASSIGN expression 
            {
              Expression RESULT =null;
		Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location e2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location e2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 if (1==1) throw new RuntimeException(); RESULT = new BinaryExpression(e1, BinaryOperator.REMAINDER, e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // expression ::= IDENTIFIER OPENING_PARENTHESIS expressions CLOSING_PARENTHESIS 
            {
              Expression RESULT =null;
		Location idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xleft;
		Location idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xright;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		Location exsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location exsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		List<Expression> exs = (List<Expression>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = ParserHelper.buildFunctionCallLikeExpression(idxleft, id, exs); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // expression ::= ARRAY OPENING_PARENTHESIS array_literal_elements CLOSING_PARENTHESIS 
            {
              Expression RESULT =null;
		Location elsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location elsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		List<Pair<Expression,Expression>> els = (List<Pair<Expression,Expression>>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new ArrayConstructionExpression(els); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // expression ::= NEW IDENTIFIER OPENING_PARENTHESIS expressions CLOSING_PARENTHESIS 
            {
              Expression RESULT =null;
		Location idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xleft;
		Location idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xright;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		Location exsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location exsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		List<Expression> exs = (List<Expression>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new NewExpression(id, exs.toArray(new Expression[exs.size()])); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // expression ::= expression INSTANCEOF IDENTIFIER 
            {
              Expression RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new InstanceofExpression(e, id); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // expression ::= expression RIGHT_ARROW IDENTIFIER 
            {
              Expression RESULT =null;
		Location objxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location objxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Expression obj = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new InstanceFieldAccess(obj, id); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // expression ::= expression RIGHT_ARROW IDENTIFIER OPENING_PARENTHESIS expressions CLOSING_PARENTHESIS 
            {
              Expression RESULT =null;
		Location objxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).xleft;
		Location objxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).xright;
		Expression obj = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		Location idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xleft;
		Location idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xright;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		Location exsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location exsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		List<Expression> exs = (List<Expression>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new InstanceMethodCall(obj, id, exs.toArray(new Expression[exs.size()])); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // expression ::= error 
            {
              Expression RESULT =null;
		 RESULT = new LiteralExpression(null); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // array_literal_elements ::= 
            {
              List<Pair<Expression,Expression>> RESULT =null;
		 RESULT = new ArrayList<Pair<Expression, Expression>>(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("array_literal_elements",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // array_literal_elements ::= one_or_more_array_literal_elements 
            {
              List<Pair<Expression,Expression>> RESULT =null;
		Location elsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location elsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		List<Pair<Expression,Expression>> els = (List<Pair<Expression,Expression>>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = els; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("array_literal_elements",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // one_or_more_array_literal_elements ::= array_literal_element 
            {
              List<Pair<Expression,Expression>> RESULT =null;
		Location elxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location elxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Pair<Expression,Expression> el = (Pair<Expression,Expression>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ArrayList<Pair<Expression, Expression>>(); RESULT.add(el); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("one_or_more_array_literal_elements",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // one_or_more_array_literal_elements ::= one_or_more_array_literal_elements COMMA array_literal_element 
            {
              List<Pair<Expression,Expression>> RESULT =null;
		Location elsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location elsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		List<Pair<Expression,Expression>> els = (List<Pair<Expression,Expression>>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location elxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location elxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Pair<Expression,Expression> el = (Pair<Expression,Expression>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 els.add(el); RESULT = els; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("one_or_more_array_literal_elements",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // array_literal_element ::= expression 
            {
              Pair<Expression,Expression> RESULT =null;
		Location vxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location vxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Expression v = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = Pair.of(null, v); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("array_literal_element",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // array_literal_element ::= expression DOUBLE_RIGHT_ARROW expression 
            {
              Pair<Expression,Expression> RESULT =null;
		Location kxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location kxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Expression k = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location vxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location vxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Expression v = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = Pair.of(k, v); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("array_literal_element",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // parameter_declarations ::= 
            {
              List<String> RESULT =null;
		 RESULT = new ArrayList<String>(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parameter_declarations",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // parameter_declarations ::= one_or_more_parameter_declarations 
            {
              List<String> RESULT =null;
		Location declsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location declsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		List<String> decls = (List<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = decls; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parameter_declarations",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // one_or_more_parameter_declarations ::= parameter_declaration 
            {
              List<String> RESULT =null;
		Location declxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location declxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		String decl = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ArrayList<String>(); RESULT.add(decl); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("one_or_more_parameter_declarations",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // one_or_more_parameter_declarations ::= one_or_more_parameter_declarations COMMA parameter_declaration 
            {
              List<String> RESULT =null;
		Location declsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location declsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		List<String> decls = (List<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location declxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location declxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		String decl = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 decls.add(decl); RESULT = decls; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("one_or_more_parameter_declarations",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // parameter_declaration ::= LOCAL_VARIABLE 
            {
              String RESULT =null;
		Location vxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location vxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		String v = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = v; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parameter_declaration",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // oop_type_definition ::= CLASS IDENTIFIER oop_class_extends_clause oop_class_implements_clause OPENING_CURLY_BRACE oop_member_definitions CLOSING_CURLY_BRACE 
            {
              OopTypeDefinition RESULT =null;
		Location idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).xleft;
		Location idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).xright;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		Location membersxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location membersxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		List<OopMemberDefinition> members = (List<OopMemberDefinition>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("oop_type_definition",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // oop_type_definition ::= INTERFACE IDENTIFIER oop_interface_extends_clause OPENING_CURLY_BRACE oop_member_definitions CLOSING_CURLY_BRACE 
            {
              OopTypeDefinition RESULT =null;
		Location idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xleft;
		Location idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xright;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		Location membersxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location membersxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		List<OopMemberDefinition> members = (List<OopMemberDefinition>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("oop_type_definition",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // oop_class_extends_clause ::= 
            {
              String RESULT =null;
		 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("oop_class_extends_clause",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // oop_class_extends_clause ::= EXTENDS IDENTIFIER 
            {
              String RESULT =null;
		Location idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("oop_class_extends_clause",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // oop_class_implements_clause ::= 
            {
              List<String> RESULT =null;
		 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("oop_class_implements_clause",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // oop_class_implements_clause ::= IMPLEMENTS interface_references 
            {
              List<String> RESULT =null;
		Location itfsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location itfsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		List<String> itfs = (List<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("oop_class_implements_clause",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // oop_interface_extends_clause ::= 
            {
              List<String> RESULT =null;
		 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("oop_interface_extends_clause",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // oop_interface_extends_clause ::= EXTENDS interface_references 
            {
              List<String> RESULT =null;
		Location itfsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location itfsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		List<String> itfs = (List<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("oop_interface_extends_clause",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // interface_references ::= 
            {
              List<String> RESULT =null;
		 RESULT = new ArrayList<String>(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("interface_references",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // interface_references ::= one_or_more_interface_references 
            {
              List<String> RESULT =null;
		Location itfsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location itfsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		List<String> itfs = (List<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = itfs; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("interface_references",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // one_or_more_interface_references ::= interface_reference 
            {
              List<String> RESULT =null;
		Location itfxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location itfxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		String itf = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ArrayList<String>(); RESULT.add(itf); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("one_or_more_interface_references",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // one_or_more_interface_references ::= one_or_more_interface_references COMMA interface_reference 
            {
              List<String> RESULT =null;
		Location itfsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location itfsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		List<String> itfs = (List<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location itfxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location itfxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		String itf = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 itfs.add(itf); RESULT = itfs; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("one_or_more_interface_references",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // interface_reference ::= IDENTIFIER 
            {
              String RESULT =null;
		Location idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = id; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("interface_reference",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // oop_member_definitions ::= 
            {
              List<OopMemberDefinition> RESULT =null;
		 RESULT = new ArrayList<OopMemberDefinition>(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("oop_member_definitions",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // oop_member_definitions ::= oop_member_definitions oop_member_definition 
            {
              List<OopMemberDefinition> RESULT =null;
		Location mbrsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location mbrsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		List<OopMemberDefinition> mbrs = (List<OopMemberDefinition>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location mbrxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location mbrxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		OopMemberDefinition mbr = (OopMemberDefinition)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 mbrs.add(mbr); RESULT = mbrs; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("oop_member_definitions",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // oop_member_definition ::= CONST IDENTIFIER ASSIGN expression SEMICOLON 
            {
              OopMemberDefinition RESULT =null;
		Location idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xleft;
		Location idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xright;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("oop_member_definition",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // oop_member_definition ::= VAR LOCAL_VARIABLE SEMICOLON 
            {
              OopMemberDefinition RESULT =null;
		Location vxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location vxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		String v = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("oop_member_definition",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // oop_member_definition ::= oop_entity_modifiers LOCAL_VARIABLE SEMICOLON 
            {
              OopMemberDefinition RESULT =null;
		Location modsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location modsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		List<OopEntityModifier> mods = (List<OopEntityModifier>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location vxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location vxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		String v = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("oop_member_definition",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // oop_member_definition ::= oop_entity_modifiers FUNCTION IDENTIFIER OPENING_PARENTHESIS parameter_declarations CLOSING_PARENTHESIS OPENING_CURLY_BRACE statements CLOSING_CURLY_BRACE 
            {
              OopMemberDefinition RESULT =null;
		Location modsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).xleft;
		Location modsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).xright;
		List<OopEntityModifier> mods = (List<OopEntityModifier>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-8)).value;
		Location idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).xleft;
		Location idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).xright;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		Location declsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xleft;
		Location declsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xright;
		List<String> decls = (List<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		Location stsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location stsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		List<Statement> sts = (List<Statement>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("oop_member_definition",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // oop_entity_modifiers ::= 
            {
              List<OopEntityModifier> RESULT =null;
		 RESULT = new ArrayList<OopEntityModifier>(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("oop_entity_modifiers",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // oop_entity_modifiers ::= oop_entity_modifiers oop_entity_modifier 
            {
              List<OopEntityModifier> RESULT =null;
		Location modsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location modsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		List<OopEntityModifier> mods = (List<OopEntityModifier>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location modxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location modxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		OopEntityModifier mod = (OopEntityModifier)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 mods.add(mod); RESULT = mods; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("oop_entity_modifiers",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // oop_entity_modifier ::= PUBLIC 
            {
              OopEntityModifier RESULT =null;
		 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("oop_entity_modifier",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // oop_entity_modifier ::= PROTECTED 
            {
              OopEntityModifier RESULT =null;
		 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("oop_entity_modifier",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // oop_entity_modifier ::= PRIVATE 
            {
              OopEntityModifier RESULT =null;
		 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("oop_entity_modifier",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // oop_entity_modifier ::= STATIC 
            {
              OopEntityModifier RESULT =null;
		 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("oop_entity_modifier",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // oop_entity_modifier ::= ABSTRACT 
            {
              OopEntityModifier RESULT =null;
		 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("oop_entity_modifier",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // oop_entity_modifier ::= FINAL 
            {
              OopEntityModifier RESULT =null;
		 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("oop_entity_modifier",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

