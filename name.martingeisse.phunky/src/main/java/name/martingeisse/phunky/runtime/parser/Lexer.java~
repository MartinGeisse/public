/* The following code was generated by JFlex 1.5.1 */


// ---------------------------------------------------------------------------------------------------------
// --- header information
// ---------------------------------------------------------------------------------------------------------


// imports
package name.martingeisse.phunky.runtime.parser;
import import java.math.BigInteger;
import java_cup.runtime.*;
import java_cup.runtime.ComplexSymbolFactory.Location;
import name.martingeisse.phunky.runtime.code.expression.LocalVariableExpression;

/**
 * The Lexer.
 */

public class Lexer implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int CODE = 2;
  public static final int SINGLE_QUOTED_STRING = 4;
  public static final int DOUBLE_QUOTED_STRING = 6;
  public static final int HEREDOC_NOWDOC = 8;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  4, 4
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\3\1\2\1\26\1\27\1\1\22\0\1\3\1\73\1\24"+
    "\1\0\1\22\1\72\1\74\1\25\1\35\1\36\1\5\1\15\1\46"+
    "\1\43\1\16\1\4\1\6\1\14\10\7\1\45\1\44\1\23\1\33"+
    "\1\34\1\30\1\101\1\11\1\13\2\11\1\17\1\11\24\20\1\41"+
    "\1\104\1\42\1\77\1\102\1\0\1\57\1\12\1\52\1\63\1\61"+
    "\1\47\1\71\1\32\1\54\1\100\1\67\1\56\1\64\1\51\1\55"+
    "\1\31\1\103\1\62\1\60\1\53\1\50\1\65\1\66\1\10\1\70"+
    "\1\20\1\37\1\75\1\40\1\76\6\0\1\26\44\0\1\20\12\0"+
    "\1\20\4\0\1\20\5\0\27\20\1\0\37\20\1\0\u01ca\20\4\0"+
    "\14\20\16\0\5\20\7\0\1\20\1\0\1\20\126\0\1\20\52\0"+
    "\5\20\1\0\2\20\2\0\4\20\10\0\1\20\1\0\3\20\1\0"+
    "\1\20\1\0\24\20\1\0\123\20\1\0\213\20\10\0\236\20\11\0"+
    "\46\20\2\0\1\20\7\0\47\20\50\0\16\20\1\0\1\20\1\0"+
    "\2\20\1\0\2\20\1\0\1\20\10\0\33\20\5\0\3\20\35\0"+
    "\13\20\5\0\70\20\1\0\7\20\12\21\4\0\146\20\1\0\10\20"+
    "\4\0\10\20\4\0\3\20\12\21\3\20\2\0\1\20\20\0\60\20"+
    "\15\0\145\20\16\0\12\21\41\20\11\0\2\20\4\0\1\20\5\0"+
    "\30\20\2\0\23\20\23\0\31\20\107\0\1\20\1\0\13\20\67\0"+
    "\6\20\6\0\17\20\1\0\74\20\1\0\20\20\1\0\3\20\4\0"+
    "\17\20\2\0\12\21\1\0\7\20\1\0\7\20\1\0\3\20\1\0"+
    "\10\20\2\0\2\20\2\0\26\20\1\0\7\20\1\0\1\20\3\0"+
    "\4\20\3\0\10\20\2\0\2\20\2\0\2\20\1\0\1\20\10\0"+
    "\1\20\4\0\2\20\1\0\5\20\2\0\12\21\2\20\17\0\3\20"+
    "\1\0\6\20\4\0\2\20\2\0\26\20\1\0\7\20\1\0\2\20"+
    "\1\0\2\20\1\0\2\20\4\0\5\20\4\0\2\20\2\0\2\20"+
    "\4\0\1\20\7\0\4\20\1\0\1\20\7\0\12\21\6\20\13\0"+
    "\3\20\1\0\11\20\1\0\3\20\1\0\26\20\1\0\7\20\1\0"+
    "\2\20\1\0\5\20\3\0\11\20\1\0\3\20\1\0\2\20\3\0"+
    "\1\20\17\0\4\20\2\0\12\21\21\0\3\20\1\0\10\20\2\0"+
    "\2\20\2\0\26\20\1\0\7\20\1\0\2\20\1\0\5\20\3\0"+
    "\10\20\2\0\2\20\2\0\2\20\11\0\2\20\4\0\2\20\1\0"+
    "\5\20\2\0\12\21\1\0\1\20\20\0\2\20\1\0\6\20\3\0"+
    "\3\20\1\0\4\20\3\0\2\20\1\0\1\20\1\0\2\20\3\0"+
    "\2\20\3\0\3\20\3\0\14\20\4\0\5\20\3\0\3\20\1\0"+
    "\3\20\3\0\1\20\6\0\1\20\16\0\12\21\21\0\3\20\1\0"+
    "\10\20\1\0\3\20\1\0\27\20\1\0\12\20\1\0\5\20\3\0"+
    "\10\20\1\0\3\20\1\0\3\20\10\0\2\20\1\0\2\20\6\0"+
    "\4\20\2\0\12\21\22\0\2\20\1\0\10\20\1\0\3\20\1\0"+
    "\27\20\1\0\12\20\1\0\5\20\3\0\10\20\1\0\3\20\1\0"+
    "\3\20\10\0\2\20\7\0\1\20\1\0\4\20\2\0\12\21\1\0"+
    "\2\20\17\0\2\20\1\0\10\20\1\0\3\20\1\0\51\20\2\0"+
    "\10\20\1\0\3\20\1\0\3\20\1\0\1\20\10\0\1\20\10\0"+
    "\4\20\2\0\12\21\12\0\6\20\2\0\2\20\1\0\22\20\3\0"+
    "\30\20\1\0\11\20\1\0\1\20\2\0\7\20\10\0\6\20\1\0"+
    "\1\20\1\0\10\20\22\0\2\20\15\0\72\20\5\0\7\20\6\0"+
    "\1\20\2\0\12\21\47\0\2\20\1\0\1\20\2\0\2\20\1\0"+
    "\1\20\2\0\1\20\6\0\4\20\1\0\7\20\1\0\3\20\1\0"+
    "\1\20\1\0\1\20\2\0\2\20\1\0\15\20\1\0\3\20\2\0"+
    "\5\20\1\0\1\20\6\0\1\20\2\0\12\21\2\0\4\20\40\0"+
    "\1\20\37\0\12\21\26\0\10\20\1\0\44\20\4\0\21\20\6\0"+
    "\20\20\1\0\44\20\103\0\67\20\1\0\1\20\2\0\5\20\12\21"+
    "\6\0\23\20\2\0\4\20\5\0\31\20\7\0\1\20\1\0\12\21"+
    "\2\0\2\20\2\0\46\20\1\0\1\20\5\0\1\20\2\0\53\20"+
    "\1\0\u014d\20\1\0\4\20\2\0\7\20\1\0\1\20\1\0\4\20"+
    "\2\0\51\20\1\0\4\20\2\0\41\20\1\0\4\20\2\0\7\20"+
    "\1\0\1\20\1\0\4\20\2\0\17\20\1\0\71\20\1\0\4\20"+
    "\2\0\103\20\4\0\1\20\40\0\20\20\20\0\125\20\14\0\u026c\20"+
    "\2\0\21\20\1\0\32\20\5\0\113\20\3\0\3\20\17\0\15\20"+
    "\1\0\6\20\14\0\24\20\14\0\24\20\14\0\15\20\1\0\3\20"+
    "\1\0\2\20\14\0\64\20\2\0\23\20\16\0\1\20\4\0\1\20"+
    "\3\0\12\21\46\0\12\21\6\0\130\20\10\0\53\20\5\0\106\20"+
    "\12\0\35\20\3\0\14\20\4\0\11\20\15\0\12\21\36\20\2\0"+
    "\5\20\13\0\54\20\4\0\32\20\6\0\12\21\46\0\34\20\4\0"+
    "\77\20\2\0\24\20\13\0\12\21\6\0\12\21\15\0\1\20\130\0"+
    "\64\20\1\0\17\20\1\0\7\20\4\0\12\21\46\0\52\20\2\0"+
    "\4\20\12\21\54\20\1\0\13\20\16\0\66\20\12\0\12\21\3\0"+
    "\3\20\12\21\44\20\153\0\4\20\1\0\6\20\1\0\2\20\11\0"+
    "\300\20\100\0\u0116\20\2\0\6\20\2\0\46\20\2\0\6\20\2\0"+
    "\10\20\1\0\1\20\1\0\1\20\1\0\1\20\1\0\37\20\2\0"+
    "\65\20\1\0\7\20\1\0\1\20\3\0\3\20\1\0\7\20\3\0"+
    "\4\20\2\0\6\20\4\0\15\20\5\0\3\20\1\0\7\20\53\0"+
    "\1\26\1\26\107\0\1\20\15\0\1\20\20\0\15\20\145\0\1\20"+
    "\4\0\1\20\2\0\12\20\1\0\1\20\3\0\5\20\6\0\1\20"+
    "\1\0\1\20\1\0\1\20\1\0\4\20\1\0\13\20\2\0\4\20"+
    "\5\0\5\20\4\0\1\20\21\0\51\20\u032d\0\64\20\u0716\0\57\20"+
    "\1\0\57\20\1\0\205\20\6\0\4\20\3\0\2\20\14\0\46\20"+
    "\1\0\1\20\5\0\1\20\2\0\70\20\7\0\1\20\20\0\27\20"+
    "\11\0\7\20\1\0\7\20\1\0\7\20\1\0\7\20\1\0\7\20"+
    "\1\0\7\20\1\0\7\20\1\0\7\20\1\0\40\20\57\0\1\20"+
    "\u01d5\0\3\20\31\0\11\20\7\0\5\20\2\0\5\20\4\0\126\20"+
    "\6\0\3\20\1\0\132\20\1\0\4\20\5\0\51\20\3\0\136\20"+
    "\21\0\33\20\65\0\20\20\u0200\0\u19b6\20\112\0\u51cd\20\63\0\u048d\20"+
    "\103\0\56\20\2\0\u010d\20\3\0\20\20\12\21\2\20\24\0\57\20"+
    "\5\0\10\20\3\0\31\20\7\0\121\20\47\0\11\20\2\0\147\20"+
    "\2\0\4\20\1\0\4\20\14\0\13\20\115\0\12\20\1\0\3\20"+
    "\1\0\4\20\1\0\34\20\30\0\64\20\14\0\104\20\14\0\12\21"+
    "\30\0\6\20\3\0\1\20\4\0\12\21\41\20\5\0\43\20\15\0"+
    "\35\20\3\0\63\20\1\0\14\20\17\0\1\20\12\21\46\0\67\20"+
    "\11\0\16\20\2\0\12\21\6\0\27\20\3\0\1\20\5\0\77\20"+
    "\1\0\1\20\1\0\1\20\30\0\3\20\2\0\20\20\2\0\4\20"+
    "\13\0\6\20\2\0\6\20\2\0\6\20\11\0\7\20\1\0\7\20"+
    "\221\0\53\20\5\0\12\21\6\0\u2ba4\20\14\0\27\20\4\0\61\20"+
    "\u2104\0\u016e\20\2\0\152\20\46\0\7\20\14\0\5\20\5\0\14\20"+
    "\1\0\15\20\1\0\5\20\1\0\1\20\1\0\2\20\1\0\2\20"+
    "\1\0\154\20\41\0\u016b\20\22\0\100\20\2\0\66\20\50\0\14\20"+
    "\164\0\5\20\1\0\207\20\23\0\12\21\7\0\32\20\6\0\32\20"+
    "\13\0\131\20\3\0\6\20\2\0\6\20\2\0\6\20\2\0\3\20"+
    "\43\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\7\0\1\1\2\2\2\3\1\4\1\5\2\6\3\7"+
    "\1\10\1\11\1\2\1\12\1\13\1\14\1\15\1\7"+
    "\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25"+
    "\1\26\1\27\1\30\1\31\16\7\1\32\1\33\1\34"+
    "\1\35\1\36\1\37\1\40\1\41\1\42\1\43\1\44"+
    "\1\43\1\2\2\45\1\2\3\0\1\46\1\47\1\3"+
    "\1\0\1\50\1\51\1\52\1\53\2\0\1\54\3\7"+
    "\1\0\1\55\1\0\1\56\1\57\1\60\1\0\1\61"+
    "\1\62\1\63\1\64\3\7\1\65\1\66\1\67\1\70"+
    "\1\71\1\72\1\73\1\74\14\7\1\75\3\7\1\76"+
    "\2\7\1\77\10\7\1\100\4\7\1\101\1\63\1\102"+
    "\1\103\1\104\1\105\1\106\1\107\1\110\1\111\1\112"+
    "\1\113\1\0\2\114\4\0\1\115\2\0\1\116\1\117"+
    "\1\0\1\120\2\7\1\121\1\0\1\122\1\64\4\7"+
    "\1\123\1\124\2\7\1\125\3\7\1\126\6\7\1\127"+
    "\1\7\1\130\4\7\1\131\15\7\1\132\2\7\1\133"+
    "\2\0\1\3\1\54\1\0\1\130\1\7\3\0\12\7"+
    "\1\134\3\7\1\135\1\7\1\136\11\7\1\137\2\7"+
    "\1\140\1\141\1\7\1\130\5\7\1\47\1\7\1\142"+
    "\2\143\2\0\2\7\1\144\3\7\1\145\1\7\1\146"+
    "\1\147\1\150\1\151\1\152\6\7\1\153\11\7\1\154"+
    "\2\7\2\0\1\155\1\156\13\7\1\157\1\160\1\7"+
    "\1\161\1\162\2\7\1\163\2\164\2\165\1\166\2\7"+
    "\1\167\1\170\1\171\4\7\1\172\1\173\1\174\1\7"+
    "\1\175\4\7\1\176\1\7\1\177\1\7\1\200\4\7"+
    "\1\201\1\202\3\7\1\203\1\204";

  private static int [] zzUnpackAction() {
    int [] result = new int[366];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\105\0\212\0\317\0\u0114\0\u0159\0\u019e\0\u01e3"+
    "\0\u0228\0\u026d\0\u02b2\0\u026d\0\u02f7\0\u033c\0\u0381\0\u03c6"+
    "\0\u040b\0\u0450\0\u0495\0\u04da\0\u051f\0\u0564\0\u05a9\0\u026d"+
    "\0\u026d\0\u05ee\0\u0633\0\u0678\0\u06bd\0\u026d\0\u026d\0\u026d"+
    "\0\u026d\0\u026d\0\u026d\0\u0702\0\u026d\0\u0747\0\u026d\0\u078c"+
    "\0\u07d1\0\u0816\0\u085b\0\u08a0\0\u08e5\0\u092a\0\u096f\0\u09b4"+
    "\0\u09f9\0\u0a3e\0\u0a83\0\u0ac8\0\u0b0d\0\u0b52\0\u0b97\0\u0bdc"+
    "\0\u0c21\0\u026d\0\u0c66\0\u026d\0\u0cab\0\u026d\0\u0cf0\0\u0d35"+
    "\0\u0d7a\0\u0dbf\0\u0e04\0\u026d\0\u0e49\0\u0e8e\0\u0ed3\0\u0f18"+
    "\0\u026d\0\u0f5d\0\u0fa2\0\u0fe7\0\u026d\0\u026d\0\u026d\0\u102c"+
    "\0\u1071\0\u10b6\0\u10fb\0\u1140\0\u1185\0\u11ca\0\u120f\0\u026d"+
    "\0\u1254\0\u026d\0\u026d\0\u1299\0\u12de\0\u1323\0\u026d\0\u026d"+
    "\0\u1368\0\u13ad\0\u13f2\0\u1437\0\u147c\0\u026d\0\u026d\0\u14c1"+
    "\0\u026d\0\u026d\0\u026d\0\u026d\0\u1506\0\u154b\0\u1590\0\u15d5"+
    "\0\u161a\0\u165f\0\u16a4\0\u16e9\0\u172e\0\u1773\0\u17b8\0\u17fd"+
    "\0\u0450\0\u1842\0\u1887\0\u18cc\0\u0450\0\u1911\0\u1956\0\u0450"+
    "\0\u199b\0\u19e0\0\u1a25\0\u1a6a\0\u1aaf\0\u1af4\0\u1b39\0\u1b7e"+
    "\0\u1bc3\0\u1c08\0\u1c4d\0\u1c92\0\u1cd7\0\u026d\0\u1d1c\0\u026d"+
    "\0\u026d\0\u026d\0\u026d\0\u026d\0\u026d\0\u026d\0\u026d\0\u026d"+
    "\0\u026d\0\u0dbf\0\u1d61\0\u026d\0\u0e49\0\u1da6\0\u026d\0\u1deb"+
    "\0\u026d\0\u1e30\0\u1e75\0\u1071\0\u10b6\0\u1eba\0\u0450\0\u1eff"+
    "\0\u1f44\0\u1f89\0\u1fce\0\u026d\0\u026d\0\u2013\0\u2058\0\u209d"+
    "\0\u20e2\0\u026d\0\u026d\0\u2127\0\u216c\0\u21b1\0\u21f6\0\u223b"+
    "\0\u2280\0\u0450\0\u22c5\0\u230a\0\u234f\0\u2394\0\u23d9\0\u241e"+
    "\0\u0450\0\u2463\0\u24a8\0\u24ed\0\u2532\0\u2577\0\u25bc\0\u0450"+
    "\0\u2601\0\u2646\0\u268b\0\u26d0\0\u2715\0\u275a\0\u279f\0\u27e4"+
    "\0\u2829\0\u286e\0\u28b3\0\u28f8\0\u293d\0\u0450\0\u2982\0\u29c7"+
    "\0\u026d\0\u2a0c\0\u2a51\0\u1e30\0\u2a96\0\u2a96\0\u2adb\0\u2b20"+
    "\0\u2b65\0\u2baa\0\u2bef\0\u2c34\0\u2c79\0\u2cbe\0\u2d03\0\u2d48"+
    "\0\u2d8d\0\u2dd2\0\u2e17\0\u2e5c\0\u2ea1\0\u0450\0\u2ee6\0\u2f2b"+
    "\0\u2f70\0\u0450\0\u2fb5\0\u0450\0\u2ffa\0\u303f\0\u3084\0\u30c9"+
    "\0\u310e\0\u3153\0\u3198\0\u31dd\0\u3222\0\u0450\0\u3267\0\u32ac"+
    "\0\u0450\0\u32f1\0\u3336\0\u0450\0\u337b\0\u33c0\0\u3405\0\u344a"+
    "\0\u348f\0\u026d\0\u34d4\0\u0450\0\u3519\0\u026d\0\u355e\0\u35a3"+
    "\0\u35e8\0\u362d\0\u0450\0\u3672\0\u36b7\0\u36fc\0\u3741\0\u3786"+
    "\0\u0450\0\u0450\0\u0450\0\u0450\0\u0450\0\u37cb\0\u3810\0\u3855"+
    "\0\u389a\0\u38df\0\u3924\0\u0450\0\u3969\0\u39ae\0\u39f3\0\u3a38"+
    "\0\u3a7d\0\u3ac2\0\u3b07\0\u3b4c\0\u3b91\0\u0450\0\u3bd6\0\u3c1b"+
    "\0\u3c60\0\u3ca5\0\u0450\0\u0450\0\u3cea\0\u3d2f\0\u3d74\0\u3db9"+
    "\0\u3dfe\0\u3e43\0\u3e88\0\u3ecd\0\u3f12\0\u3f57\0\u3f9c\0\u0450"+
    "\0\u0450\0\u3fe1\0\u0450\0\u0450\0\u4026\0\u406b\0\u0450\0\u40b0"+
    "\0\u026d\0\u40f5\0\u026d\0\u0450\0\u413a\0\u417f\0\u0450\0\u0450"+
    "\0\u41c4\0\u4209\0\u424e\0\u4293\0\u42d8\0\u0450\0\u431d\0\u0450"+
    "\0\u4362\0\u0450\0\u43a7\0\u43ec\0\u4431\0\u4476\0\u0450\0\u44bb"+
    "\0\u0450\0\u4500\0\u0450\0\u4545\0\u458a\0\u45cf\0\u4614\0\u0450"+
    "\0\u0450\0\u4659\0\u469e\0\u46e3\0\u0450\0\u0450";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[366];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\23\10\1\11\61\10\1\12\1\13\2\14\1\15\1\16"+
    "\1\17\1\20\1\21\1\22\1\23\1\22\1\20\1\24"+
    "\1\25\2\22\1\12\1\26\1\27\1\30\1\31\1\12"+
    "\1\14\1\32\1\33\1\22\1\34\1\35\1\36\1\37"+
    "\1\40\1\41\1\42\1\43\1\44\1\45\1\46\1\47"+
    "\1\50\1\22\1\51\1\52\1\53\1\54\1\55\1\22"+
    "\1\56\1\57\1\60\1\61\1\62\1\22\1\63\1\64"+
    "\2\22\1\65\1\66\1\67\1\70\1\71\1\72\1\73"+
    "\1\22\1\74\2\22\1\12\1\75\2\12\22\75\1\76"+
    "\56\75\1\77\1\100\2\12\21\100\1\76\57\100\1\101"+
    "\1\102\1\103\1\104\5\102\4\105\3\102\2\105\5\102"+
    "\2\12\1\102\2\105\14\102\23\105\6\102\1\105\1\102"+
    "\2\105\1\102\10\0\4\106\3\0\2\106\10\0\2\106"+
    "\14\0\23\106\6\0\1\106\1\0\2\106\2\0\1\107"+
    "\1\110\102\0\23\10\1\0\61\10\30\111\1\112\54\111"+
    "\107\0\1\14\106\0\1\113\1\114\25\0\1\115\56\0"+
    "\1\116\25\0\1\117\57\0\2\120\1\121\1\0\2\122"+
    "\1\120\1\0\1\123\74\0\2\20\4\0\1\20\1\0"+
    "\1\123\74\0\7\22\2\0\3\22\7\0\2\22\14\0"+
    "\6\22\1\124\14\22\6\0\1\22\1\0\2\22\7\0"+
    "\7\22\2\0\3\22\7\0\2\22\14\0\23\22\6\0"+
    "\1\22\1\0\2\22\7\0\7\22\2\0\3\22\7\0"+
    "\2\22\14\0\6\22\1\125\4\22\1\126\7\22\6\0"+
    "\1\22\1\0\2\22\7\0\2\127\4\0\1\127\1\130"+
    "\1\131\14\0\1\132\57\0\2\123\4\0\1\123\16\0"+
    "\1\133\61\0\4\134\3\0\2\134\1\0\1\135\6\0"+
    "\2\134\14\0\23\134\6\0\1\134\1\0\2\134\24\0"+
    "\1\136\7\0\1\137\1\140\104\0\1\141\56\0\7\22"+
    "\2\0\3\22\7\0\2\22\14\0\1\22\1\142\6\22"+
    "\1\143\2\22\1\144\7\22\6\0\1\22\1\0\2\22"+
    "\34\0\1\145\1\146\103\0\1\147\1\150\56\0\2\127"+
    "\4\0\1\127\1\0\1\131\14\0\1\151\1\152\6\0"+
    "\1\153\106\0\1\154\45\0\7\22\2\0\3\22\7\0"+
    "\2\22\14\0\1\22\1\155\3\22\1\156\1\157\1\160"+
    "\1\161\12\22\6\0\1\22\1\0\2\22\7\0\7\22"+
    "\2\0\3\22\7\0\2\22\14\0\1\22\1\162\10\22"+
    "\1\163\10\22\6\0\1\22\1\0\2\22\7\0\7\22"+
    "\2\0\3\22\7\0\2\22\14\0\6\22\1\164\1\165"+
    "\1\166\12\22\6\0\1\22\1\0\2\22\7\0\7\22"+
    "\2\0\3\22\7\0\1\22\1\167\14\0\13\22\1\170"+
    "\7\22\6\0\1\22\1\0\2\22\7\0\7\22\2\0"+
    "\3\22\7\0\2\22\14\0\1\171\1\22\1\172\12\22"+
    "\1\173\5\22\6\0\1\22\1\0\2\22\7\0\4\22"+
    "\1\174\2\22\2\0\3\22\7\0\2\22\14\0\13\22"+
    "\1\175\7\22\6\0\1\22\1\0\2\22\7\0\4\22"+
    "\1\176\2\22\2\0\3\22\7\0\2\22\14\0\2\22"+
    "\1\177\6\22\1\200\1\22\1\201\7\22\6\0\1\22"+
    "\1\0\2\22\7\0\7\22\2\0\3\22\7\0\2\22"+
    "\14\0\4\22\1\202\5\22\1\203\4\22\1\204\3\22"+
    "\6\0\1\22\1\0\2\22\7\0\2\22\1\205\4\22"+
    "\2\0\3\22\7\0\2\22\14\0\3\22\1\206\3\22"+
    "\1\207\13\22\6\0\1\22\1\0\2\22\7\0\7\22"+
    "\2\0\3\22\7\0\2\22\14\0\12\22\1\210\10\22"+
    "\6\0\1\22\1\0\2\22\7\0\7\22\2\0\3\22"+
    "\7\0\2\22\14\0\6\22\1\211\3\22\1\212\10\22"+
    "\6\0\1\22\1\0\2\22\7\0\7\22\2\0\3\22"+
    "\7\0\2\22\14\0\10\22\1\213\12\22\6\0\1\22"+
    "\1\0\2\22\7\0\7\22\2\0\3\22\7\0\1\22"+
    "\1\214\14\0\23\22\6\0\1\22\1\0\2\22\7\0"+
    "\7\22\2\0\3\22\7\0\2\22\14\0\7\22\1\215"+
    "\13\22\6\0\1\22\1\0\2\22\34\0\1\216\104\0"+
    "\1\217\104\0\1\220\40\0\1\221\43\0\1\222\41\0"+
    "\1\223\42\0\1\224\51\0\1\75\2\0\22\75\1\0"+
    "\56\75\26\0\1\225\23\0\1\226\1\0\1\227\6\0"+
    "\1\230\22\0\1\100\2\0\21\100\1\0\57\100\25\0"+
    "\1\231\24\0\1\226\1\0\1\227\6\0\1\230\22\0"+
    "\1\232\1\103\1\104\23\232\2\0\55\232\2\0\1\104"+
    "\102\0\1\232\1\233\1\234\3\232\7\235\2\232\3\235"+
    "\4\232\2\0\1\232\2\235\11\232\1\236\2\232\23\235"+
    "\6\232\1\235\1\232\2\235\1\232\6\0\7\106\2\0"+
    "\3\106\7\0\2\106\14\0\23\106\6\0\1\106\1\0"+
    "\2\106\45\0\1\237\41\0\1\107\42\0\1\237\71\0"+
    "\1\240\1\0\1\241\51\0\1\113\1\13\1\14\102\113"+
    "\5\242\1\243\77\242\6\0\2\120\4\0\1\120\1\0"+
    "\1\123\74\0\2\244\1\0\4\244\2\0\1\244\27\0"+
    "\1\244\2\0\1\244\4\0\1\244\1\0\1\244\1\0"+
    "\1\244\27\0\1\245\5\0\1\245\76\0\2\123\4\0"+
    "\1\123\2\0\1\246\41\0\1\246\31\0\7\22\2\0"+
    "\3\22\7\0\2\22\14\0\13\22\1\247\7\22\6\0"+
    "\1\22\1\0\2\22\7\0\7\22\2\0\3\22\7\0"+
    "\2\22\14\0\6\22\1\250\14\22\6\0\1\22\1\0"+
    "\2\22\7\0\7\22\2\0\3\22\7\0\2\22\14\0"+
    "\12\22\1\251\10\22\6\0\1\22\1\0\2\22\7\0"+
    "\2\127\4\0\1\127\1\0\1\123\74\0\2\123\4\0"+
    "\1\123\76\0\7\134\2\0\3\134\7\0\2\134\14\0"+
    "\23\134\6\0\1\134\1\0\2\134\11\0\4\252\3\0"+
    "\2\252\1\0\1\135\6\0\2\252\14\0\23\252\6\0"+
    "\1\252\1\0\2\252\24\0\1\253\7\0\1\254\53\0"+
    "\1\255\110\0\4\22\1\256\2\22\2\0\3\22\7\0"+
    "\2\22\14\0\23\22\6\0\1\22\1\0\2\22\7\0"+
    "\7\22\2\0\3\22\7\0\2\22\14\0\13\22\1\257"+
    "\7\22\6\0\1\22\1\0\2\22\7\0\7\22\2\0"+
    "\3\22\7\0\2\22\14\0\5\22\1\260\1\261\14\22"+
    "\6\0\1\22\1\0\2\22\34\0\1\262\104\0\1\263"+
    "\57\0\7\22\2\0\3\22\7\0\2\22\14\0\2\22"+
    "\1\264\20\22\6\0\1\22\1\0\2\22\7\0\7\22"+
    "\2\0\3\22\7\0\2\22\14\0\2\22\1\265\20\22"+
    "\6\0\1\22\1\0\2\22\7\0\7\22\2\0\3\22"+
    "\7\0\2\22\14\0\13\22\1\266\7\22\6\0\1\22"+
    "\1\0\2\22\7\0\7\22\2\0\3\22\7\0\2\22"+
    "\14\0\6\22\1\267\14\22\6\0\1\22\1\0\2\22"+
    "\7\0\7\22\2\0\3\22\7\0\2\22\14\0\7\22"+
    "\1\270\13\22\6\0\1\22\1\0\2\22\7\0\7\22"+
    "\2\0\3\22\7\0\2\22\14\0\7\22\1\271\13\22"+
    "\6\0\1\22\1\0\2\22\7\0\7\22\2\0\3\22"+
    "\7\0\2\22\14\0\17\22\1\272\3\22\6\0\1\22"+
    "\1\0\2\22\7\0\7\22\2\0\3\22\7\0\2\22"+
    "\14\0\2\22\1\273\20\22\6\0\1\22\1\0\2\22"+
    "\7\0\7\22\2\0\3\22\7\0\2\22\14\0\10\22"+
    "\1\274\12\22\6\0\1\22\1\0\2\22\7\0\7\22"+
    "\2\0\3\22\7\0\2\22\14\0\4\22\1\275\4\22"+
    "\1\276\11\22\6\0\1\22\1\0\2\22\7\0\7\22"+
    "\2\0\3\22\7\0\2\22\14\0\13\22\1\277\7\22"+
    "\6\0\1\22\1\0\2\22\7\0\7\22\2\0\3\22"+
    "\7\0\2\22\14\0\1\22\1\300\17\22\1\301\1\22"+
    "\6\0\1\22\1\0\2\22\7\0\7\22\2\0\3\22"+
    "\7\0\2\22\14\0\3\22\1\302\1\303\4\22\1\304"+
    "\11\22\6\0\1\22\1\0\2\22\7\0\7\22\2\0"+
    "\3\22\7\0\1\305\1\22\14\0\23\22\6\0\1\22"+
    "\1\0\2\22\7\0\7\22\2\0\3\22\7\0\2\22"+
    "\14\0\23\22\6\0\1\306\1\0\2\22\7\0\7\22"+
    "\2\0\3\22\7\0\2\22\14\0\11\22\1\307\11\22"+
    "\6\0\1\22\1\0\2\22\7\0\7\22\2\0\3\22"+
    "\7\0\2\22\14\0\14\22\1\310\6\22\6\0\1\22"+
    "\1\0\2\22\7\0\7\22\2\0\3\22\7\0\2\22"+
    "\14\0\13\22\1\311\7\22\6\0\1\22\1\0\2\22"+
    "\7\0\7\22\2\0\3\22\7\0\2\22\14\0\10\22"+
    "\1\312\2\22\1\313\7\22\6\0\1\22\1\0\2\22"+
    "\7\0\7\22\2\0\3\22\7\0\2\22\14\0\7\22"+
    "\1\314\13\22\6\0\1\22\1\0\2\22\7\0\7\22"+
    "\2\0\3\22\7\0\2\22\14\0\5\22\1\315\15\22"+
    "\6\0\1\22\1\0\2\22\7\0\7\22\2\0\3\22"+
    "\7\0\2\22\14\0\4\22\1\316\16\22\6\0\1\22"+
    "\1\0\2\22\7\0\7\22\2\0\3\22\7\0\1\22"+
    "\1\317\14\0\23\22\6\0\1\22\1\0\2\22\7\0"+
    "\7\22\2\0\3\22\7\0\2\22\14\0\11\22\1\320"+
    "\11\22\6\0\1\22\1\0\2\22\7\0\7\22\2\0"+
    "\3\22\7\0\2\22\14\0\4\22\1\321\3\22\1\322"+
    "\12\22\6\0\1\22\1\0\1\22\1\323\7\0\7\22"+
    "\2\0\3\22\7\0\2\22\14\0\1\22\1\324\21\22"+
    "\6\0\1\22\1\0\2\22\7\0\7\22\2\0\3\22"+
    "\7\0\2\22\14\0\1\325\22\22\6\0\1\22\1\0"+
    "\2\22\7\0\7\22\2\0\3\22\7\0\2\22\14\0"+
    "\13\22\1\326\7\22\6\0\1\22\1\0\2\22\7\0"+
    "\7\22\2\0\3\22\7\0\2\22\14\0\5\22\1\327"+
    "\15\22\6\0\1\22\1\0\2\22\7\0\7\22\2\0"+
    "\3\22\7\0\2\22\14\0\6\22\1\330\14\22\6\0"+
    "\1\22\1\0\2\22\34\0\1\331\53\0\1\234\102\0"+
    "\1\232\1\233\1\234\23\232\2\0\55\232\32\0\1\332"+
    "\52\0\5\242\1\333\103\242\1\334\1\333\77\242\6\0"+
    "\2\335\4\0\1\335\1\336\25\0\1\336\47\0\7\22"+
    "\2\0\3\22\7\0\2\22\14\0\7\22\1\337\13\22"+
    "\6\0\1\22\1\0\2\22\7\0\7\22\2\0\3\22"+
    "\7\0\2\22\14\0\10\22\1\340\12\22\6\0\1\22"+
    "\1\0\2\22\7\0\7\252\2\0\3\252\7\0\2\252"+
    "\14\0\23\252\6\0\1\252\1\0\2\252\11\0\4\341"+
    "\3\0\2\341\3\0\1\342\1\343\3\0\2\341\14\0"+
    "\23\341\6\0\1\341\1\0\2\341\7\0\7\22\2\0"+
    "\3\22\7\0\2\22\14\0\7\22\1\344\13\22\6\0"+
    "\1\22\1\0\2\22\7\0\7\22\2\0\3\22\7\0"+
    "\2\22\14\0\12\22\1\345\10\22\6\0\1\22\1\0"+
    "\2\22\7\0\7\22\2\0\3\22\7\0\2\22\14\0"+
    "\2\22\1\346\13\22\1\347\4\22\6\0\1\22\1\0"+
    "\2\22\7\0\7\22\2\0\3\22\7\0\2\22\14\0"+
    "\4\22\1\350\16\22\6\0\1\22\1\0\2\22\7\0"+
    "\7\22\2\0\3\22\7\0\2\22\14\0\3\22\1\351"+
    "\17\22\6\0\1\22\1\0\2\22\7\0\7\22\2\0"+
    "\3\22\7\0\2\22\14\0\10\22\1\352\12\22\6\0"+
    "\1\22\1\0\2\22\7\0\7\22\2\0\3\22\7\0"+
    "\2\22\14\0\12\22\1\353\10\22\6\0\1\22\1\0"+
    "\2\22\7\0\7\22\2\0\3\22\7\0\2\22\14\0"+
    "\10\22\1\354\12\22\6\0\1\22\1\0\2\22\7\0"+
    "\7\22\2\0\3\22\7\0\2\22\14\0\11\22\1\355"+
    "\11\22\6\0\1\22\1\0\2\22\7\0\7\22\2\0"+
    "\3\22\7\0\2\22\14\0\7\22\1\356\13\22\6\0"+
    "\1\22\1\0\2\22\7\0\7\22\2\0\3\22\7\0"+
    "\2\22\14\0\11\22\1\357\11\22\6\0\1\22\1\0"+
    "\2\22\7\0\7\22\2\0\3\22\7\0\2\22\14\0"+
    "\11\22\1\360\11\22\6\0\1\22\1\0\2\22\7\0"+
    "\7\22\2\0\3\22\7\0\2\22\14\0\3\22\1\361"+
    "\17\22\6\0\1\22\1\0\2\22\7\0\7\22\2\0"+
    "\3\22\7\0\2\22\14\0\12\22\1\362\10\22\6\0"+
    "\1\22\1\0\2\22\7\0\7\22\2\0\3\22\7\0"+
    "\2\22\14\0\6\22\1\363\14\22\6\0\1\22\1\0"+
    "\2\22\7\0\7\22\2\0\3\22\7\0\2\22\14\0"+
    "\12\22\1\364\10\22\6\0\1\22\1\0\2\22\7\0"+
    "\7\22\2\0\3\22\7\0\2\22\14\0\7\22\1\365"+
    "\13\22\6\0\1\22\1\0\2\22\7\0\7\22\2\0"+
    "\3\22\7\0\2\22\14\0\12\22\1\366\10\22\6\0"+
    "\1\22\1\0\2\22\7\0\7\22\2\0\3\22\7\0"+
    "\2\22\14\0\4\22\1\367\16\22\6\0\1\22\1\0"+
    "\2\22\7\0\7\22\2\0\3\22\7\0\2\22\14\0"+
    "\7\22\1\370\13\22\6\0\1\22\1\0\2\22\7\0"+
    "\7\22\2\0\3\22\7\0\2\22\14\0\12\22\1\371"+
    "\10\22\6\0\1\22\1\0\2\22\7\0\7\22\2\0"+
    "\3\22\7\0\2\22\14\0\4\22\1\372\16\22\6\0"+
    "\1\22\1\0\2\22\7\0\7\22\2\0\3\22\7\0"+
    "\2\22\14\0\10\22\1\373\12\22\6\0\1\22\1\0"+
    "\2\22\7\0\7\22\2\0\3\22\7\0\2\22\14\0"+
    "\4\22\1\374\16\22\6\0\1\22\1\0\2\22\7\0"+
    "\7\22\2\0\3\22\7\0\2\22\14\0\5\22\1\375"+
    "\15\22\6\0\1\22\1\0\2\22\7\0\7\22\2\0"+
    "\3\22\7\0\2\22\14\0\1\376\22\22\6\0\1\22"+
    "\1\0\2\22\7\0\7\22\2\0\3\22\7\0\2\22"+
    "\14\0\4\22\1\377\16\22\6\0\1\22\1\0\2\22"+
    "\7\0\7\22\2\0\3\22\7\0\2\22\14\0\12\22"+
    "\1\u0100\10\22\6\0\1\22\1\0\2\22\7\0\7\22"+
    "\2\0\3\22\7\0\2\22\14\0\6\22\1\u0101\14\22"+
    "\6\0\1\22\1\0\2\22\7\0\7\22\2\0\3\22"+
    "\7\0\2\22\14\0\12\22\1\u0102\10\22\6\0\1\22"+
    "\1\0\2\22\7\0\7\22\2\0\3\22\7\0\2\22"+
    "\14\0\1\22\1\u0103\21\22\6\0\1\22\1\0\2\22"+
    "\7\0\7\22\2\0\3\22\7\0\2\22\14\0\7\22"+
    "\1\u0104\13\22\6\0\1\22\1\0\2\22\7\0\7\22"+
    "\2\0\3\22\7\0\2\22\14\0\1\22\1\u0105\21\22"+
    "\6\0\1\22\1\0\2\22\7\0\4\22\1\u0106\2\22"+
    "\2\0\3\22\7\0\2\22\14\0\23\22\6\0\1\22"+
    "\1\0\2\22\7\0\7\22\2\0\3\22\7\0\2\22"+
    "\14\0\10\22\1\u0107\12\22\6\0\1\22\1\0\2\22"+
    "\7\0\7\22\2\0\3\22\7\0\2\22\14\0\7\22"+
    "\1\u0108\13\22\6\0\1\22\1\0\2\22\7\0\4\22"+
    "\1\u0109\2\22\2\0\3\22\7\0\2\22\14\0\23\22"+
    "\6\0\1\22\1\0\2\22\32\0\1\u010a\53\0\4\242"+
    "\1\14\1\333\77\242\6\0\2\335\4\0\1\335\76\0"+
    "\7\22\2\0\3\22\7\0\2\22\14\0\12\22\1\u010b"+
    "\10\22\6\0\1\22\1\0\2\22\7\0\7\22\2\0"+
    "\3\22\7\0\2\22\14\0\20\22\1\u010c\2\22\6\0"+
    "\1\22\1\0\2\22\2\0\1\u010d\1\u010e\3\0\7\341"+
    "\2\0\3\341\7\0\2\341\14\0\23\341\6\0\1\341"+
    "\1\0\2\341\11\0\4\u010f\3\0\2\u010f\10\0\2\u010f"+
    "\14\0\23\u010f\6\0\1\u010f\1\0\2\u010f\11\0\4\u0110"+
    "\3\0\2\u0110\10\0\2\u0110\14\0\23\u0110\6\0\1\u0110"+
    "\1\0\2\u0110\7\0\7\22\2\0\3\22\7\0\2\22"+
    "\14\0\5\22\1\u0111\15\22\6\0\1\22\1\0\2\22"+
    "\7\0\7\22\2\0\3\22\7\0\2\22\14\0\2\22"+
    "\1\u0112\20\22\6\0\1\22\1\0\2\22\7\0\7\22"+
    "\2\0\3\22\7\0\2\22\14\0\4\22\1\u0113\16\22"+
    "\6\0\1\22\1\0\2\22\7\0\7\22\2\0\3\22"+
    "\7\0\2\22\14\0\10\22\1\u0114\12\22\6\0\1\22"+
    "\1\0\2\22\7\0\7\22\2\0\3\22\7\0\2\22"+
    "\14\0\12\22\1\u0115\10\22\6\0\1\22\1\0\2\22"+
    "\7\0\7\22\2\0\3\22\7\0\2\22\14\0\4\22"+
    "\1\u0116\16\22\6\0\1\22\1\0\2\22\7\0\7\22"+
    "\2\0\3\22\7\0\2\22\14\0\7\22\1\u0117\13\22"+
    "\6\0\1\22\1\0\2\22\7\0\7\22\2\0\3\22"+
    "\7\0\2\22\14\0\10\22\1\u0118\12\22\6\0\1\22"+
    "\1\0\2\22\7\0\7\22\2\0\3\22\7\0\2\22"+
    "\14\0\4\22\1\u0104\16\22\6\0\1\22\1\0\2\22"+
    "\7\0\7\22\2\0\3\22\7\0\2\22\14\0\12\22"+
    "\1\u0119\10\22\6\0\1\22\1\0\2\22\7\0\7\22"+
    "\2\0\3\22\7\0\2\22\14\0\4\22\1\u011a\16\22"+
    "\6\0\1\22\1\0\2\22\7\0\7\22\2\0\3\22"+
    "\7\0\2\22\14\0\11\22\1\u011b\11\22\6\0\1\22"+
    "\1\0\2\22\7\0\7\22\2\0\3\22\7\0\1\22"+
    "\1\u011c\14\0\23\22\6\0\1\22\1\0\2\22\7\0"+
    "\7\22\2\0\3\22\7\0\2\22\14\0\17\22\1\u011d"+
    "\3\22\6\0\1\22\1\0\2\22\7\0\7\22\2\0"+
    "\3\22\7\0\2\22\14\0\1\22\1\u011e\21\22\6\0"+
    "\1\22\1\0\2\22\7\0\7\22\2\0\3\22\7\0"+
    "\2\22\14\0\13\22\1\u011f\6\22\1\u0120\6\0\1\22"+
    "\1\0\2\22\7\0\7\22\2\0\3\22\7\0\2\22"+
    "\14\0\10\22\1\u0121\12\22\6\0\1\22\1\0\2\22"+
    "\7\0\7\22\2\0\3\22\7\0\2\22\14\0\12\22"+
    "\1\u0122\10\22\6\0\1\22\1\0\2\22\7\0\7\22"+
    "\2\0\3\22\7\0\2\22\14\0\3\22\1\354\17\22"+
    "\6\0\1\22\1\0\2\22\7\0\7\22\2\0\3\22"+
    "\7\0\2\22\14\0\13\22\1\u0123\7\22\6\0\1\22"+
    "\1\0\2\22\7\0\7\22\2\0\3\22\7\0\2\22"+
    "\14\0\21\22\1\u0124\1\22\6\0\1\22\1\0\2\22"+
    "\7\0\7\22\2\0\3\22\7\0\2\22\14\0\5\22"+
    "\1\u0125\15\22\6\0\1\22\1\0\2\22\7\0\7\22"+
    "\2\0\3\22\7\0\2\22\14\0\2\22\1\u0126\20\22"+
    "\6\0\1\22\1\0\2\22\7\0\7\22\2\0\3\22"+
    "\7\0\2\22\14\0\3\22\1\u0127\17\22\6\0\1\22"+
    "\1\0\2\22\7\0\7\22\2\0\3\22\7\0\2\22"+
    "\14\0\2\22\1\u0128\20\22\6\0\1\22\1\0\2\22"+
    "\7\0\7\22\2\0\3\22\7\0\2\22\14\0\5\22"+
    "\1\u0129\15\22\6\0\1\22\1\0\2\22\7\0\7\22"+
    "\2\0\3\22\7\0\2\22\14\0\13\22\1\u012a\7\22"+
    "\6\0\1\22\1\0\2\22\7\0\7\22\2\0\3\22"+
    "\7\0\2\22\14\0\5\22\1\u012b\15\22\6\0\1\22"+
    "\1\0\2\22\7\0\7\22\2\0\3\22\7\0\2\22"+
    "\14\0\7\22\1\u012c\13\22\6\0\1\22\1\0\2\22"+
    "\7\0\7\22\2\0\3\22\7\0\2\22\14\0\1\22"+
    "\1\u012d\21\22\6\0\1\22\1\0\2\22\7\0\7\22"+
    "\2\0\3\22\7\0\2\22\14\0\12\22\1\u012e\10\22"+
    "\6\0\1\22\1\0\2\22\7\0\7\22\2\0\3\22"+
    "\7\0\2\22\14\0\10\22\1\u012f\12\22\6\0\1\22"+
    "\1\0\2\22\7\0\7\22\2\0\3\22\7\0\2\22"+
    "\14\0\10\22\1\u0130\12\22\6\0\1\22\1\0\2\22"+
    "\3\0\1\u010e\110\0\7\u010f\2\0\3\u010f\2\0\1\u0131"+
    "\4\0\2\u010f\14\0\23\u010f\6\0\1\u010f\1\0\2\u010f"+
    "\7\0\7\u0110\2\0\3\u0110\3\0\1\u0132\3\0\2\u0110"+
    "\14\0\23\u0110\6\0\1\u0110\1\0\2\u0110\7\0\7\22"+
    "\2\0\3\22\7\0\2\22\14\0\3\22\1\u0133\17\22"+
    "\6\0\1\22\1\0\2\22\7\0\7\22\2\0\3\22"+
    "\7\0\2\22\14\0\4\22\1\u0134\16\22\6\0\1\22"+
    "\1\0\2\22\7\0\7\22\2\0\3\22\7\0\2\22"+
    "\14\0\4\22\1\u0135\16\22\6\0\1\22\1\0\2\22"+
    "\7\0\7\22\2\0\3\22\7\0\2\22\14\0\3\22"+
    "\1\u0136\17\22\6\0\1\22\1\0\2\22\7\0\7\22"+
    "\2\0\3\22\7\0\2\22\14\0\5\22\1\u0137\15\22"+
    "\6\0\1\22\1\0\2\22\7\0\7\22\2\0\3\22"+
    "\7\0\2\22\14\0\7\22\1\u0138\13\22\6\0\1\22"+
    "\1\0\2\22\7\0\7\22\2\0\3\22\7\0\2\22"+
    "\14\0\3\22\1\u0139\17\22\6\0\1\22\1\0\2\22"+
    "\7\0\7\22\2\0\3\22\7\0\2\22\14\0\14\22"+
    "\1\u013a\6\22\6\0\1\22\1\0\2\22\7\0\7\22"+
    "\2\0\3\22\7\0\2\22\14\0\1\u013b\22\22\6\0"+
    "\1\22\1\0\2\22\7\0\7\22\2\0\3\22\7\0"+
    "\2\22\14\0\12\22\1\u013c\10\22\6\0\1\22\1\0"+
    "\2\22\7\0\7\22\2\0\3\22\7\0\2\22\14\0"+
    "\2\22\1\u013d\20\22\6\0\1\22\1\0\2\22\7\0"+
    "\7\22\2\0\3\22\7\0\2\22\14\0\15\22\1\u013e"+
    "\5\22\6\0\1\22\1\0\2\22\7\0\7\22\2\0"+
    "\3\22\7\0\2\22\14\0\10\22\1\u013f\12\22\6\0"+
    "\1\22\1\0\2\22\7\0\7\22\2\0\3\22\7\0"+
    "\2\22\14\0\3\22\1\u0140\17\22\6\0\1\22\1\0"+
    "\2\22\7\0\7\22\2\0\3\22\7\0\2\22\14\0"+
    "\22\22\1\u0104\6\0\1\22\1\0\2\22\7\0\7\22"+
    "\2\0\3\22\7\0\1\22\1\u0141\14\0\23\22\6\0"+
    "\1\22\1\0\2\22\7\0\7\22\2\0\3\22\7\0"+
    "\2\22\14\0\14\22\1\u0142\6\22\6\0\1\22\1\0"+
    "\2\22\7\0\7\22\2\0\3\22\7\0\2\22\14\0"+
    "\1\u0143\22\22\6\0\1\22\1\0\2\22\7\0\7\22"+
    "\2\0\3\22\7\0\2\22\14\0\2\22\1\u0144\20\22"+
    "\6\0\1\22\1\0\2\22\7\0\7\22\2\0\3\22"+
    "\7\0\2\22\14\0\13\22\1\u0145\7\22\6\0\1\22"+
    "\1\0\2\22\7\0\7\22\2\0\3\22\7\0\2\22"+
    "\14\0\12\22\1\u0104\10\22\6\0\1\22\1\0\2\22"+
    "\7\0\7\22\2\0\3\22\7\0\2\22\14\0\7\22"+
    "\1\u0146\13\22\6\0\1\22\1\0\2\22\7\0\7\22"+
    "\2\0\3\22\7\0\2\22\14\0\7\22\1\u0147\13\22"+
    "\6\0\1\22\1\0\2\22\7\0\7\22\2\0\3\22"+
    "\7\0\2\22\14\0\2\22\1\u0104\20\22\6\0\1\22"+
    "\1\0\2\22\2\0\1\u0148\1\u0149\103\0\1\u014a\1\u014b"+
    "\110\0\7\22\2\0\3\22\7\0\2\22\14\0\12\22"+
    "\1\u014c\10\22\6\0\1\22\1\0\2\22\7\0\7\22"+
    "\2\0\3\22\7\0\2\22\14\0\4\22\1\u014d\16\22"+
    "\6\0\1\22\1\0\2\22\7\0\7\22\2\0\3\22"+
    "\7\0\2\22\14\0\6\22\1\u014e\14\22\6\0\1\22"+
    "\1\0\2\22\7\0\7\22\2\0\3\22\7\0\2\22"+
    "\14\0\21\22\1\u014f\1\22\6\0\1\22\1\0\2\22"+
    "\7\0\7\22\2\0\3\22\7\0\1\22\1\u0150\14\0"+
    "\23\22\6\0\1\22\1\0\2\22\7\0\7\22\2\0"+
    "\3\22\7\0\2\22\14\0\12\22\1\u0151\10\22\6\0"+
    "\1\22\1\0\2\22\7\0\7\22\2\0\3\22\7\0"+
    "\2\22\14\0\10\22\1\u0152\12\22\6\0\1\22\1\0"+
    "\2\22\7\0\7\22\2\0\3\22\7\0\2\22\14\0"+
    "\13\22\1\u0104\7\22\6\0\1\22\1\0\2\22\7\0"+
    "\7\22\2\0\3\22\7\0\2\22\14\0\3\22\1\u0153"+
    "\17\22\6\0\1\22\1\0\2\22\7\0\7\22\2\0"+
    "\3\22\7\0\2\22\14\0\12\22\1\u0154\10\22\6\0"+
    "\1\22\1\0\2\22\7\0\7\22\2\0\3\22\7\0"+
    "\2\22\14\0\3\22\1\u0155\17\22\6\0\1\22\1\0"+
    "\2\22\7\0\7\22\2\0\3\22\7\0\2\22\14\0"+
    "\11\22\1\u0156\11\22\6\0\1\22\1\0\2\22\7\0"+
    "\7\22\2\0\3\22\7\0\2\22\14\0\12\22\1\u0157"+
    "\10\22\6\0\1\22\1\0\2\22\7\0\7\22\2\0"+
    "\3\22\7\0\2\22\14\0\4\22\1\u0158\16\22\6\0"+
    "\1\22\1\0\2\22\3\0\1\u0149\104\0\1\u014b\110\0"+
    "\7\22\2\0\3\22\7\0\2\22\14\0\12\22\1\u0159"+
    "\10\22\6\0\1\22\1\0\2\22\7\0\7\22\2\0"+
    "\3\22\7\0\2\22\14\0\2\22\1\u015a\20\22\6\0"+
    "\1\22\1\0\2\22\7\0\7\22\2\0\3\22\7\0"+
    "\2\22\14\0\23\22\6\0\1\22\1\0\1\u015b\1\22"+
    "\7\0\7\22\2\0\3\22\7\0\2\22\14\0\3\22"+
    "\1\u015c\17\22\6\0\1\22\1\0\2\22\7\0\7\22"+
    "\2\0\3\22\7\0\2\22\14\0\12\22\1\u015d\10\22"+
    "\6\0\1\22\1\0\2\22\7\0\7\22\2\0\3\22"+
    "\7\0\2\22\14\0\2\22\1\u015e\20\22\6\0\1\22"+
    "\1\0\2\22\7\0\7\22\2\0\3\22\7\0\2\22"+
    "\14\0\4\22\1\u015f\16\22\6\0\1\22\1\0\2\22"+
    "\7\0\7\22\2\0\3\22\7\0\2\22\14\0\23\22"+
    "\6\0\1\22\1\0\1\u0160\1\22\7\0\7\22\2\0"+
    "\3\22\7\0\2\22\14\0\14\22\1\u0161\6\22\6\0"+
    "\1\22\1\0\2\22\7\0\7\22\2\0\3\22\7\0"+
    "\2\22\14\0\6\22\1\u0162\14\22\6\0\1\22\1\0"+
    "\2\22\7\0\7\22\2\0\3\22\7\0\2\22\14\0"+
    "\12\22\1\u0163\10\22\6\0\1\22\1\0\2\22\7\0"+
    "\7\22\2\0\3\22\7\0\2\22\14\0\6\22\1\u0164"+
    "\14\22\6\0\1\22\1\0\2\22\7\0\7\22\2\0"+
    "\3\22\7\0\2\22\14\0\4\22\1\u0165\16\22\6\0"+
    "\1\22\1\0\2\22\7\0\7\22\2\0\3\22\7\0"+
    "\2\22\14\0\6\22\1\u0166\14\22\6\0\1\22\1\0"+
    "\2\22\7\0\7\22\2\0\3\22\7\0\2\22\14\0"+
    "\2\22\1\u0167\20\22\6\0\1\22\1\0\2\22\7\0"+
    "\7\22\2\0\3\22\7\0\2\22\14\0\1\u0168\22\22"+
    "\6\0\1\22\1\0\2\22\7\0\7\22\2\0\3\22"+
    "\7\0\2\22\14\0\11\22\1\u0169\11\22\6\0\1\22"+
    "\1\0\2\22\7\0\7\22\2\0\3\22\7\0\2\22"+
    "\14\0\2\22\1\u016a\20\22\6\0\1\22\1\0\2\22"+
    "\7\0\7\22\2\0\3\22\7\0\2\22\14\0\3\22"+
    "\1\u016b\17\22\6\0\1\22\1\0\2\22\7\0\7\22"+
    "\2\0\3\22\7\0\2\22\14\0\3\22\1\u016c\17\22"+
    "\6\0\1\22\1\0\2\22\7\0\7\22\2\0\3\22"+
    "\7\0\2\22\14\0\12\22\1\u016d\10\22\6\0\1\22"+
    "\1\0\2\22\7\0\7\22\2\0\3\22\7\0\2\22"+
    "\14\0\12\22\1\u016e\10\22\6\0\1\22\1\0\2\22"+
    "\1\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[18216];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\7\0\2\1\1\11\1\1\1\11\13\1\2\11\4\1"+
    "\6\11\1\1\1\11\1\1\1\11\22\1\1\11\1\1"+
    "\1\11\1\1\1\11\5\1\1\11\4\1\1\11\2\1"+
    "\1\0\3\11\1\1\2\0\4\1\1\0\1\11\1\0"+
    "\2\11\1\1\1\0\1\1\2\11\5\1\2\11\1\1"+
    "\4\11\41\1\1\11\1\1\12\11\1\0\1\1\1\11"+
    "\2\0\1\11\1\0\1\11\2\0\2\1\1\0\4\1"+
    "\1\0\2\11\4\1\2\11\45\1\1\11\2\0\2\1"+
    "\1\0\2\1\3\0\46\1\1\11\3\1\1\11\2\0"+
    "\40\1\2\0\26\1\1\11\1\1\1\11\43\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[366];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /** For the backwards DFA of general lookahead statements */
  private boolean [] zzFin = new boolean [ZZ_BUFFERSIZE+1];

  /* user code: */

	private String filePath = null;
	private ComplexSymbolFactory symbolFactory = new ComplexSymbolFactory();
	private StringBuilder stringBuilder = new StringBuilder();
	private String heredocNowdocMarker;
	private boolean heredocNowdocVariableInterpolation;

	/**
	 * Setter method for the filePath.
	 * @param filePath the filePath to set
	 */
	public void setFilePath(String filePath) {
		this.filePath = filePath;
	}

	private Symbol symbol(int type) {
		String text = yytext();
		Location left = new Location(filePath, yyline, yycolumn);
		Location right = new Location(filePath, yyline, yycolumn + text.length());
		return symbolFactory.newSymbol(text, type, left, right);
	}
  
	private Symbol symbol(int type, Object value) {
		String text = yytext();
		Location left = new Location(filePath, yyline, yycolumn);
		Location right = new Location(filePath, yyline, yycolumn + text.length());
		return symbolFactory.newSymbol(text, type, left, right, value);
	}
	
	private void beginHeredocNowdoc(String markerContainer, boolean markerQuoted, boolean interpolateVariables) {
		markerContainer = markerContainer.trim();
		this.heredocNowdocMarker = markerContainer.substring(markerQuoted ? 4 : 3, markerContainer.length() - (markerQuoted ? 1 : 0));
		this.heredocNowdocVariableInterpolation = interpolateVariables;
		stringBuilder.setLength(0);
		yybegin(HEREDOC_NOWDOC);
	}
	
	private Symbol handleHeredocNowdocStopperCandidate(String identifier) {
		if (identifier.equals(heredocNowdocMarker)) {
			return buildHeredocNowdocString();
		} else {
			handleHeredocNowdocContent(identifier);
			return null;
		}
	}
	
	private void handleHeredocNowdocContent(String content) {
		stringBuilder.append(content);
	}
	
	private Symbol buildHeredocNowdocString() {
		// TODO interpolation
		yybegin(CODE); 
		return symbol(Tokens.STRING_LITERAL, stringBuilder.toString());
	}
	
	// may yield a float due to overflow
	private Number parseIntegerLiteral(String text, int radix) {
		try {
			return Integer.parseInt(text, radix);
		} catch (NumberFormatException e) {
			return new BigInteger(text, radix).doubleValue();
		}
	}
	


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Lexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 1942) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

    // numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  @Override
public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn++;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 1: 
          { return symbol(Tokens.VERBATIM_CONTENT, yytext());
          }
        case 133: break;
        case 2: 
          { String s = yytext();
	int code = s.charAt(0);
	throw new RuntimeException("Illegal character '" + yytext() + "' (code " + code + ")");
          }
        case 134: break;
        case 3: 
          { // ignore
          }
        case 135: break;
        case 4: 
          { return symbol(Tokens.DIVIDE);
          }
        case 136: break;
        case 5: 
          { return symbol(Tokens.TIMES);
          }
        case 137: break;
        case 6: 
          { return symbol(Tokens.INTEGER_LITERAL, parseIntegerLiteral(yytext(), 10));
          }
        case 138: break;
        case 7: 
          { return symbol(Tokens.IDENTIFIER, yytext());
          }
        case 139: break;
        case 8: 
          { return symbol(Tokens.PLUS);
          }
        case 140: break;
        case 9: 
          { return symbol(Tokens.CONCAT);
          }
        case 141: break;
        case 10: 
          { return symbol(Tokens.LESS);
          }
        case 142: break;
        case 11: 
          { stringBuilder.setLength(0);
		yybegin(DOUBLE_QUOTED_STRING);
          }
        case 143: break;
        case 12: 
          { stringBuilder.setLength(0);
		yybegin(SINGLE_QUOTED_STRING);
          }
        case 144: break;
        case 13: 
          { return symbol(Tokens.QUESTION_MARK);
          }
        case 145: break;
        case 14: 
          { return symbol(Tokens.ASSIGN);
          }
        case 146: break;
        case 15: 
          { return symbol(Tokens.GREATER);
          }
        case 147: break;
        case 16: 
          { return symbol(Tokens.OPENING_PARENTHESIS);
          }
        case 148: break;
        case 17: 
          { return symbol(Tokens.CLOSING_PARENTHESIS);
          }
        case 149: break;
        case 18: 
          { return symbol(Tokens.OPENING_CURLY_BRACE);
          }
        case 150: break;
        case 19: 
          { return symbol(Tokens.CLOSING_CURLY_BRACE);
          }
        case 151: break;
        case 20: 
          { return symbol(Tokens.OPENING_SQUARE_BRACKET);
          }
        case 152: break;
        case 21: 
          { return symbol(Tokens.CLOSING_SQUARE_BRACKET);
          }
        case 153: break;
        case 22: 
          { return symbol(Tokens.MINUS);
          }
        case 154: break;
        case 23: 
          { return symbol(Tokens.SEMICOLON);
          }
        case 155: break;
        case 24: 
          { return symbol(Tokens.COLON);
          }
        case 156: break;
        case 25: 
          { return symbol(Tokens.COMMA);
          }
        case 157: break;
        case 26: 
          { return symbol(Tokens.MOD);
          }
        case 158: break;
        case 27: 
          { return symbol(Tokens.LOGICAL_NOT);
          }
        case 159: break;
        case 28: 
          { return symbol(Tokens.BITWISE_AND);
          }
        case 160: break;
        case 29: 
          { return symbol(Tokens.BITWISE_OR);
          }
        case 161: break;
        case 30: 
          { return symbol(Tokens.BITWISE_NOT);
          }
        case 162: break;
        case 31: 
          { return symbol(Tokens.BITWISE_XOR);
          }
        case 163: break;
        case 32: 
          { return symbol(Tokens.SUPPRESS_ERRORS);
          }
        case 164: break;
        case 33: 
          { stringBuilder.append(yytext());
          }
        case 165: break;
        case 34: 
          { yybegin(CODE); 
		return symbol(Tokens.STRING_LITERAL, stringBuilder.toString());
          }
        case 166: break;
        case 35: 
          { stringBuilder.append('\\');
          }
        case 167: break;
        case 36: 
          { // TODO interpolate
		stringBuilder.append(yytext());
          }
        case 168: break;
        case 37: 
          { handleHeredocNowdocContent(yytext());
          }
        case 169: break;
        case 38: 
          // lookahead expression with fixed base length
          zzMarkedPos = zzStartRead + 1;
          { return symbol(Tokens.VERBATIM_CONTENT, yytext());
          }
        case 170: break;
        case 39: 
          { yybegin(CODE);
          }
        case 171: break;
        case 40: 
          { return symbol(Tokens.DIVIDE_ASSIGN);
          }
        case 172: break;
        case 41: 
          { return symbol(Tokens.POWER);
          }
        case 173: break;
        case 42: 
          { return symbol(Tokens.TIMES_ASSIGN);
          }
        case 174: break;
        case 43: 
          { String s = yytext();
		int index1 = s.indexOf('8');
		if (index1 != -1) {
			s = s.substring(0, index1);
		}
		int index2 = s.indexOf('9');
		if (index2 != -1) {
			s = s.substring(0, index2);
		}
		return symbol(Tokens.INTEGER_LITERAL, parseIntegerLiteral(s, 8));
          }
        case 175: break;
        case 44: 
          { return symbol(Tokens.FLOAT_LITERAL, Double.parseDouble(yytext()));
          }
        case 176: break;
        case 45: 
          { return symbol(Tokens.INCREMENT);
          }
        case 177: break;
        case 46: 
          { return symbol(Tokens.PLUS_ASSIGN);
          }
        case 178: break;
        case 47: 
          { return symbol(Tokens.CONCAT_ASSIGN);
          }
        case 179: break;
        case 48: 
          { return symbol(Tokens.LOCAL_VARIABLE_SINGLE_INDIRECTION, yytext().substring(1));
          }
        case 180: break;
        case 49: 
          { return symbol(Tokens.SHIFT_LEFT);
          }
        case 181: break;
        case 50: 
          { return symbol(Tokens.LESS_EQUAL);
          }
        case 182: break;
        case 51: 
          { return symbol(Tokens.NOT_EQUAL);
          }
        case 183: break;
        case 52: 
          { yybegin(YYINITIAL);
		return symbol(Tokens.SEMICOLON);
          }
        case 184: break;
        case 53: 
          { return symbol(Tokens.EQUAL);
          }
        case 185: break;
        case 54: 
          { return symbol(Tokens.DOUBLE_RIGHT_ARROW);
          }
        case 186: break;
        case 55: 
          { return symbol(Tokens.GREATER_EQUAL);
          }
        case 187: break;
        case 56: 
          { return symbol(Tokens.SHIFT_RIGHT);
          }
        case 188: break;
        case 57: 
          { return symbol(Tokens.MINUS_ASSIGN);
          }
        case 189: break;
        case 58: 
          { return symbol(Tokens.RIGHT_ARROW);
          }
        case 190: break;
        case 59: 
          { return symbol(Tokens.DECREMENT);
          }
        case 191: break;
        case 60: 
          { return symbol(Tokens.SCOPE_RESOLUTION);
          }
        case 192: break;
        case 61: 
          { return symbol(Tokens.IF);
          }
        case 193: break;
        case 62: 
          { return symbol(Tokens.LOW_PRECEDENCE_LOGICAL_SHORTCUT_OR);
          }
        case 194: break;
        case 63: 
          { return symbol(Tokens.AS);
          }
        case 195: break;
        case 64: 
          { return symbol(Tokens.DO);
          }
        case 196: break;
        case 65: 
          { return symbol(Tokens.MOD_ASSIGN);
          }
        case 197: break;
        case 66: 
          { return symbol(Tokens.BITWISE_AND_ASSIGN);
          }
        case 198: break;
        case 67: 
          { return symbol(Tokens.LOGICAL_SHORTCUT_AND);
          }
        case 199: break;
        case 68: 
          { return symbol(Tokens.BITWISE_OR_ASSIGN);
          }
        case 200: break;
        case 69: 
          { return symbol(Tokens.LOGICAL_SHORTCUT_OR);
          }
        case 201: break;
        case 70: 
          { return symbol(Tokens.BITWISE_XOR_ASSIGN);
          }
        case 202: break;
        case 71: 
          { stringBuilder.append('\'');
          }
        case 203: break;
        case 72: 
          { stringBuilder.append('\n');
          }
        case 204: break;
        case 73: 
          { stringBuilder.append('\t');
          }
        case 205: break;
        case 74: 
          { stringBuilder.append('\r');
          }
        case 206: break;
        case 75: 
          { stringBuilder.append('\"');
          }
        case 207: break;
        case 76: 
          // general lookahead, find correct zzMarkedPos
          { int zzFState = 5;
            int zzFPos = zzStartRead;
            if (zzFin.length <= zzBufferL.length) { zzFin = new boolean[zzBufferL.length+1]; }
            boolean zzFinL[] = zzFin;
            while (zzFState != -1 && zzFPos < zzMarkedPos) {
              zzFinL[zzFPos] = ((zzAttrL[zzFState] & 1) == 1);
              zzInput = zzBufferL[zzFPos++];
              zzFState = zzTransL[ zzRowMapL[zzFState] + zzCMapL[zzInput] ];
            }
            if (zzFState != -1) { zzFinL[zzFPos++] = ((zzAttrL[zzFState] & 1) == 1); } 
            while (zzFPos <= zzMarkedPos) {
              zzFinL[zzFPos++] = false;
            }

            zzFState = 6;
            zzFPos = zzMarkedPos;
            while (!zzFinL[zzFPos] || (zzAttrL[zzFState] & 1) != 1) {
              zzInput = zzBufferL[--zzFPos];
              zzFState = zzTransL[ zzRowMapL[zzFState] + zzCMapL[zzInput] ];
            };
            zzMarkedPos = zzFPos;
          }
          { Symbol s = handleHeredocNowdocStopperCandidate(yytext());
		if (s != null) {
			return s;
		}
          }
        case 208: break;
        case 77: 
          { yybegin(CODE);
		return symbol(Tokens.IDENTIFIER, "echo");
          }
        case 209: break;
        case 78: 
          { return symbol(Tokens.INTEGER_LITERAL, parseIntegerLiteral(yytext().substring(2), 16));
          }
        case 210: break;
        case 79: 
          { return symbol(Tokens.INTEGER_LITERAL, parseIntegerLiteral(yytext().substring(2), 2));
          }
        case 211: break;
        case 80: 
          { return symbol(Tokens.LOW_PRECEDENCE_LOGICAL_XOR);
          }
        case 212: break;
        case 81: 
          { return symbol(Tokens.LOCAL_VARIABLE_MULTI_INDIRECTION, LocalVariableExpression.parse(yytext()));
          }
        case 213: break;
        case 82: 
          { return symbol(Tokens.SHIFT_LEFT_ASSIGN);
          }
        case 214: break;
        case 83: 
          { return symbol(Tokens.IDENTICAL);
          }
        case 215: break;
        case 84: 
          { return symbol(Tokens.SHIFT_RIGHT_ASSIGN);
          }
        case 216: break;
        case 85: 
          { return symbol(Tokens.FOR);
          }
        case 217: break;
        case 86: 
          { return symbol(Tokens.NEW);
          }
        case 218: break;
        case 87: 
          { return symbol(Tokens.TRY);
          }
        case 219: break;
        case 88: 
          { return symbol(Tokens.CAST_TYPE_NAME, yytext());
          }
        case 220: break;
        case 89: 
          { return symbol(Tokens.LOW_PRECEDENCE_LOGICAL_SHORTCUT_AND);
          }
        case 221: break;
        case 90: 
          { return symbol(Tokens.VAR);
          }
        case 222: break;
        case 91: 
          { return symbol(Tokens.NOT_IDENTICAL);
          }
        case 223: break;
        case 92: 
          { return symbol(Tokens.NULL_LITERAL);
          }
        case 224: break;
        case 93: 
          { return symbol(Tokens.CASE);
          }
        case 225: break;
        case 94: 
          { return symbol(Tokens.BOOLEAN_LITERAL, true);
          }
        case 226: break;
        case 95: 
          { return symbol(Tokens.SELF);
          }
        case 227: break;
        case 96: 
          { return symbol(Tokens.ECHO);
          }
        case 228: break;
        case 97: 
          { return symbol(Tokens.ELSE);
          }
        case 229: break;
        case 98: 
          { return symbol(Tokens.BREAK);
          }
        case 230: break;
        case 99: 
          { beginHeredocNowdoc(yytext(), false, true);
          }
        case 231: break;
        case 100: 
          { return symbol(Tokens.PRINT);
          }
        case 232: break;
        case 101: 
          { return symbol(Tokens.FINAL);
          }
        case 233: break;
        case 102: 
          { return symbol(Tokens.BOOLEAN_LITERAL, false);
          }
        case 234: break;
        case 103: 
          { return symbol(Tokens.CONST);
          }
        case 235: break;
        case 104: 
          { return symbol(Tokens.CLASS);
          }
        case 236: break;
        case 105: 
          { return symbol(Tokens.CATCH);
          }
        case 237: break;
        case 106: 
          { return symbol(Tokens.THROW);
          }
        case 238: break;
        case 107: 
          { return symbol(Tokens.ARRAY);
          }
        case 239: break;
        case 108: 
          { return symbol(Tokens.WHILE);
          }
        case 240: break;
        case 109: 
          { return symbol(Tokens.PUBLIC);
          }
        case 241: break;
        case 110: 
          { return symbol(Tokens.PARENT);
          }
        case 242: break;
        case 111: 
          { return symbol(Tokens.STATIC);
          }
        case 243: break;
        case 112: 
          { return symbol(Tokens.SWITCH);
          }
        case 244: break;
        case 113: 
          { return symbol(Tokens.ELSEIF);
          }
        case 245: break;
        case 114: 
          { return symbol(Tokens.RETURN);
          }
        case 246: break;
        case 115: 
          { return symbol(Tokens.GLOBAL);
          }
        case 247: break;
        case 116: 
          { beginHeredocNowdoc(yytext(), true, true);
          }
        case 248: break;
        case 117: 
          { beginHeredocNowdoc(yytext(), true, false);
          }
        case 249: break;
        case 118: 
          { return symbol(Tokens.PRIVATE);
          }
        case 250: break;
        case 119: 
          { return symbol(Tokens.FINALLY);
          }
        case 251: break;
        case 120: 
          { return symbol(Tokens.FOREACH);
          }
        case 252: break;
        case 121: 
          { return symbol(Tokens.INCLUDE);
          }
        case 253: break;
        case 122: 
          { return symbol(Tokens.EXTENDS);
          }
        case 254: break;
        case 123: 
          { return symbol(Tokens.REQUIRE);
          }
        case 255: break;
        case 124: 
          { return symbol(Tokens.DEFAULT);
          }
        case 256: break;
        case 125: 
          { return symbol(Tokens.FUNCTION);
          }
        case 257: break;
        case 126: 
          { return symbol(Tokens.ABSTRACT);
          }
        case 258: break;
        case 127: 
          { return symbol(Tokens.PROTECTED);
          }
        case 259: break;
        case 128: 
          { return symbol(Tokens.INTERFACE);
          }
        case 260: break;
        case 129: 
          { return symbol(Tokens.INSTANCEOF);
          }
        case 261: break;
        case 130: 
          { return symbol(Tokens.IMPLEMENTS);
          }
        case 262: break;
        case 131: 
          { return symbol(Tokens.INCLUDE_ONCE);
          }
        case 263: break;
        case 132: 
          { return symbol(Tokens.REQUIRE_ONCE);
          }
        case 264: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
              { 	Location location = new Location(filePath, yyline, yycolumn);
	return symbolFactory.newSymbol("EOF", Tokens.EOF, location, location); 
 }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
