
// ------------------------------------------------------------------------------------
// --- header information
// ------------------------------------------------------------------------------------

import java_cup.runtime.*;
import name.martingeisse.phunky.runtime.code.*;
import name.martingeisse.phunky.runtime.code.expression.*;
import name.martingeisse.phunky.runtime.code.statement.*;
import name.martingeisse.phunky.runtime.code.declaration.*;
import java_cup.runtime.ComplexSymbolFactory.ComplexSymbol;
import java_cup.runtime.Symbol;
import java.util.List;
import java.util.ArrayList;
import org.apache.commons.lang3.tuple.Pair;

// scanner behavior
init with {:
:};
scan with {:
	return getScanner().next_token();
:};
parser code {:

	/* (non-Javadoc)
	 * @see java_cup.runtime.lr_parser#syntax_error(java_cup.runtime.Symbol)
	 */
	@Override
	public void syntax_error(final Symbol token) {
		if (token instanceof ComplexSymbol) {
			
			ComplexSymbol complexSymbol = (ComplexSymbol)token;
			int line = complexSymbol.getLeft().getLine();
			int column = complexSymbol.getLeft().getColumn();
			System.err.println("Syntax error at line " + line + ", col " + column + ", symbol " + complexSymbol.sym + ", value " + complexSymbol.value);
			
			System.err.print("Valid symbols at this point:");
			int state = ((Symbol)stack.peek()).parse_state;
			short[] actionRow = action_tab[state];
			for (int i=0; i<actionRow.length; i+=2) {
				if (actionRow[i + 1] != 0) {
					System.err.print(" " + actionRow[i]);
				}
			}
			System.err.println();
			
		} else {
			super.syntax_error(token);
		}
	}

:}

// ------------------------------------------------------------------------------------
// --- symbols
// ------------------------------------------------------------------------------------

// embedding in verbatim content
terminal String VERBATIM_CONTENT;

// punctuation (some of these can be operators too)
terminal OPENING_PARENTHESIS, CLOSING_PARENTHESIS;
terminal OPENING_CURLY_BRACE, CLOSING_CURLY_BRACE;
terminal OPENING_SQUARE_BRACKET, CLOSING_SQUARE_BRACKET;
terminal RIGHT_ARROW;
terminal SEMICOLON;
terminal SCOPE_RESOLUTION;
terminal QUESTION_MARK;
terminal COLON;
terminal COMMA;

// compilation object keywords
terminal FUNCTION, CLASS, INTERFACE, EXTENDS, IMPLEMENTS;

// modifier keywords
terminal PUBLIC, PROTECTED, PRIVATE;
terminal STATIC, ABSTRACT, FINAL;
terminal VAR, CONST;

// statement keywords
terminal FOR, FOREACH, UNTIL, DO, WHILE, BREAK;
terminal IF, ELSEIF, ELSE;
terminal RETURN;
terminal THROW, TRY, CATCH, FINALLY;
terminal GLOBAL;
terminal ECHO;

// computation and logical operators
terminal PLUS, MINUS, TIMES, DIVIDE, MOD;
terminal LOGICAL_NOT, SHORTCUT_AND, SHORTCUT_OR;
terminal BITWISE_NOT, BITWISE_AND, BITWISE_OR, BITWISE_XOR;
terminal SHIFT_LEFT, SHIFT_RIGHT;

// comparison operators
terminal EQUAL, NOT_EQUAL, IDENTICAL, NOT_IDENTICAL;
terminal GREATER, LESS, GREATER_EQUAL, LESS_EQUAL;

// assignment operators
terminal ASSIGN;
terminal INCREMENT, DECREMENT;
terminal PLUS_ASSIGN, MINUS_ASSIGN, TIMES_ASSIGN, DIVIDE_ASSIGN, MOD_ASSIGN;
terminal BITWISE_AND_ASSIGN, BITWISE_OR_ASSIGN, BITWISE_XOR_ASSIGN;
terminal SHIFT_LEFT_ASSIGN, SHIFT_RIGHT_ASSIGN;

// special expressions
terminal ARRAY;
terminal SELF;
terminal PARENT;

// primitive expressions
terminal NULL_LITERAL;
terminal Boolean BOOLEAN_LITERAL;
terminal Integer INTEGER_LITERAL;
terminal String STRING_LITERAL;
terminal String IDENTIFIER;
terminal String LOCAL_VARIABLE;

// non terminals (general)
non terminal StatementSequence program;
non terminal List<Statement> statements;
non terminal Statement statement;
non terminal List<Expression> expressions;
non terminal List<Expression> one_or_more_expressions;
non terminal Expression expression;
non terminal List<Pair<Expression, Expression>> array_literal_elements;
non terminal List<Pair<Expression, Expression>> one_or_more_array_literal_elements;
non terminal Pair<Expression, Expression> array_literal_element;
non terminal List<String> parameter_declarations;
non terminal List<String> one_or_more_parameter_declarations;
non terminal String parameter_declaration;

// non terminals (OOP)
non terminal OopTypeDefinition oop_type_definition;
non terminal String oop_class_extends_clause;
non terminal List<String> oop_class_implements_clause;
non terminal List<String> oop_interface_extends_clause;
non terminal List<String> interface_references;
non terminal List<String> one_or_more_interface_references;
non terminal String interface_reference;
non terminal List<OopMemberDefinition> oop_member_definitions;
non terminal OopMemberDefinition oop_member_definition;
non terminal List<OopEntityModifier> oop_entity_modifiers;
non terminal OopEntityModifier oop_entity_modifier;

// precedences
precedence left SEMICOLON; // needed for error recovery
precedence right ASSIGN;
precedence left PLUS, MINUS;
precedence left TIMES, DIVIDE, MOD;


// ------------------------------------------------------------------------------------
// --- general productions
// ------------------------------------------------------------------------------------

start with program;

program ::=
	statements:sts
		{: RESULT = new StatementSequence(sts); :}
;

// ------------------------------------------------------------------------------------
// --- statement productions
// ------------------------------------------------------------------------------------

statements ::=
		{: RESULT = new ArrayList<Statement>(); :}
	| statements:sts statement:st
		{: sts.add(st); RESULT = sts; :}
;

statement ::=
	SEMICOLON
		{: RESULT = new NopStatement(); :} 
	| expression:e SEMICOLON
		{: RESULT = new ExpressionStatement(e); :}
	| OPENING_CURLY_BRACE statements:sts CLOSING_CURLY_BRACE
		{: RESULT = new StatementSequence(sts); :}
	| VERBATIM_CONTENT:c
		{: RESULT = new ExpressionStatement(new FunctionCall("echo", new LiteralExpression(c))); :}
		 
	| ECHO one_or_more_expressions:exs SEMICOLON
		{: RESULT = new ExpressionStatement(new FunctionCall("echo", exs.toArray(new Expression[exs.size()]))); :}
	| GLOBAL LOCAL_VARIABLE:v SEMICOLON
		{: RESULT = new GlobalStatement(v); :}
		
	| FUNCTION IDENTIFIER:id OPENING_PARENTHESIS parameter_declarations:decls CLOSING_PARENTHESIS OPENING_CURLY_BRACE statements:sts CLOSING_CURLY_BRACE
		{: RESULT = new FunctionDefinition(id, decls.toArray(new String[decls.size()]), new StatementSequence(sts)); :}
	| oop_type_definition:def
		{: RESULT = def; :}
		
	| error SEMICOLON
		{: System.err.println("syntax error"); RESULT = new NopStatement(); :}
;

// ------------------------------------------------------------------------------------
// --- expression productions
// ------------------------------------------------------------------------------------

expressions ::=
		{: RESULT = new ArrayList<Expression>(); :}
	| one_or_more_expressions:exs
		{: RESULT = exs; :}
;

one_or_more_expressions ::=
	expression:ex
		{: RESULT = new ArrayList<Expression>(); RESULT.add(ex); :}
	| one_or_more_expressions:exs COMMA expression:ex
		{: exs.add(ex); RESULT = exs; :}
;

expression ::=

	BOOLEAN_LITERAL:e
		{: RESULT = new LiteralExpression(e); :}
	| INTEGER_LITERAL:e
		{: RESULT = new LiteralExpression(e); :}
	| STRING_LITERAL:e 
		{: RESULT = new LiteralExpression(e); :}
	| LOCAL_VARIABLE:id
		{: RESULT = new LocalVariableExpression(id); :}
	| IDENTIFIER:id
		{: RESULT = new ConstantExpression(id); :}
	| OPENING_PARENTHESIS expression:e CLOSING_PARENTHESIS
		{: RESULT = e; :}
	
	| expression:e1 PLUS expression:e2
		{: RESULT = new BinaryExpression(e1, BinaryOperator.ADD, e2); :} 
	| expression:e1 MINUS expression:e2
		{: RESULT = new BinaryExpression(e1, BinaryOperator.SUBTRACT, e2); :} 
	| expression:e1 TIMES expression:e2
		{: RESULT = new BinaryExpression(e1, BinaryOperator.MULTIPLY, e2); :} 
	| expression:e1 DIVIDE expression:e2
		{: RESULT = new BinaryExpression(e1, BinaryOperator.DIVIDE, e2); :} 
	| expression:e1 MOD expression:e2
		{: RESULT = new BinaryExpression(e1, BinaryOperator.REMAINDER, e2); :} 
	| expression:e1 ASSIGN expression:e2
		{: RESULT = new BinaryExpression(e1, BinaryOperator.ASSIGN, e2); :}

	| IDENTIFIER:id OPENING_PARENTHESIS expressions:exs CLOSING_PARENTHESIS
		{: RESULT = ParserHelper.buildFunctionCallLikeExpression(idxleft, id, exs); :}
	| ARRAY OPENING_PARENTHESIS array_literal_elements:els CLOSING_PARENTHESIS
		{: RESULT = new ArrayConstructionExpression(els); :}

	| error
		{: RESULT = new LiteralExpression(null); :}
;

array_literal_elements ::=
		{: RESULT = new ArrayList<Pair<Expression, Expression>>(); :}
	| one_or_more_array_literal_elements:els
		{: RESULT = els; :}
;

one_or_more_array_literal_elements ::=
	array_literal_element:el
		{: RESULT = new ArrayList<Pair<Expression, Expression>>(); RESULT.add(el); :}
	| one_or_more_array_literal_elements:els COMMA array_literal_element:el
		{: els.add(el); RESULT = els; :}
;

array_literal_element ::=
	expression:v
		{: RESULT = Pair.of(null, v); :}
	| expression:k RIGHT_ARROW expression:v
		{: RESULT = Pair.of(k, v); :}
;

// ------------------------------------------------------------------------------------
// --- function definition productions
// ------------------------------------------------------------------------------------

parameter_declarations ::=
		{: RESULT = new ArrayList<String>(); :}
	| one_or_more_parameter_declarations:decls
		{: RESULT = decls; :}
;

one_or_more_parameter_declarations ::=
	parameter_declaration:decl
		{: RESULT = new ArrayList<String>(); RESULT.add(decl); :}
	| one_or_more_parameter_declarations:decls COMMA parameter_declaration:decl
		{: decls.add(decl); RESULT = decls; :}
;

parameter_declaration ::=
	LOCAL_VARIABLE:v
		{: RESULT = v; :}
;

// ------------------------------------------------------------------------------------
// --- OOP type definition productions
// ------------------------------------------------------------------------------------

oop_type_definition ::= 
	CLASS IDENTIFIER:id oop_class_extends_clause oop_class_implements_clause OPENING_CURLY_BRACE oop_member_definitions:members CLOSING_CURLY_BRACE
		{: :}
	| INTERFACE IDENTIFIER:id oop_interface_extends_clause OPENING_CURLY_BRACE oop_member_definitions:members CLOSING_CURLY_BRACE
		{: :}
;

oop_class_extends_clause ::=
		{: :}
	| EXTENDS IDENTIFIER:id
		{: :}
;		

oop_class_implements_clause ::=
		{: :}
	| IMPLEMENTS interface_references:itfs
		{: :}
;		

oop_interface_extends_clause ::=
		{: :}
	| EXTENDS interface_references:itfs
		{: :}
;

interface_references ::=
		{: RESULT = new ArrayList<String>(); :}
	| one_or_more_interface_references:itfs
		{: RESULT = itfs; :}
;

one_or_more_interface_references ::=
	interface_reference:itf
		{: RESULT = new ArrayList<String>(); RESULT.add(itf); :}
	| one_or_more_interface_references:itfs COMMA interface_reference:itf
		{: itfs.add(itf); RESULT = itfs; :}
;

interface_reference ::=
	IDENTIFIER:id
		{: RESULT = id; :}
;

// ------------------------------------------------------------------------------------
// --- OOP member definition productions
// ------------------------------------------------------------------------------------

oop_member_definitions ::=
		{: RESULT = new ArrayList<OopMemberDefinition>(); :}
	| oop_member_definitions:mbrs oop_member_definition:mbr
		{: mbrs.add(mbr); RESULT = mbrs; :}
	;

oop_member_definition ::=
	CONST IDENTIFIER:id ASSIGN expression:e SEMICOLON
		{: :}
	| VAR LOCAL_VARIABLE:v SEMICOLON
		{: :}
	| oop_entity_modifiers:mods LOCAL_VARIABLE:v SEMICOLON
		{: :}
	| oop_entity_modifiers:mods FUNCTION IDENTIFIER:id OPENING_PARENTHESIS parameter_declarations:decls CLOSING_PARENTHESIS OPENING_CURLY_BRACE statements:sts CLOSING_CURLY_BRACE
		{: :}
;

// ------------------------------------------------------------------------------------
// --- OOP helper productions
// ------------------------------------------------------------------------------------

oop_entity_modifiers ::=
		{: RESULT = new ArrayList<OopEntityModifier>(); :}
	| oop_entity_modifiers:mods oop_entity_modifier:mod
		{: mods.add(mod); RESULT = mods; :}
;

oop_entity_modifier ::=
	PUBLIC
		{: :}
	| PROTECTED
		{: :}
	| PRIVATE
		{: :}
	| STATIC
		{: :}
	| ABSTRACT
		{: :}
	| FINAL
		{: :}
;
