/* The following code was generated by JFlex 1.5.1 */


// ---------------------------------------------------------------------------------------------------------
// --- header information
// ---------------------------------------------------------------------------------------------------------


// imports
package name.martingeisse.phunky.runtime.parser;
import java_cup.runtime.*;
import java_cup.runtime.ComplexSymbolFactory.Location;

/**
 * The Lexer.
 */

public class Lexer implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int CODE = 2;
  public static final int SINGLE_QUOTED_STRING = 4;
  public static final int DOUBLE_QUOTED_STRING = 6;
  public static final int HEREDOC_NOWDOC = 8;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  4, 4
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\3\1\2\1\16\1\17\1\1\22\0\1\3\1\66\1\14"+
    "\1\0\1\12\1\65\1\67\1\15\1\25\1\26\1\5\1\63\1\35"+
    "\1\64\1\0\1\4\1\6\11\7\1\34\1\33\1\13\1\23\1\24"+
    "\1\20\1\0\32\10\1\31\1\73\1\32\1\72\1\10\1\0\1\46"+
    "\1\55\1\41\1\53\1\50\1\36\1\62\1\22\1\43\1\10\1\60"+
    "\1\45\1\54\1\40\1\44\1\21\1\10\1\51\1\47\1\42\1\37"+
    "\1\56\1\57\1\52\1\61\1\10\1\27\1\70\1\30\1\71\6\0"+
    "\1\16\44\0\1\10\12\0\1\10\4\0\1\10\5\0\27\10\1\0"+
    "\37\10\1\0\u01ca\10\4\0\14\10\16\0\5\10\7\0\1\10\1\0"+
    "\1\10\126\0\1\10\52\0\5\10\1\0\2\10\2\0\4\10\10\0"+
    "\1\10\1\0\3\10\1\0\1\10\1\0\24\10\1\0\123\10\1\0"+
    "\213\10\10\0\236\10\11\0\46\10\2\0\1\10\7\0\47\10\50\0"+
    "\16\10\1\0\1\10\1\0\2\10\1\0\2\10\1\0\1\10\10\0"+
    "\33\10\5\0\3\10\35\0\13\10\5\0\70\10\1\0\7\10\12\11"+
    "\4\0\146\10\1\0\10\10\4\0\10\10\4\0\3\10\12\11\3\10"+
    "\2\0\1\10\20\0\60\10\15\0\145\10\16\0\12\11\41\10\11\0"+
    "\2\10\4\0\1\10\5\0\30\10\2\0\23\10\23\0\31\10\107\0"+
    "\1\10\1\0\13\10\67\0\6\10\6\0\17\10\1\0\74\10\1\0"+
    "\20\10\1\0\3\10\4\0\17\10\2\0\12\11\1\0\7\10\1\0"+
    "\7\10\1\0\3\10\1\0\10\10\2\0\2\10\2\0\26\10\1\0"+
    "\7\10\1\0\1\10\3\0\4\10\3\0\10\10\2\0\2\10\2\0"+
    "\2\10\1\0\1\10\10\0\1\10\4\0\2\10\1\0\5\10\2\0"+
    "\12\11\2\10\17\0\3\10\1\0\6\10\4\0\2\10\2\0\26\10"+
    "\1\0\7\10\1\0\2\10\1\0\2\10\1\0\2\10\4\0\5\10"+
    "\4\0\2\10\2\0\2\10\4\0\1\10\7\0\4\10\1\0\1\10"+
    "\7\0\12\11\6\10\13\0\3\10\1\0\11\10\1\0\3\10\1\0"+
    "\26\10\1\0\7\10\1\0\2\10\1\0\5\10\3\0\11\10\1\0"+
    "\3\10\1\0\2\10\3\0\1\10\17\0\4\10\2\0\12\11\21\0"+
    "\3\10\1\0\10\10\2\0\2\10\2\0\26\10\1\0\7\10\1\0"+
    "\2\10\1\0\5\10\3\0\10\10\2\0\2\10\2\0\2\10\11\0"+
    "\2\10\4\0\2\10\1\0\5\10\2\0\12\11\1\0\1\10\20\0"+
    "\2\10\1\0\6\10\3\0\3\10\1\0\4\10\3\0\2\10\1\0"+
    "\1\10\1\0\2\10\3\0\2\10\3\0\3\10\3\0\14\10\4\0"+
    "\5\10\3\0\3\10\1\0\3\10\3\0\1\10\6\0\1\10\16\0"+
    "\12\11\21\0\3\10\1\0\10\10\1\0\3\10\1\0\27\10\1\0"+
    "\12\10\1\0\5\10\3\0\10\10\1\0\3\10\1\0\3\10\10\0"+
    "\2\10\1\0\2\10\6\0\4\10\2\0\12\11\22\0\2\10\1\0"+
    "\10\10\1\0\3\10\1\0\27\10\1\0\12\10\1\0\5\10\3\0"+
    "\10\10\1\0\3\10\1\0\3\10\10\0\2\10\7\0\1\10\1\0"+
    "\4\10\2\0\12\11\1\0\2\10\17\0\2\10\1\0\10\10\1\0"+
    "\3\10\1\0\51\10\2\0\10\10\1\0\3\10\1\0\3\10\1\0"+
    "\1\10\10\0\1\10\10\0\4\10\2\0\12\11\12\0\6\10\2\0"+
    "\2\10\1\0\22\10\3\0\30\10\1\0\11\10\1\0\1\10\2\0"+
    "\7\10\10\0\6\10\1\0\1\10\1\0\10\10\22\0\2\10\15\0"+
    "\72\10\5\0\7\10\6\0\1\10\2\0\12\11\47\0\2\10\1\0"+
    "\1\10\2\0\2\10\1\0\1\10\2\0\1\10\6\0\4\10\1\0"+
    "\7\10\1\0\3\10\1\0\1\10\1\0\1\10\2\0\2\10\1\0"+
    "\15\10\1\0\3\10\2\0\5\10\1\0\1\10\6\0\1\10\2\0"+
    "\12\11\2\0\4\10\40\0\1\10\37\0\12\11\26\0\10\10\1\0"+
    "\44\10\4\0\21\10\6\0\20\10\1\0\44\10\103\0\67\10\1\0"+
    "\1\10\2\0\5\10\12\11\6\0\23\10\2\0\4\10\5\0\31\10"+
    "\7\0\1\10\1\0\12\11\2\0\2\10\2\0\46\10\1\0\1\10"+
    "\5\0\1\10\2\0\53\10\1\0\u014d\10\1\0\4\10\2\0\7\10"+
    "\1\0\1\10\1\0\4\10\2\0\51\10\1\0\4\10\2\0\41\10"+
    "\1\0\4\10\2\0\7\10\1\0\1\10\1\0\4\10\2\0\17\10"+
    "\1\0\71\10\1\0\4\10\2\0\103\10\4\0\1\10\40\0\20\10"+
    "\20\0\125\10\14\0\u026c\10\2\0\21\10\1\0\32\10\5\0\113\10"+
    "\3\0\3\10\17\0\15\10\1\0\6\10\14\0\24\10\14\0\24\10"+
    "\14\0\15\10\1\0\3\10\1\0\2\10\14\0\64\10\2\0\23\10"+
    "\16\0\1\10\4\0\1\10\3\0\12\11\46\0\12\11\6\0\130\10"+
    "\10\0\53\10\5\0\106\10\12\0\35\10\3\0\14\10\4\0\11\10"+
    "\15\0\12\11\36\10\2\0\5\10\13\0\54\10\4\0\32\10\6\0"+
    "\12\11\46\0\34\10\4\0\77\10\2\0\24\10\13\0\12\11\6\0"+
    "\12\11\15\0\1\10\130\0\64\10\1\0\17\10\1\0\7\10\4\0"+
    "\12\11\46\0\52\10\2\0\4\10\12\11\54\10\1\0\13\10\16\0"+
    "\66\10\12\0\12\11\3\0\3\10\12\11\44\10\153\0\4\10\1\0"+
    "\6\10\1\0\2\10\11\0\300\10\100\0\u0116\10\2\0\6\10\2\0"+
    "\46\10\2\0\6\10\2\0\10\10\1\0\1\10\1\0\1\10\1\0"+
    "\1\10\1\0\37\10\2\0\65\10\1\0\7\10\1\0\1\10\3\0"+
    "\3\10\1\0\7\10\3\0\4\10\2\0\6\10\4\0\15\10\5\0"+
    "\3\10\1\0\7\10\53\0\1\16\1\16\107\0\1\10\15\0\1\10"+
    "\20\0\15\10\145\0\1\10\4\0\1\10\2\0\12\10\1\0\1\10"+
    "\3\0\5\10\6\0\1\10\1\0\1\10\1\0\1\10\1\0\4\10"+
    "\1\0\13\10\2\0\4\10\5\0\5\10\4\0\1\10\21\0\51\10"+
    "\u032d\0\64\10\u0716\0\57\10\1\0\57\10\1\0\205\10\6\0\4\10"+
    "\3\0\2\10\14\0\46\10\1\0\1\10\5\0\1\10\2\0\70\10"+
    "\7\0\1\10\20\0\27\10\11\0\7\10\1\0\7\10\1\0\7\10"+
    "\1\0\7\10\1\0\7\10\1\0\7\10\1\0\7\10\1\0\7\10"+
    "\1\0\40\10\57\0\1\10\u01d5\0\3\10\31\0\11\10\7\0\5\10"+
    "\2\0\5\10\4\0\126\10\6\0\3\10\1\0\132\10\1\0\4\10"+
    "\5\0\51\10\3\0\136\10\21\0\33\10\65\0\20\10\u0200\0\u19b6\10"+
    "\112\0\u51cd\10\63\0\u048d\10\103\0\56\10\2\0\u010d\10\3\0\20\10"+
    "\12\11\2\10\24\0\57\10\5\0\10\10\3\0\31\10\7\0\121\10"+
    "\47\0\11\10\2\0\147\10\2\0\4\10\1\0\4\10\14\0\13\10"+
    "\115\0\12\10\1\0\3\10\1\0\4\10\1\0\34\10\30\0\64\10"+
    "\14\0\104\10\14\0\12\11\30\0\6\10\3\0\1\10\4\0\12\11"+
    "\41\10\5\0\43\10\15\0\35\10\3\0\63\10\1\0\14\10\17\0"+
    "\1\10\12\11\46\0\67\10\11\0\16\10\2\0\12\11\6\0\27\10"+
    "\3\0\1\10\5\0\77\10\1\0\1\10\1\0\1\10\30\0\3\10"+
    "\2\0\20\10\2\0\4\10\13\0\6\10\2\0\6\10\2\0\6\10"+
    "\11\0\7\10\1\0\7\10\221\0\53\10\5\0\12\11\6\0\u2ba4\10"+
    "\14\0\27\10\4\0\61\10\u2104\0\u016e\10\2\0\152\10\46\0\7\10"+
    "\14\0\5\10\5\0\14\10\1\0\15\10\1\0\5\10\1\0\1\10"+
    "\1\0\2\10\1\0\2\10\1\0\154\10\41\0\u016b\10\22\0\100\10"+
    "\2\0\66\10\50\0\14\10\164\0\5\10\1\0\207\10\23\0\12\11"+
    "\7\0\32\10\6\0\32\10\13\0\131\10\3\0\6\10\2\0\6\10"+
    "\2\0\6\10\2\0\3\10\43\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\7\0\1\1\2\2\2\3\1\4\1\5\2\6\1\7"+
    "\1\2\1\10\1\11\1\12\1\13\1\7\1\14\1\15"+
    "\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25"+
    "\1\26\17\7\1\27\1\30\1\31\1\32\1\33\1\34"+
    "\1\35\1\36\1\37\1\40\1\41\1\42\1\41\1\2"+
    "\2\43\1\2\3\0\1\44\1\45\2\0\1\46\1\47"+
    "\1\50\1\51\1\52\1\53\3\7\1\54\1\55\1\56"+
    "\1\57\1\60\13\7\1\61\12\7\1\62\4\7\1\63"+
    "\1\64\1\65\1\66\1\67\1\70\1\71\1\72\1\73"+
    "\1\74\1\75\1\76\1\77\1\100\1\101\1\102\1\0"+
    "\2\103\4\0\1\104\3\0\1\105\1\53\4\7\1\106"+
    "\1\107\2\7\1\110\10\7\1\111\13\7\1\112\2\7"+
    "\1\113\2\0\1\3\3\0\11\7\1\114\4\7\1\115"+
    "\5\7\1\116\1\117\1\7\1\120\5\7\1\45\2\121"+
    "\2\0\5\7\1\122\1\7\1\123\1\124\1\125\1\126"+
    "\1\127\1\130\2\7\1\131\2\7\1\132\2\7\1\133"+
    "\1\134\1\7\2\0\1\135\1\136\10\7\1\137\1\7"+
    "\1\140\1\141\2\142\2\143\1\144\2\7\1\145\1\146"+
    "\3\7\1\147\1\7\1\150\2\7\1\151\1\152\1\153"+
    "\1\7\1\154";

  private static int [] zzUnpackAction() {
    int [] result = new int[278];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\74\0\170\0\264\0\360\0\u012c\0\u0168\0\u01a4"+
    "\0\u01e0\0\u021c\0\u0258\0\u021c\0\u0294\0\u02d0\0\u021c\0\u030c"+
    "\0\u0348\0\u0384\0\u03c0\0\u021c\0\u021c\0\u03fc\0\u0438\0\u0474"+
    "\0\u04b0\0\u021c\0\u021c\0\u021c\0\u021c\0\u021c\0\u021c\0\u021c"+
    "\0\u04ec\0\u021c\0\u0528\0\u0564\0\u05a0\0\u05dc\0\u0618\0\u0654"+
    "\0\u0690\0\u06cc\0\u0708\0\u0744\0\u0780\0\u07bc\0\u07f8\0\u0834"+
    "\0\u0870\0\u08ac\0\u08e8\0\u0924\0\u0960\0\u099c\0\u09d8\0\u021c"+
    "\0\u0a14\0\u0a50\0\u021c\0\u0a8c\0\u0ac8\0\u0b04\0\u0b40\0\u0b7c"+
    "\0\u021c\0\u0bb8\0\u0bf4\0\u0c30\0\u0c6c\0\u021c\0\u0ca8\0\u0ce4"+
    "\0\u0d20\0\u021c\0\u021c\0\u0d5c\0\u0d98\0\u021c\0\u0dd4\0\u0e10"+
    "\0\u0e4c\0\u0e88\0\u0ec4\0\u021c\0\u021c\0\u0f00\0\u021c\0\u0f3c"+
    "\0\u0f78\0\u0fb4\0\u0ff0\0\u102c\0\u1068\0\u10a4\0\u10e0\0\u111c"+
    "\0\u1158\0\u1194\0\u0348\0\u11d0\0\u120c\0\u1248\0\u1284\0\u12c0"+
    "\0\u12fc\0\u1338\0\u1374\0\u13b0\0\u13ec\0\u0348\0\u1428\0\u1464"+
    "\0\u14a0\0\u14dc\0\u021c\0\u021c\0\u021c\0\u021c\0\u021c\0\u1518"+
    "\0\u021c\0\u021c\0\u021c\0\u021c\0\u021c\0\u021c\0\u021c\0\u021c"+
    "\0\u021c\0\u021c\0\u0b40\0\u1554\0\u021c\0\u0bb8\0\u1590\0\u021c"+
    "\0\u15cc\0\u021c\0\u1608\0\u1644\0\u1680\0\u021c\0\u021c\0\u16bc"+
    "\0\u16f8\0\u1734\0\u1770\0\u021c\0\u021c\0\u17ac\0\u17e8\0\u1824"+
    "\0\u1860\0\u189c\0\u18d8\0\u1914\0\u1950\0\u198c\0\u19c8\0\u1a04"+
    "\0\u0348\0\u1a40\0\u1a7c\0\u1ab8\0\u1af4\0\u1b30\0\u1b6c\0\u1ba8"+
    "\0\u1be4\0\u1c20\0\u1c5c\0\u1c98\0\u0348\0\u1cd4\0\u1d10\0\u021c"+
    "\0\u1d4c\0\u1d88\0\u1608\0\u1dc4\0\u1e00\0\u1e3c\0\u1e78\0\u1eb4"+
    "\0\u1ef0\0\u1f2c\0\u1f68\0\u1fa4\0\u1fe0\0\u201c\0\u2058\0\u0348"+
    "\0\u2094\0\u20d0\0\u210c\0\u2148\0\u0348\0\u2184\0\u21c0\0\u21fc"+
    "\0\u2238\0\u2274\0\u0348\0\u0348\0\u22b0\0\u22ec\0\u2328\0\u2364"+
    "\0\u23a0\0\u23dc\0\u2418\0\u021c\0\u2454\0\u021c\0\u2490\0\u24cc"+
    "\0\u2508\0\u2544\0\u2580\0\u25bc\0\u25f8\0\u2634\0\u2670\0\u0348"+
    "\0\u0348\0\u0348\0\u0348\0\u0348\0\u0348\0\u26ac\0\u26e8\0\u0348"+
    "\0\u2724\0\u2760\0\u0348\0\u279c\0\u27d8\0\u0348\0\u0348\0\u2814"+
    "\0\u2850\0\u288c\0\u0348\0\u0348\0\u28c8\0\u2904\0\u2940\0\u297c"+
    "\0\u29b8\0\u29f4\0\u2a30\0\u2a6c\0\u0348\0\u2aa8\0\u0348\0\u0348"+
    "\0\u2ae4\0\u021c\0\u2b20\0\u021c\0\u0348\0\u2b5c\0\u2b98\0\u0348"+
    "\0\u0348\0\u2bd4\0\u2c10\0\u2c4c\0\u0348\0\u2c88\0\u0348\0\u2cc4"+
    "\0\u2d00\0\u0348\0\u0348\0\u0348\0\u2d3c\0\u0348";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[278];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\13\10\1\11\60\10\1\12\1\13\2\14\1\15\1\16"+
    "\1\17\1\20\1\21\1\12\1\22\1\23\1\24\1\25"+
    "\1\12\1\14\1\26\1\27\1\21\1\30\1\31\1\32"+
    "\1\33\1\34\1\35\1\36\1\37\1\40\1\41\1\42"+
    "\1\43\1\44\1\45\1\46\1\47\1\50\2\21\1\51"+
    "\1\52\1\53\1\54\1\21\1\55\1\21\1\56\1\57"+
    "\1\60\2\21\1\61\1\62\1\63\1\64\1\65\1\66"+
    "\1\67\1\70\1\71\1\12\1\72\2\12\12\72\1\73"+
    "\55\72\1\74\1\75\2\12\11\75\1\73\56\75\1\76"+
    "\1\77\1\100\1\101\5\77\1\102\5\77\2\12\1\77"+
    "\2\102\13\77\25\102\11\77\10\0\1\103\10\0\2\103"+
    "\13\0\25\103\12\0\1\104\1\105\71\0\13\10\1\0"+
    "\60\10\20\106\1\107\53\106\76\0\1\14\75\0\1\110"+
    "\1\111\15\0\1\112\73\0\1\113\56\0\2\20\72\0"+
    "\4\21\7\0\2\21\13\0\25\21\21\0\1\114\10\0"+
    "\2\114\13\0\25\114\24\0\1\115\7\0\1\116\74\0"+
    "\1\117\55\0\4\21\7\0\2\21\13\0\1\21\1\120"+
    "\6\21\1\121\2\21\1\122\11\21\34\0\1\123\1\124"+
    "\72\0\1\125\1\126\103\0\1\127\45\0\4\21\7\0"+
    "\2\21\13\0\1\21\1\130\3\21\1\131\1\132\1\21"+
    "\1\133\14\21\17\0\4\21\7\0\2\21\13\0\2\21"+
    "\1\134\22\21\17\0\4\21\7\0\2\21\13\0\1\21"+
    "\1\135\23\21\17\0\4\21\7\0\2\21\13\0\6\21"+
    "\1\136\1\137\1\140\14\21\17\0\4\21\7\0\1\21"+
    "\1\141\13\0\13\21\1\142\11\21\17\0\4\21\7\0"+
    "\2\21\13\0\1\143\1\21\1\144\13\21\1\145\6\21"+
    "\17\0\4\21\7\0\2\21\13\0\13\21\1\146\3\21"+
    "\1\147\5\21\17\0\4\21\7\0\2\21\13\0\4\21"+
    "\1\150\5\21\1\151\12\21\17\0\4\21\7\0\2\21"+
    "\13\0\3\21\1\152\3\21\1\153\4\21\1\154\10\21"+
    "\17\0\4\21\7\0\2\21\13\0\12\21\1\155\12\21"+
    "\17\0\4\21\7\0\2\21\13\0\6\21\1\156\16\21"+
    "\17\0\4\21\7\0\2\21\13\0\13\21\1\157\11\21"+
    "\17\0\4\21\7\0\2\21\13\0\10\21\1\160\14\21"+
    "\17\0\4\21\7\0\1\21\1\161\13\0\25\21\17\0"+
    "\4\21\7\0\2\21\13\0\7\21\1\162\15\21\34\0"+
    "\1\163\37\0\1\164\33\0\1\165\40\0\1\166\32\0"+
    "\1\167\73\0\1\170\73\0\1\171\43\0\1\172\27\0"+
    "\1\173\44\0\1\174\26\0\1\175\50\0\1\72\2\0"+
    "\12\72\1\0\55\72\16\0\1\176\22\0\1\177\1\0"+
    "\1\200\6\0\1\201\22\0\1\75\2\0\11\75\1\0"+
    "\56\75\15\0\1\202\23\0\1\177\1\0\1\200\6\0"+
    "\1\201\22\0\1\203\1\100\1\101\13\203\2\0\54\203"+
    "\2\0\1\101\71\0\1\203\1\204\1\205\3\203\4\206"+
    "\4\203\2\0\1\203\2\206\10\203\1\207\2\203\25\206"+
    "\11\203\6\0\4\103\7\0\2\103\13\0\25\103\44\0"+
    "\1\210\41\0\1\104\31\0\1\210\61\0\1\211\1\0"+
    "\1\212\50\0\1\110\1\13\1\14\71\110\5\213\1\214"+
    "\66\213\6\0\4\114\7\0\2\114\13\0\25\114\24\0"+
    "\1\215\7\0\1\216\52\0\1\217\77\0\4\21\7\0"+
    "\2\21\13\0\17\21\1\220\5\21\17\0\4\21\7\0"+
    "\2\21\13\0\13\21\1\221\11\21\17\0\4\21\7\0"+
    "\2\21\13\0\5\21\1\222\1\223\16\21\34\0\1\224"+
    "\73\0\1\225\56\0\4\21\7\0\2\21\13\0\2\21"+
    "\1\226\22\21\17\0\4\21\7\0\2\21\13\0\2\21"+
    "\1\227\22\21\17\0\4\21\7\0\2\21\13\0\13\21"+
    "\1\230\11\21\17\0\4\21\7\0\2\21\13\0\7\21"+
    "\1\231\15\21\17\0\4\21\7\0\2\21\13\0\4\21"+
    "\1\232\20\21\17\0\4\21\7\0\2\21\13\0\7\21"+
    "\1\233\15\21\17\0\4\21\7\0\2\21\13\0\2\21"+
    "\1\234\22\21\17\0\4\21\7\0\2\21\13\0\10\21"+
    "\1\235\14\21\17\0\4\21\7\0\2\21\13\0\4\21"+
    "\1\236\20\21\17\0\4\21\7\0\2\21\13\0\13\21"+
    "\1\237\11\21\17\0\4\21\7\0\2\21\13\0\1\21"+
    "\1\240\21\21\1\241\1\21\17\0\4\21\7\0\2\21"+
    "\13\0\4\21\1\242\20\21\17\0\4\21\7\0\1\243"+
    "\1\21\13\0\25\21\17\0\4\21\7\0\2\21\13\0"+
    "\13\21\1\244\11\21\17\0\4\21\7\0\2\21\13\0"+
    "\11\21\1\245\13\21\17\0\4\21\7\0\2\21\13\0"+
    "\10\21\1\246\14\21\17\0\4\21\7\0\2\21\13\0"+
    "\7\21\1\247\15\21\17\0\4\21\7\0\1\21\1\250"+
    "\13\0\25\21\17\0\4\21\7\0\2\21\13\0\11\21"+
    "\1\251\13\21\17\0\4\21\7\0\2\21\13\0\4\21"+
    "\1\252\20\21\17\0\4\21\7\0\2\21\13\0\4\21"+
    "\1\253\20\21\17\0\4\21\7\0\2\21\13\0\12\21"+
    "\1\254\12\21\17\0\4\21\7\0\2\21\13\0\13\21"+
    "\1\255\11\21\17\0\4\21\7\0\2\21\13\0\5\21"+
    "\1\256\17\21\17\0\4\21\7\0\2\21\13\0\6\21"+
    "\1\257\16\21\34\0\1\260\52\0\1\205\71\0\1\203"+
    "\1\204\1\205\13\203\2\0\54\203\22\0\1\261\51\0"+
    "\5\213\1\262\72\213\1\263\1\262\66\213\10\0\1\264"+
    "\3\0\1\265\1\266\3\0\2\264\13\0\25\264\17\0"+
    "\4\21\7\0\2\21\13\0\7\21\1\267\15\21\17\0"+
    "\4\21\7\0\2\21\13\0\12\21\1\270\12\21\17\0"+
    "\4\21\7\0\2\21\13\0\20\21\1\271\4\21\17\0"+
    "\4\21\7\0\2\21\13\0\4\21\1\272\20\21\17\0"+
    "\4\21\7\0\2\21\13\0\3\21\1\273\21\21\17\0"+
    "\4\21\7\0\2\21\13\0\10\21\1\274\14\21\17\0"+
    "\4\21\7\0\2\21\13\0\12\21\1\275\12\21\17\0"+
    "\4\21\7\0\2\21\13\0\11\21\1\276\13\21\17\0"+
    "\4\21\7\0\2\21\13\0\5\21\1\277\17\21\17\0"+
    "\4\21\7\0\2\21\13\0\7\21\1\300\15\21\17\0"+
    "\4\21\7\0\2\21\13\0\11\21\1\301\13\21\17\0"+
    "\4\21\7\0\2\21\13\0\11\21\1\302\13\21\17\0"+
    "\4\21\7\0\2\21\13\0\3\21\1\303\21\21\17\0"+
    "\4\21\7\0\2\21\13\0\6\21\1\304\16\21\17\0"+
    "\4\21\7\0\2\21\13\0\12\21\1\305\12\21\17\0"+
    "\4\21\7\0\2\21\13\0\12\21\1\306\12\21\17\0"+
    "\4\21\7\0\2\21\13\0\7\21\1\307\15\21\17\0"+
    "\4\21\7\0\2\21\13\0\10\21\1\310\14\21\17\0"+
    "\4\21\7\0\2\21\13\0\4\21\1\311\20\21\17\0"+
    "\4\21\7\0\2\21\13\0\4\21\1\312\20\21\17\0"+
    "\4\21\7\0\2\21\13\0\1\313\24\21\17\0\4\21"+
    "\7\0\2\21\13\0\6\21\1\314\16\21\17\0\4\21"+
    "\7\0\2\21\13\0\5\21\1\315\4\21\1\316\12\21"+
    "\17\0\4\21\7\0\2\21\13\0\12\21\1\317\12\21"+
    "\17\0\4\21\7\0\2\21\13\0\1\21\1\320\23\21"+
    "\17\0\4\21\7\0\2\21\13\0\10\21\1\321\14\21"+
    "\17\0\4\21\7\0\2\21\13\0\7\21\1\322\15\21"+
    "\17\0\4\21\7\0\2\21\13\0\17\21\1\323\5\21"+
    "\32\0\1\324\52\0\4\213\1\14\1\262\66\213\1\0"+
    "\1\325\1\326\3\0\4\264\7\0\2\264\13\0\25\264"+
    "\21\0\1\327\10\0\2\327\13\0\25\327\21\0\1\330"+
    "\10\0\2\330\13\0\25\330\17\0\4\21\7\0\2\21"+
    "\13\0\5\21\1\331\17\21\17\0\4\21\7\0\2\21"+
    "\13\0\2\21\1\332\22\21\17\0\4\21\7\0\2\21"+
    "\13\0\10\21\1\333\14\21\17\0\4\21\7\0\2\21"+
    "\13\0\12\21\1\334\12\21\17\0\4\21\7\0\2\21"+
    "\13\0\4\21\1\335\20\21\17\0\4\21\7\0\2\21"+
    "\13\0\7\21\1\336\15\21\17\0\4\21\7\0\2\21"+
    "\13\0\10\21\1\337\14\21\17\0\4\21\7\0\2\21"+
    "\13\0\12\21\1\340\12\21\17\0\4\21\7\0\2\21"+
    "\13\0\7\21\1\341\15\21\17\0\4\21\7\0\2\21"+
    "\13\0\4\21\1\342\20\21\17\0\4\21\7\0\2\21"+
    "\13\0\11\21\1\343\13\21\17\0\4\21\7\0\1\21"+
    "\1\344\13\0\25\21\17\0\4\21\7\0\2\21\13\0"+
    "\21\21\1\345\3\21\17\0\4\21\7\0\2\21\13\0"+
    "\13\21\1\346\11\21\17\0\4\21\7\0\2\21\13\0"+
    "\12\21\1\347\12\21\17\0\4\21\7\0\2\21\13\0"+
    "\23\21\1\350\1\21\17\0\4\21\7\0\2\21\13\0"+
    "\13\21\1\351\11\21\17\0\4\21\7\0\2\21\13\0"+
    "\5\21\1\352\17\21\17\0\4\21\7\0\2\21\13\0"+
    "\1\353\24\21\17\0\4\21\7\0\2\21\13\0\5\21"+
    "\1\315\17\21\17\0\4\21\7\0\2\21\13\0\2\21"+
    "\1\354\22\21\17\0\4\21\7\0\2\21\13\0\13\21"+
    "\1\355\11\21\17\0\4\21\7\0\2\21\13\0\22\21"+
    "\1\356\2\21\17\0\4\21\7\0\2\21\13\0\12\21"+
    "\1\357\12\21\17\0\4\21\7\0\2\21\13\0\10\21"+
    "\1\360\14\21\13\0\1\326\77\0\4\327\2\0\1\361"+
    "\4\0\2\327\13\0\25\327\17\0\4\330\3\0\1\362"+
    "\3\0\2\330\13\0\25\330\17\0\4\21\7\0\2\21"+
    "\13\0\3\21\1\363\21\21\17\0\4\21\7\0\2\21"+
    "\13\0\4\21\1\364\20\21\17\0\4\21\7\0\2\21"+
    "\13\0\4\21\1\365\20\21\17\0\4\21\7\0\2\21"+
    "\13\0\3\21\1\366\21\21\17\0\4\21\7\0\2\21"+
    "\13\0\5\21\1\367\17\21\17\0\4\21\7\0\2\21"+
    "\13\0\7\21\1\370\15\21\17\0\4\21\7\0\2\21"+
    "\13\0\3\21\1\371\21\21\17\0\4\21\7\0\2\21"+
    "\13\0\1\372\24\21\17\0\4\21\7\0\2\21\13\0"+
    "\16\21\1\373\6\21\17\0\4\21\7\0\2\21\13\0"+
    "\10\21\1\374\14\21\17\0\4\21\7\0\2\21\13\0"+
    "\3\21\1\375\21\21\17\0\4\21\7\0\2\21\13\0"+
    "\15\21\1\376\7\21\17\0\4\21\7\0\2\21\13\0"+
    "\2\21\1\377\22\21\17\0\4\21\7\0\2\21\13\0"+
    "\7\21\1\u0100\15\21\12\0\1\u0101\1\u0102\72\0\1\u0103"+
    "\1\u0104\77\0\4\21\7\0\2\21\13\0\12\21\1\u0105"+
    "\12\21\17\0\4\21\7\0\2\21\13\0\4\21\1\u0106"+
    "\20\21\17\0\4\21\7\0\2\21\13\0\6\21\1\u0107"+
    "\16\21\17\0\4\21\7\0\2\21\13\0\23\21\1\u0108"+
    "\1\21\17\0\4\21\7\0\1\21\1\u0109\13\0\25\21"+
    "\17\0\4\21\7\0\2\21\13\0\10\21\1\u010a\14\21"+
    "\17\0\4\21\7\0\2\21\13\0\12\21\1\u010b\12\21"+
    "\17\0\4\21\7\0\2\21\13\0\3\21\1\u010c\21\21"+
    "\17\0\4\21\7\0\2\21\13\0\11\21\1\u010d\13\21"+
    "\13\0\1\u0102\73\0\1\u0104\77\0\4\21\7\0\2\21"+
    "\13\0\12\21\1\u010e\12\21\17\0\4\21\7\0\2\21"+
    "\13\0\2\21\1\u010f\22\21\17\0\4\21\7\0\2\21"+
    "\13\0\3\21\1\u0110\21\21\17\0\4\21\7\0\2\21"+
    "\13\0\2\21\1\u0111\22\21\17\0\4\21\7\0\2\21"+
    "\13\0\4\21\1\u0112\20\21\17\0\4\21\7\0\2\21"+
    "\13\0\15\21\1\u0113\7\21\17\0\4\21\7\0\2\21"+
    "\13\0\12\21\1\u0114\12\21\17\0\4\21\7\0\2\21"+
    "\13\0\4\21\1\u0115\20\21\17\0\4\21\7\0\2\21"+
    "\13\0\11\21\1\u0116\13\21\11\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[11640];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\7\0\2\1\1\11\1\1\1\11\2\1\1\11\4\1"+
    "\2\11\4\1\7\11\1\1\1\11\25\1\1\11\2\1"+
    "\1\11\5\1\1\11\4\1\1\11\1\1\2\0\2\11"+
    "\2\1\1\11\5\1\2\11\1\1\1\11\33\1\5\11"+
    "\1\1\12\11\1\0\1\1\1\11\2\0\1\11\1\0"+
    "\1\11\3\0\2\11\4\1\2\11\32\1\1\11\2\0"+
    "\1\1\3\0\35\1\1\11\1\1\1\11\2\0\30\1"+
    "\2\0\17\1\1\11\1\1\1\11\22\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[278];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /** For the backwards DFA of general lookahead statements */
  private boolean [] zzFin = new boolean [ZZ_BUFFERSIZE+1];

  /* user code: */

	private ComplexSymbolFactory symbolFactory = new ComplexSymbolFactory();
	private StringBuilder stringBuilder = new StringBuilder();
	private String heredocNowdocMarker;
	private boolean heredocNowdocVariableInterpolation;

	private Symbol symbol(int type) {
		String text = yytext();
		Location left = new Location(yyline, yycolumn);
		Location right = new Location(yyline, yycolumn + text.length());
		return symbolFactory.newSymbol(text, type, left, right);
	}
  
	private Symbol symbol(int type, Object value) {
		String text = yytext();
		Location left = new Location(yyline, yycolumn);
		Location right = new Location(yyline, yycolumn + text.length());
		return symbolFactory.newSymbol(text, type, left, right, value);
	}
	
	private void beginHeredocNowdoc(String markerContainer, boolean markerQuoted, boolean interpolateVariables) {
		markerContainer = markerContainer.trim();
		this.heredocNowdocMarker = markerContainer.substring(markerQuoted ? 4 : 3, markerContainer.length() - (markerQuoted ? 1 : 0));
		this.heredocNowdocVariableInterpolation = interpolateVariables;
		stringBuilder.setLength(0);
		yybegin(HEREDOC_NOWDOC);
	}
	
	private Symbol handleHeredocNowdocStopperCandidate(String identifier) {
		if (identifier.equals(heredocNowdocMarker)) {
			return buildHeredocNowdocString();
		} else {
			handleHeredocNowdocContent(identifier);
			return null;
		}
	}
	
	private void handleHeredocNowdocContent(String content) {
		stringBuilder.append(content);
	}
	
	private Symbol buildHeredocNowdocString() {
		// TODO interpolation
		yybegin(CODE); 
		return symbol(Tokens.STRING_LITERAL, stringBuilder.toString());
	}
	


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Lexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 1930) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

    // numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  @Override
public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn++;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 1: 
          { return symbol(Tokens.VERBATIM_CONTENT, yytext());
          }
        case 109: break;
        case 2: 
          { String s = yytext();
	int code = s.charAt(0);
	throw new RuntimeException("Illegal character '" + yytext() + "' (code " + code + ")");
          }
        case 110: break;
        case 3: 
          { // ignore
          }
        case 111: break;
        case 4: 
          { return symbol(Tokens.DIVIDE);
          }
        case 112: break;
        case 5: 
          { return symbol(Tokens.TIMES);
          }
        case 113: break;
        case 6: 
          { return symbol(Tokens.INTEGER_LITERAL, Integer.parseInt(yytext()));
          }
        case 114: break;
        case 7: 
          { return symbol(Tokens.IDENTIFIER, yytext());
          }
        case 115: break;
        case 8: 
          { return symbol(Tokens.LESS);
          }
        case 116: break;
        case 9: 
          { stringBuilder.setLength(0);
		yybegin(DOUBLE_QUOTED_STRING);
          }
        case 117: break;
        case 10: 
          { stringBuilder.setLength(0);
		yybegin(SINGLE_QUOTED_STRING);
          }
        case 118: break;
        case 11: 
          { return symbol(Tokens.QUESTION_MARK);
          }
        case 119: break;
        case 12: 
          { return symbol(Tokens.ASSIGN);
          }
        case 120: break;
        case 13: 
          { return symbol(Tokens.GREATER);
          }
        case 121: break;
        case 14: 
          { return symbol(Tokens.OPENING_PARENTHESIS);
          }
        case 122: break;
        case 15: 
          { return symbol(Tokens.CLOSING_PARENTHESIS);
          }
        case 123: break;
        case 16: 
          { return symbol(Tokens.OPENING_CURLY_BRACE);
          }
        case 124: break;
        case 17: 
          { return symbol(Tokens.CLOSING_CURLY_BRACE);
          }
        case 125: break;
        case 18: 
          { return symbol(Tokens.OPENING_SQUARE_BRACKET);
          }
        case 126: break;
        case 19: 
          { return symbol(Tokens.CLOSING_SQUARE_BRACKET);
          }
        case 127: break;
        case 20: 
          { return symbol(Tokens.SEMICOLON);
          }
        case 128: break;
        case 21: 
          { return symbol(Tokens.COLON);
          }
        case 129: break;
        case 22: 
          { return symbol(Tokens.COMMA);
          }
        case 130: break;
        case 23: 
          { return symbol(Tokens.PLUS);
          }
        case 131: break;
        case 24: 
          { return symbol(Tokens.MINUS);
          }
        case 132: break;
        case 25: 
          { return symbol(Tokens.MOD);
          }
        case 133: break;
        case 26: 
          { return symbol(Tokens.LOGICAL_NOT);
          }
        case 134: break;
        case 27: 
          { return symbol(Tokens.BITWISE_AND);
          }
        case 135: break;
        case 28: 
          { return symbol(Tokens.BITWISE_OR);
          }
        case 136: break;
        case 29: 
          { return symbol(Tokens.BITWISE_NOT);
          }
        case 137: break;
        case 30: 
          { return symbol(Tokens.BITWISE_XOR);
          }
        case 138: break;
        case 31: 
          { stringBuilder.append(yytext());
          }
        case 139: break;
        case 32: 
          { yybegin(CODE); 
		return symbol(Tokens.STRING_LITERAL, stringBuilder.toString());
          }
        case 140: break;
        case 33: 
          { stringBuilder.append('\\');
          }
        case 141: break;
        case 34: 
          { // TODO interpolate
		stringBuilder.append(yytext());
          }
        case 142: break;
        case 35: 
          { handleHeredocNowdocContent(yytext());
          }
        case 143: break;
        case 36: 
          // lookahead expression with fixed base length
          zzMarkedPos = zzStartRead + 1;
          { return symbol(Tokens.VERBATIM_CONTENT, yytext());
          }
        case 144: break;
        case 37: 
          { yybegin(CODE);
          }
        case 145: break;
        case 38: 
          { return symbol(Tokens.DIVIDE_ASSIGN);
          }
        case 146: break;
        case 39: 
          { return symbol(Tokens.TIMES_ASSIGN);
          }
        case 147: break;
        case 40: 
          { return symbol(Tokens.LOCAL_VARIABLE, yytext().substring(1));
          }
        case 148: break;
        case 41: 
          { return symbol(Tokens.SHIFT_LEFT);
          }
        case 149: break;
        case 42: 
          { return symbol(Tokens.LESS_EQUAL);
          }
        case 150: break;
        case 43: 
          { yybegin(YYINITIAL);
		return symbol(Tokens.SEMICOLON);
          }
        case 151: break;
        case 44: 
          { return symbol(Tokens.EQUAL);
          }
        case 152: break;
        case 45: 
          { return symbol(Tokens.RIGHT_ARROW);
          }
        case 153: break;
        case 46: 
          { return symbol(Tokens.GREATER_EQUAL);
          }
        case 154: break;
        case 47: 
          { return symbol(Tokens.SHIFT_RIGHT);
          }
        case 155: break;
        case 48: 
          { return symbol(Tokens.SCOPE_RESOLUTION);
          }
        case 156: break;
        case 49: 
          { return symbol(Tokens.IF);
          }
        case 157: break;
        case 50: 
          { return symbol(Tokens.DO);
          }
        case 158: break;
        case 51: 
          { return symbol(Tokens.PLUS_ASSIGN);
          }
        case 159: break;
        case 52: 
          { return symbol(Tokens.INCREMENT);
          }
        case 160: break;
        case 53: 
          { return symbol(Tokens.MINUS_ASSIGN);
          }
        case 161: break;
        case 54: 
          { return symbol(Tokens.DECREMENT);
          }
        case 162: break;
        case 55: 
          { return symbol(Tokens.MOD_ASSIGN);
          }
        case 163: break;
        case 56: 
          { return symbol(Tokens.NOT_EQUAL);
          }
        case 164: break;
        case 57: 
          { return symbol(Tokens.BITWISE_AND_ASSIGN);
          }
        case 165: break;
        case 58: 
          { return symbol(Tokens.SHORTCUT_AND);
          }
        case 166: break;
        case 59: 
          { return symbol(Tokens.BITWISE_OR_ASSIGN);
          }
        case 167: break;
        case 60: 
          { return symbol(Tokens.SHORTCUT_OR);
          }
        case 168: break;
        case 61: 
          { return symbol(Tokens.BITWISE_XOR_ASSIGN);
          }
        case 169: break;
        case 62: 
          { stringBuilder.append('\'');
          }
        case 170: break;
        case 63: 
          { stringBuilder.append('\n');
          }
        case 171: break;
        case 64: 
          { stringBuilder.append('\t');
          }
        case 172: break;
        case 65: 
          { stringBuilder.append('\r');
          }
        case 173: break;
        case 66: 
          { stringBuilder.append('\"');
          }
        case 174: break;
        case 67: 
          // general lookahead, find correct zzMarkedPos
          { int zzFState = 5;
            int zzFPos = zzStartRead;
            if (zzFin.length <= zzBufferL.length) { zzFin = new boolean[zzBufferL.length+1]; }
            boolean zzFinL[] = zzFin;
            while (zzFState != -1 && zzFPos < zzMarkedPos) {
              zzFinL[zzFPos] = ((zzAttrL[zzFState] & 1) == 1);
              zzInput = zzBufferL[zzFPos++];
              zzFState = zzTransL[ zzRowMapL[zzFState] + zzCMapL[zzInput] ];
            }
            if (zzFState != -1) { zzFinL[zzFPos++] = ((zzAttrL[zzFState] & 1) == 1); } 
            while (zzFPos <= zzMarkedPos) {
              zzFinL[zzFPos++] = false;
            }

            zzFState = 6;
            zzFPos = zzMarkedPos;
            while (!zzFinL[zzFPos] || (zzAttrL[zzFState] & 1) != 1) {
              zzInput = zzBufferL[--zzFPos];
              zzFState = zzTransL[ zzRowMapL[zzFState] + zzCMapL[zzInput] ];
            };
            zzMarkedPos = zzFPos;
          }
          { Symbol s = handleHeredocNowdocStopperCandidate(yytext());
		if (s != null) {
			return s;
		}
          }
        case 175: break;
        case 68: 
          { yybegin(CODE);
		return symbol(Tokens.IDENTIFIER, "echo");
          }
        case 176: break;
        case 69: 
          { return symbol(Tokens.SHIFT_LEFT_ASSIGN);
          }
        case 177: break;
        case 70: 
          { return symbol(Tokens.IDENTICAL);
          }
        case 178: break;
        case 71: 
          { return symbol(Tokens.SHIFT_RIGHT_ASSIGN);
          }
        case 179: break;
        case 72: 
          { return symbol(Tokens.FOR);
          }
        case 180: break;
        case 73: 
          { return symbol(Tokens.TRY);
          }
        case 181: break;
        case 74: 
          { return symbol(Tokens.VAR);
          }
        case 182: break;
        case 75: 
          { return symbol(Tokens.NOT_IDENTICAL);
          }
        case 183: break;
        case 76: 
          { return symbol(Tokens.NULL_LITERAL);
          }
        case 184: break;
        case 77: 
          { return symbol(Tokens.BOOLEAN_LITERAL, true);
          }
        case 185: break;
        case 78: 
          { return symbol(Tokens.SELF);
          }
        case 186: break;
        case 79: 
          { return symbol(Tokens.ECHO);
          }
        case 187: break;
        case 80: 
          { return symbol(Tokens.ELSE);
          }
        case 188: break;
        case 81: 
          { beginHeredocNowdoc(yytext(), false, true);
          }
        case 189: break;
        case 82: 
          { return symbol(Tokens.FINAL);
          }
        case 190: break;
        case 83: 
          { return symbol(Tokens.BOOLEAN_LITERAL, false);
          }
        case 191: break;
        case 84: 
          { return symbol(Tokens.UNTIL);
          }
        case 192: break;
        case 85: 
          { return symbol(Tokens.CONST);
          }
        case 193: break;
        case 86: 
          { return symbol(Tokens.CLASS);
          }
        case 194: break;
        case 87: 
          { return symbol(Tokens.CATCH);
          }
        case 195: break;
        case 88: 
          { return symbol(Tokens.THROW);
          }
        case 196: break;
        case 89: 
          { return symbol(Tokens.ARRAY);
          }
        case 197: break;
        case 90: 
          { return symbol(Tokens.ELSEIF);
          }
        case 198: break;
        case 91: 
          { return symbol(Tokens.BREAK);
          }
        case 199: break;
        case 92: 
          { return symbol(Tokens.WHILE);
          }
        case 200: break;
        case 93: 
          { return symbol(Tokens.PUBLIC);
          }
        case 201: break;
        case 94: 
          { return symbol(Tokens.PARENT);
          }
        case 202: break;
        case 95: 
          { return symbol(Tokens.STATIC);
          }
        case 203: break;
        case 96: 
          { return symbol(Tokens.RETURN);
          }
        case 204: break;
        case 97: 
          { return symbol(Tokens.GLOBAL);
          }
        case 205: break;
        case 98: 
          { beginHeredocNowdoc(yytext(), true, true);
          }
        case 206: break;
        case 99: 
          { beginHeredocNowdoc(yytext(), true, false);
          }
        case 207: break;
        case 100: 
          { return symbol(Tokens.PRIVATE);
          }
        case 208: break;
        case 101: 
          { return symbol(Tokens.FINALLY);
          }
        case 209: break;
        case 102: 
          { return symbol(Tokens.FOREACH);
          }
        case 210: break;
        case 103: 
          { return symbol(Tokens.EXTENDS);
          }
        case 211: break;
        case 104: 
          { return symbol(Tokens.FUNCTION);
          }
        case 212: break;
        case 105: 
          { return symbol(Tokens.ABSTRACT);
          }
        case 213: break;
        case 106: 
          { return symbol(Tokens.PROTECTED);
          }
        case 214: break;
        case 107: 
          { return symbol(Tokens.INTERFACE);
          }
        case 215: break;
        case 108: 
          { return symbol(Tokens.IMPLEMENTS);
          }
        case 216: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
              { 	Location location = new Location(yyline, yycolumn);
	return symbolFactory.newSymbol("EOF", Tokens.EOF, location, location); 
 }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
