/* The following code was generated by JFlex 1.5.1 */

// ---------------------------------------------------------------------------------------------------------
// --- header information
// ---------------------------------------------------------------------------------------------------------

// imports
package name.martingeisse.phunky.runtime.parser;

import java_cup.runtime.ComplexSymbolFactory;
import java_cup.runtime.ComplexSymbolFactory.Location;
import java_cup.runtime.Symbol;

/**
 * The Lexer.
 */
@SuppressWarnings("all")
public class Lexer implements java_cup.runtime.Scanner {

	/** This character denotes the end of file */
	public static final int YYEOF = -1;

	/** initial size of the lookahead buffer */
	private static final int ZZ_BUFFERSIZE = 16384;

	/** lexical states */
	public static final int YYINITIAL = 0;

	public static final int CODE = 2;

	public static final int SINGLE_QUOTED_STRING = 4;

	public static final int DOUBLE_QUOTED_STRING = 6;

	public static final int HEREDOC_NOWDOC = 8;

	/**
	 * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
	 * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
	 *                  at the beginning of a line
	 * l is of the form l = 2*k, k a non negative integer
	 */
	private static final int ZZ_LEXSTATE[] = { 0, 0, 1, 1, 2, 2, 3, 3, 4, 4 };

	/** 
	 * Translates characters to character classes
	 */
	private static final String ZZ_CMAP_PACKED = "\11\0\1\3\1\2\1\16\1\17\1\1\22\0\1\3\1\71\1\14" + "\1\0\1\12\1\67\1\72\1\15\1\25\1\26\1\5\1\66\1\36" + "\1\33\1\70\1\4\1\6\11\7\1\35\1\34\1\13\1\23\1\24" + "\1\20\1\0\32\10\1\31\1\77\1\32\1\75\1\60\1\0\1\47" + "\1\56\1\42\1\54\1\51\1\37\1\65\1\22\1\44\1\76\1\63" + "\1\46\1\55\1\41\1\45\1\21\1\61\1\52\1\50\1\43\1\40" + "\1\57\1\62\1\53\1\64\1\10\1\27\1\73\1\30\1\74\6\0" + "\1\16\44\0\1\10\12\0\1\10\4\0\1\10\5\0\27\10\1\0" + "\37\10\1\0\u01ca\10\4\0\14\10\16\0\5\10\7\0\1\10\1\0" + "\1\10\126\0\1\10\52\0\5\10\1\0\2\10\2\0\4\10\10\0" + "\1\10\1\0\3\10\1\0\1\10\1\0\24\10\1\0\123\10\1\0" + "\213\10\10\0\236\10\11\0\46\10\2\0\1\10\7\0\47\10\50\0" + "\16\10\1\0\1\10\1\0\2\10\1\0\2\10\1\0\1\10\10\0" + "\33\10\5\0\3\10\35\0\13\10\5\0\70\10\1\0\7\10\12\11" + "\4\0\146\10\1\0\10\10\4\0\10\10\4\0\3\10\12\11\3\10" + "\2\0\1\10\20\0\60\10\15\0\145\10\16\0\12\11\41\10\11\0" + "\2\10\4\0\1\10\5\0\30\10\2\0\23\10\23\0\31\10\107\0" + "\1\10\1\0\13\10\67\0\6\10\6\0\17\10\1\0\74\10\1\0" + "\20\10\1\0\3\10\4\0\17\10\2\0\12\11\1\0\7\10\1\0" + "\7\10\1\0\3\10\1\0\10\10\2\0\2\10\2\0\26\10\1\0" + "\7\10\1\0\1\10\3\0\4\10\3\0\10\10\2\0\2\10\2\0" + "\2\10\1\0\1\10\10\0\1\10\4\0\2\10\1\0\5\10\2\0" + "\12\11\2\10\17\0\3\10\1\0\6\10\4\0\2\10\2\0\26\10" + "\1\0\7\10\1\0\2\10\1\0\2\10\1\0\2\10\4\0\5\10" + "\4\0\2\10\2\0\2\10\4\0\1\10\7\0\4\10\1\0\1\10" + "\7\0\12\11\6\10\13\0\3\10\1\0\11\10\1\0\3\10\1\0" + "\26\10\1\0\7\10\1\0\2\10\1\0\5\10\3\0\11\10\1\0" + "\3\10\1\0\2\10\3\0\1\10\17\0\4\10\2\0\12\11\21\0" + "\3\10\1\0\10\10\2\0\2\10\2\0\26\10\1\0\7\10\1\0" + "\2\10\1\0\5\10\3\0\10\10\2\0\2\10\2\0\2\10\11\0" + "\2\10\4\0\2\10\1\0\5\10\2\0\12\11\1\0\1\10\20\0" + "\2\10\1\0\6\10\3\0\3\10\1\0\4\10\3\0\2\10\1\0" + "\1\10\1\0\2\10\3\0\2\10\3\0\3\10\3\0\14\10\4\0" + "\5\10\3\0\3\10\1\0\3\10\3\0\1\10\6\0\1\10\16\0" + "\12\11\21\0\3\10\1\0\10\10\1\0\3\10\1\0\27\10\1\0" + "\12\10\1\0\5\10\3\0\10\10\1\0\3\10\1\0\3\10\10\0" + "\2\10\1\0\2\10\6\0\4\10\2\0\12\11\22\0\2\10\1\0" + "\10\10\1\0\3\10\1\0\27\10\1\0\12\10\1\0\5\10\3\0" + "\10\10\1\0\3\10\1\0\3\10\10\0\2\10\7\0\1\10\1\0" + "\4\10\2\0\12\11\1\0\2\10\17\0\2\10\1\0\10\10\1\0" + "\3\10\1\0\51\10\2\0\10\10\1\0\3\10\1\0\3\10\1\0" + "\1\10\10\0\1\10\10\0\4\10\2\0\12\11\12\0\6\10\2\0" + "\2\10\1\0\22\10\3\0\30\10\1\0\11\10\1\0\1\10\2\0" + "\7\10\10\0\6\10\1\0\1\10\1\0\10\10\22\0\2\10\15\0" + "\72\10\5\0\7\10\6\0\1\10\2\0\12\11\47\0\2\10\1\0" + "\1\10\2\0\2\10\1\0\1\10\2\0\1\10\6\0\4\10\1\0" + "\7\10\1\0\3\10\1\0\1\10\1\0\1\10\2\0\2\10\1\0" + "\15\10\1\0\3\10\2\0\5\10\1\0\1\10\6\0\1\10\2\0" + "\12\11\2\0\4\10\40\0\1\10\37\0\12\11\26\0\10\10\1\0" + "\44\10\4\0\21\10\6\0\20\10\1\0\44\10\103\0\67\10\1\0" + "\1\10\2\0\5\10\12\11\6\0\23\10\2\0\4\10\5\0\31\10" + "\7\0\1\10\1\0\12\11\2\0\2\10\2\0\46\10\1\0\1\10" + "\5\0\1\10\2\0\53\10\1\0\u014d\10\1\0\4\10\2\0\7\10" + "\1\0\1\10\1\0\4\10\2\0\51\10\1\0\4\10\2\0\41\10" + "\1\0\4\10\2\0\7\10\1\0\1\10\1\0\4\10\2\0\17\10" + "\1\0\71\10\1\0\4\10\2\0\103\10\4\0\1\10\40\0\20\10" + "\20\0\125\10\14\0\u026c\10\2\0\21\10\1\0\32\10\5\0\113\10" + "\3\0\3\10\17\0\15\10\1\0\6\10\14\0\24\10\14\0\24\10" + "\14\0\15\10\1\0\3\10\1\0\2\10\14\0\64\10\2\0\23\10" + "\16\0\1\10\4\0\1\10\3\0\12\11\46\0\12\11\6\0\130\10" + "\10\0\53\10\5\0\106\10\12\0\35\10\3\0\14\10\4\0\11\10" + "\15\0\12\11\36\10\2\0\5\10\13\0\54\10\4\0\32\10\6\0" + "\12\11\46\0\34\10\4\0\77\10\2\0\24\10\13\0\12\11\6\0" + "\12\11\15\0\1\10\130\0\64\10\1\0\17\10\1\0\7\10\4\0" + "\12\11\46\0\52\10\2\0\4\10\12\11\54\10\1\0\13\10\16\0" + "\66\10\12\0\12\11\3\0\3\10\12\11\44\10\153\0\4\10\1\0" + "\6\10\1\0\2\10\11\0\300\10\100\0\u0116\10\2\0\6\10\2\0" + "\46\10\2\0\6\10\2\0\10\10\1\0\1\10\1\0\1\10\1\0" + "\1\10\1\0\37\10\2\0\65\10\1\0\7\10\1\0\1\10\3\0" + "\3\10\1\0\7\10\3\0\4\10\2\0\6\10\4\0\15\10\5\0" + "\3\10\1\0\7\10\53\0\1\16\1\16\107\0\1\10\15\0\1\10" + "\20\0\15\10\145\0\1\10\4\0\1\10\2\0\12\10\1\0\1\10" + "\3\0\5\10\6\0\1\10\1\0\1\10\1\0\1\10\1\0\4\10" + "\1\0\13\10\2\0\4\10\5\0\5\10\4\0\1\10\21\0\51\10" + "\u032d\0\64\10\u0716\0\57\10\1\0\57\10\1\0\205\10\6\0\4\10" + "\3\0\2\10\14\0\46\10\1\0\1\10\5\0\1\10\2\0\70\10" + "\7\0\1\10\20\0\27\10\11\0\7\10\1\0\7\10\1\0\7\10" + "\1\0\7\10\1\0\7\10\1\0\7\10\1\0\7\10\1\0\7\10" + "\1\0\40\10\57\0\1\10\u01d5\0\3\10\31\0\11\10\7\0\5\10" + "\2\0\5\10\4\0\126\10\6\0\3\10\1\0\132\10\1\0\4\10" + "\5\0\51\10\3\0\136\10\21\0\33\10\65\0\20\10\u0200\0\u19b6\10" + "\112\0\u51cd\10\63\0\u048d\10\103\0\56\10\2\0\u010d\10\3\0\20\10" + "\12\11\2\10\24\0\57\10\5\0\10\10\3\0\31\10\7\0\121\10" + "\47\0\11\10\2\0\147\10\2\0\4\10\1\0\4\10\14\0\13\10" + "\115\0\12\10\1\0\3\10\1\0\4\10\1\0\34\10\30\0\64\10" + "\14\0\104\10\14\0\12\11\30\0\6\10\3\0\1\10\4\0\12\11" + "\41\10\5\0\43\10\15\0\35\10\3\0\63\10\1\0\14\10\17\0" + "\1\10\12\11\46\0\67\10\11\0\16\10\2\0\12\11\6\0\27\10" + "\3\0\1\10\5\0\77\10\1\0\1\10\1\0\1\10\30\0\3\10" + "\2\0\20\10\2\0\4\10\13\0\6\10\2\0\6\10\2\0\6\10" + "\11\0\7\10\1\0\7\10\221\0\53\10\5\0\12\11\6\0\u2ba4\10" + "\14\0\27\10\4\0\61\10\u2104\0\u016e\10\2\0\152\10\46\0\7\10" + "\14\0\5\10\5\0\14\10\1\0\15\10\1\0\5\10\1\0\1\10" + "\1\0\2\10\1\0\2\10\1\0\154\10\41\0\u016b\10\22\0\100\10" + "\2\0\66\10\50\0\14\10\164\0\5\10\1\0\207\10\23\0\12\11" + "\7\0\32\10\6\0\32\10\13\0\131\10\3\0\6\10\2\0\6\10" + "\2\0\6\10\2\0\3\10\43\0";

	/** 
	 * Translates characters to character classes
	 */
	private static final char[] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

	/** 
	 * Translates DFA states to action switch labels.
	 */
	private static final int[] ZZ_ACTION = zzUnpackAction();

	private static final String ZZ_ACTION_PACKED_0 = "\7\0\1\1\2\2\2\3\1\4\1\5\2\6\1\7" + "\1\2\1\10\1\11\1\12\1\13\1\7\1\14\1\15" + "\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25" + "\1\26\1\27\20\7\1\30\1\31\1\32\1\33\1\34" + "\1\35\1\36\1\37\1\40\1\41\1\42\1\43\1\42" + "\1\2\2\44\1\2\3\0\1\45\1\46\2\0\1\47" + "\1\50\1\51\1\52\1\53\1\54\1\55\1\56\3\7" + "\1\57\1\60\1\61\1\62\1\63\1\64\1\65\1\66" + "\14\7\1\67\2\7\1\70\2\7\1\71\11\7\1\72" + "\5\7\1\73\1\74\1\75\1\76\1\55\1\77\1\100" + "\1\101\1\102\1\103\1\104\1\105\1\106\1\107\1\110" + "\1\0\2\111\4\0\1\112\3\0\1\113\1\56\4\7" + "\1\114\1\115\2\7\1\116\3\7\1\117\5\7\1\120" + "\1\7\1\121\3\7\1\122\13\7\1\123\3\7\1\124" + "\2\7\1\125\2\0\1\3\3\0\11\7\1\126\4\7" + "\1\127\11\7\1\130\1\131\1\132\2\7\1\121\2\7" + "\1\121\3\7\1\46\2\133\2\0\5\7\1\134\1\7" + "\1\135\1\136\1\137\1\140\1\141\5\7\1\142\11\7" + "\1\143\1\144\1\7\2\0\1\145\1\146\13\7\1\147" + "\1\150\1\7\1\151\2\7\1\152\2\153\2\154\1\155" + "\2\7\1\156\1\157\1\160\4\7\1\161\1\162\1\7" + "\1\163\4\7\1\164\1\7\1\165\1\7\1\166\4\7" + "\1\167\1\170\3\7\1\171\1\172";

	private static int[] zzUnpackAction() {
		final int[] result = new int[337];
		int offset = 0;
		offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
		return result;
	}

	private static int zzUnpackAction(final String packed, final int offset, final int[] result) {
		int i = 0; /* index in packed string  */
		int j = offset; /* index in unpacked array */
		final int l = packed.length();
		while (i < l) {
			int count = packed.charAt(i++);
			final int value = packed.charAt(i++);
			do {
				result[j++] = value;
			} while (--count > 0);
		}
		return j;
	}

	/** 
	 * Translates a state to a row index in the transition table
	 */
	private static final int[] ZZ_ROWMAP = zzUnpackRowMap();

	private static final String ZZ_ROWMAP_PACKED_0 = "\0\0\0\100\0\200\0\300\0\u0100\0\u0140\0\u0180\0\u01c0" + "\0\u0200\0\u0240\0\u0280\0\u0240\0\u02c0\0\u0300\0\u0240\0\u0340" + "\0\u0380\0\u03c0\0\u0400\0\u0240\0\u0240\0\u0440\0\u0480\0\u04c0" + "\0\u0500\0\u0240\0\u0240\0\u0240\0\u0240\0\u0240\0\u0240\0\u0540" + "\0\u0240\0\u0580\0\u0240\0\u05c0\0\u0600\0\u0640\0\u0680\0\u06c0" + "\0\u0700\0\u0740\0\u0780\0\u07c0\0\u0800\0\u0840\0\u0880\0\u08c0" + "\0\u0900\0\u0940\0\u0980\0\u09c0\0\u0a00\0\u0a40\0\u0a80\0\u0ac0" + "\0\u0b00\0\u0240\0\u0b40\0\u0b80\0\u0240\0\u0bc0\0\u0c00\0\u0c40" + "\0\u0c80\0\u0cc0\0\u0240\0\u0d00\0\u0d40\0\u0d80\0\u0dc0\0\u0240" + "\0\u0e00\0\u0e40\0\u0e80\0\u0240\0\u0240\0\u0240\0\u0ec0\0\u0f00" + "\0\u0240\0\u0240\0\u0f40\0\u0f80\0\u0fc0\0\u1000\0\u1040\0\u0240" + "\0\u0240\0\u1080\0\u0240\0\u0240\0\u0240\0\u0240\0\u10c0\0\u1100" + "\0\u1140\0\u1180\0\u11c0\0\u1200\0\u1240\0\u1280\0\u12c0\0\u1300" + "\0\u1340\0\u1380\0\u0380\0\u13c0\0\u1400\0\u0380\0\u1440\0\u1480" + "\0\u0380\0\u14c0\0\u1500\0\u1540\0\u1580\0\u15c0\0\u1600\0\u1640" + "\0\u1680\0\u16c0\0\u1700\0\u1740\0\u1780\0\u17c0\0\u1800\0\u1840" + "\0\u0240\0\u0240\0\u0240\0\u0240\0\u1880\0\u0240\0\u0240\0\u0240" + "\0\u0240\0\u0240\0\u0240\0\u0240\0\u0240\0\u0240\0\u0240\0\u0c80" + "\0\u18c0\0\u0240\0\u0d00\0\u1900\0\u0240\0\u1940\0\u0240\0\u1980" + "\0\u19c0\0\u1a00\0\u0240\0\u0240\0\u1a40\0\u1a80\0\u1ac0\0\u1b00" + "\0\u0240\0\u0240\0\u1b40\0\u1b80\0\u1bc0\0\u1c00\0\u1c40\0\u1c80" + "\0\u0380\0\u1cc0\0\u1d00\0\u1d40\0\u1d80\0\u1dc0\0\u0380\0\u1e00" + "\0\u1e40\0\u1e80\0\u1ec0\0\u1f00\0\u0380\0\u1f40\0\u1f80\0\u1fc0" + "\0\u2000\0\u2040\0\u2080\0\u20c0\0\u2100\0\u2140\0\u2180\0\u21c0" + "\0\u0380\0\u2200\0\u2240\0\u2280\0\u0380\0\u22c0\0\u2300\0\u0240" + "\0\u2340\0\u2380\0\u1980\0\u23c0\0\u2400\0\u2440\0\u2480\0\u24c0" + "\0\u2500\0\u2540\0\u2580\0\u25c0\0\u2600\0\u2640\0\u2680\0\u0380" + "\0\u26c0\0\u2700\0\u2740\0\u2780\0\u0380\0\u27c0\0\u2800\0\u2840" + "\0\u2880\0\u28c0\0\u2900\0\u2940\0\u2980\0\u29c0\0\u0380\0\u0380" + "\0\u2a00\0\u2a40\0\u2a80\0\u0380\0\u2ac0\0\u2b00\0\u2b40\0\u2b80" + "\0\u2bc0\0\u2c00\0\u0240\0\u2c40\0\u0240\0\u2c80\0\u2cc0\0\u2d00" + "\0\u2d40\0\u2d80\0\u2dc0\0\u2e00\0\u2e40\0\u2e80\0\u0380\0\u0380" + "\0\u0380\0\u0380\0\u0380\0\u2ec0\0\u2f00\0\u2f40\0\u2f80\0\u2fc0" + "\0\u0380\0\u3000\0\u3040\0\u3080\0\u30c0\0\u3100\0\u3140\0\u3180" + "\0\u31c0\0\u3200\0\u0380\0\u0380\0\u3240\0\u3280\0\u32c0\0\u0380" + "\0\u0380\0\u3300\0\u3340\0\u3380\0\u33c0\0\u3400\0\u3440\0\u3480" + "\0\u34c0\0\u3500\0\u3540\0\u3580\0\u0380\0\u0380\0\u35c0\0\u0380" + "\0\u3600\0\u3640\0\u0380\0\u3680\0\u0240\0\u36c0\0\u0240\0\u0380" + "\0\u3700\0\u3740\0\u0380\0\u0380\0\u3780\0\u37c0\0\u3800\0\u3840" + "\0\u3880\0\u0380\0\u38c0\0\u3900\0\u0380\0\u3940\0\u3980\0\u39c0" + "\0\u3a00\0\u0380\0\u3a40\0\u0380\0\u3a80\0\u0380\0\u3ac0\0\u3b00" + "\0\u3b40\0\u3b80\0\u0380\0\u0380\0\u3bc0\0\u3c00\0\u3c40\0\u0380" + "\0\u0380";

	private static int[] zzUnpackRowMap() {
		final int[] result = new int[337];
		int offset = 0;
		offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
		return result;
	}

	private static int zzUnpackRowMap(final String packed, final int offset, final int[] result) {
		int i = 0; /* index in packed string  */
		int j = offset; /* index in unpacked array */
		final int l = packed.length();
		while (i < l) {
			final int high = packed.charAt(i++) << 16;
			result[j++] = high | packed.charAt(i++);
		}
		return j;
	}

	/** 
	 * The transition table of the DFA
	 */
	private static final int[] ZZ_TRANS = zzUnpackTrans();

	private static final Stringu0100\22\21\10\0\1\21\7\0\4\21\7\0" + "\2\21\14\0\11\21\1\u0101\15\21\10\0\1\21\7\0" + "\4\21\7\0\1\21\1\u0102\14\0\27\21\10\0\1\21" + "\7\0\4\21\7\0\2\21\14\0\23\21\1\u0103\3\21" + "\10\0\1\21\7\0\4\21\7\0\2\21\14\0\1\21" + "\1\u0104\25\21\10\0\1\21\7\0\4\21\7\0\2\21" + "\14\0\13\21\1\u0105\12\21\1\u0106\10\0\1\21\7\0" + "\4\21\7\0\2\21\14\0\10\21\1\u0107\16\21\10\0" + "\1\21\7\0\4\21\7\0\2\21\14\0\12\21\1\u0108" + "\14\21\10\0\1\21\7\0\4\21\7\0\2\21\14\0" + "\3\21\1\326\23\21\10\0\1\21\7\0\4\21\7\0" + "\2\21\14\0\25\21\1\u0109\1\21\10\0\1\21\7\0" + "\4\21\7\0\2\21\14\0\13\21\1\u010a\13\21\10\0" + "\1\21\7\0\4\21\7\0\2\21\14\0\5\21\1\u010b" + "\21\21\10\0\1\21\7\0\4\21\7\0\2\21\14\0" + "\2\21\1\u010c\24\21\10\0\1\21\7\0\4\21\7\0" + "\2\21\14\0\5\21\1\u010d\21\21\10\0\1\21\7\0" + "\4\21\7\0\2\21\14\0\2\21\1\u010e\24\21\10\0" + "\1\21\7\0\4\21\7\0\2\21\14\0\13\21\1\u010f" + "\13\21\10\0\1\21\7\0\4\21\7\0\2\21\14\0" + "\5\21\1\u0110\21\21\10\0\1\21\7\0\4\21\7\0" + "\2\21\14\0\7\21\1\u0111\17\21\10\0\1\21\7\0" + "\4\21\7\0\2\21\14\0\12\21\1\u0112\14\21\10\0" + "\1\21\7\0\4\21\7\0\2\21\14\0\24\21\1\u0113" + "\2\21\10\0\1\21\7\0\4\21\7\0\2\21\14\0" + "\12\21\1\u0114\14\21\10\0\1\21\7\0\4\21\7\0" + "\2\21\14\0\10\21\1\u0115\16\21\10\0\1\21\3\0" + "\1\365\103\0\4\366\2\0\1\u0116\4\0\2\366\14\0" + "\27\366\10\0\1\366\7\0\4\367\3\0\1\u0117\3\0" + "\2\367\14\0\27\367\10\0\1\367\7\0\4\21\7\0" + "\2\21\14\0\3\21\1\u0118\23\21\10\0\1\21\7\0" + "\4\21\7\0\2\21\14\0\4\21\1\u0119\22\21\10\0" + "\1\21\7\0\4\21\7\0\2\21\14\0\4\21\1\u011a" + "\22\21\10\0\1\21\7\0\4\21\7\0\2\21\14\0" + "\3\21\1\u011b\23\21\10\0\1\21\7\0\4\21\7\0" + "\2\21\14\0\5\21\1\u011c\21\21\10\0\1\21\7\0" + "\4\21\7\0\2\21\14\0\7\21\1\u011d\17\21\10\0" + "\1\21\7\0\4\21\7\0\2\21\14\0\3\21\1\u011e" + "\23\21\10\0\1\21\7\0\4\21\7\0\2\21\14\0" + "\15\21\1\u011f\11\21\10\0\1\21\7\0\4\21\7\0" + "\2\21\14\0\1\u0120\26\21\10\0\1\21\7\0\4\21" + "\7\0\2\21\14\0\12\21\1\u0121\14\21\10\0\1\21" + "\7\0\4\21\7\0\2\21\14\0\2\21\1\u0122\24\21" + "\10\0\1\21\7\0\4\21\7\0\2\21\14\0\16\21" + "\1\u0123\10\21\10\0\1\21\7\0\4\21\7\0\2\21" + "\14\0\10\21\1\u0124\16\21\10\0\1\21\7\0\4\21"
			+ "\7\0\2\21\14\0\3\21\1\u0125\23\21\10\0\1\21" + "\7\0\4\21\7\0\2\21\14\0\26\21\1\354\10\0" + "\1\21\7\0\4\21\7\0\2\21\14\0\1\u0126\26\21" + "\10\0\1\21\7\0\4\21\7\0\2\21\14\0\15\21" + "\1\u0127\11\21\10\0\1\21\7\0\4\21\7\0\2\21" + "\14\0\2\21\1\u0128\24\21\10\0\1\21\7\0\4\21" + "\7\0\2\21\14\0\13\21\1\u0129\13\21\10\0\1\21" + "\7\0\4\21\7\0\2\21\14\0\12\21\1\354\14\21" + "\10\0\1\21\7\0\4\21\7\0\2\21\14\0\10\21" + "\1\u012a\16\21\10\0\1\21\7\0\4\21\7\0\2\21" + "\14\0\7\21\1\u012b\17\21\10\0\1\21\2\0\1\u012c" + "\1\u012d\76\0\1\u012e\1\u012f\103\0\4\21\7\0\2\21" + "\14\0\12\21\1\u0130\14\21\10\0\1\21\7\0\4\21" + "\7\0\2\21\14\0\4\21\1\u0131\22\21\10\0\1\21" + "\7\0\4\21\7\0\2\21\14\0\6\21\1\u0132\20\21" + "\10\0\1\21\7\0\4\21\7\0\2\21\14\0\25\21" + "\1\u0133\1\21\10\0\1\21\7\0\4\21\7\0\1\21" + "\1\u0134\14\0\27\21\10\0\1\21\7\0\4\21\7\0" + "\2\21\14\0\12\21\1\u0135\14\21\10\0\1\21\7\0" + "\4\21\7\0\2\21\14\0\10\21\1\u0136\16\21\10\0" + "\1\21\7\0\4\21\7\0\2\21\14\0\13\21\1\354" + "\13\21\10\0\1\21\7\0\4\21\7\0\2\21\14\0" + "\3\21\1\u0137\23\21\10\0\1\21\7\0\4\21\7\0" + "\2\21\14\0\12\21\1\u0138\14\21\10\0\1\21\7\0" + "\4\21\7\0\2\21\14\0\3\21\1\u0139\23\21\10\0" + "\1\21\7\0\4\21\7\0\2\21\14\0\11\21\1\u013a" + "\15\21\10\0\1\21\7\0\4\21\7\0\2\21\14\0" + "\12\21\1\u013b\14\21\10\0\1\21\7\0\4\21\7\0" + "\2\21\14\0\2\21\1\354\24\21\10\0\1\21\3\0" + "\1\u012d\77\0\1\u012f\103\0\4\21\7\0\2\21\14\0" + "\12\21\1\u013c\14\21\10\0\1\21\7\0\4\21\7\0" + "\2\21\14\0\2\21\1\u013d\24\21\10\0\1\21\7\0" + "\4\21\7\0\2\21\14\0\21\21\1\u013e\5\21\10\0" + "\1\21\7\0\4\21\7\0\2\21\14\0\3\21\1\u013f" + "\23\21\10\0\1\21\7\0\4\21\7\0\2\21\14\0" + "\12\21\1\u0140\14\21\10\0\1\21\7\0\4\21\7\0" + "\2\21\14\0\2\21\1\u0141\24\21\10\0\1\21\7\0" + "\4\21\7\0\2\21\14\0\4\21\1\u0142\22\21\10\0" + "\1\21\7\0\4\21\7\0\2\21\14\0\21\21\1\u0143" + "\5\21\10\0\1\21\7\0\4\21\7\0\2\21\14\0" + "\15\21\1\u0144\11\21\10\0\1\21\7\0\4\21\7\0" + "\2\21\14\0\6\21\1\u0145\20\21\10\0\1\21\7\0" + "\4\21\7\0\2\21\14\0\12\21\1\u0146\14\21\10\0" + "\1\21\7\0\4\21\7\0\2\21\14\0\6\21\1\u0147" + "\20\21\10\0\1\21\7\0\4\21\7\0\2\21\14\0" + "\4\21\1\u0148\22\21\10\0\1\21\7\0\4\21\7\0" + "\2\21\14\0\6\21\1\u0149\20\21\10\0\1\21\7\0" + "\4\21\7\0\2\21\14\0\2\21\1\u014a\24\21\10\0" + "\1\21\7\0\4\21\7\0\2\21\14\0\1\u014b\26\21" + "\10\0\1\21\7\0\4\21\7\0\2\21\14\0\11\21" + "\1\u014c\15\21\10\0\1\21\7\0\4\21\7\0\2\21" + "\14\0\2\21\1\u014d\24\21\10\0\1\21\7\0\4\21" + "\7\0\2\21\14\0\3\21\1\u014e\23\21\10\0\1\21" + "\7\0\4\21\7\0\2\21\14\0\3\21\1\u014f\23\21" + "\10\0\1\21\7\0\4\21\7\0\2\21\14\0\12\21" + "\1\u0150\14\21\10\0\1\21\7\0\4\21\7\0\2\21" + "\14\0\12\21\1\u0151\14\21\10\0\1\21\1\0";

	private static int[] zzUnpackTrans() {
		final int[] result = new int[15488];
		int offset = 0;
		offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
		return result;
	}

	private static int zzUnpackTrans(final String packed, final int offset, final int[] result) {
		int i = 0; /* index in packed string  */
		int j = offset; /* index in unpacked array */
		final int l = packed.length();
		while (i < l) {
			int count = packed.charAt(i++);
			int value = packed.charAt(i++);
			value--;
			do {
				result[j++] = value;
			} while (--count > 0);
		}
		return j;
	}

	/* error codes */
	private static final int ZZ_UNKNOWN_ERROR = 0;

	private static final int ZZ_NO_MATCH = 1;

	private static final int ZZ_PUSHBACK_2BIG = 2;

	/* error messages for the codes above */
	private static final String ZZ_ERROR_MSG[] = { "Unkown internal scanner error", "Error: could not match input", "Error: pushback value was too large" };

	/**
	 * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
	 */
	private static final int[] ZZ_ATTRIBUTE = zzUnpackAttribute();

	private static final String ZZ_ATTRIBUTE_PACKED_0 = "\7\0\2\1\1\11\1\1\1\11\2\1\1\11\4\1" + "\2\11\4\1\6\11\1\1\1\11\1\1\1\11\26\1" + "\1\11\2\1\1\11\5\1\1\11\4\1\1\11\1\1" + "\2\0\3\11\2\1\2\11\5\1\2\11\1\1\4\11" + "\42\1\4\11\1\1\12\11\1\0\1\1\1\11\2\0" + "\1\11\1\0\1\11\3\0\2\11\4\1\2\11\45\1" + "\1\11\2\0\1\1\3\0\44\1\1\11\1\1\1\11" + "\2\0\36\1\2\0\25\1\1\11\1\1\1\11\42\1";

	private static int[] zzUnpackAttribute() {
		final int[] result = new int[337];
		int offset = 0;
		offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
		return result;
	}

	private static int zzUnpackAttribute(final String packed, final int offset, final int[] result) {
		int i = 0; /* index in packed string  */
		int j = offset; /* index in unpacked array */
		final int l = packed.length();
		while (i < l) {
			int count = packed.charAt(i++);
			final int value = packed.charAt(i++);
			do {
				result[j++] = value;
			} while (--count > 0);
		}
		return j;
	}

	/** the input device */
	private java.io.Reader zzReader;

	/** the current state of the DFA */
	private int zzState;

	/** the current lexical state */
	private int zzLexicalState = YYINITIAL;

	/** this buffer contains the current text to be matched and is
	    the source of the yytext() string */
	private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

	/** the textposition at the last accepting state */
	private int zzMarkedPos;

	/** the current text position in the buffer */
	private int zzCurrentPos;

	/** startRead marks the beginning of the yytext() string in the buffer */
	private int zzStartRead;

	/** endRead marks the last character in the buffer, that has been read
	    from input */
	private int zzEndRead;

	/** number of newlines encountered up to the start of the matched text */
	private int yyline;

	/** the number of characters up to the start of the matched text */
	private int yychar;

	/**
	 * the number of characters from the last newline up to the start of the 
	 * matched text
	 */
	private int yycolumn;

	/** 
	 * zzAtBOL == true <=> the scanner is currently at the beginning of a line
	 */
	private boolean zzAtBOL = true;

	/** zzAtEOF == true <=> the scanner is at the EOF */
	private boolean zzAtEOF;

	/** denotes if the user-EOF-code has already been executed */
	private boolean zzEOFDone;

	/** For the backwards DFA of general lookahead statements */
	private boolean[] zzFin = new boolean[ZZ_BUFFERSIZE + 1];

	/* user code: */

	private ComplexSymbolFactory symbolFactory = new ComplexSymbolFactory();

	private StringBuilder stringBuilder = new StringBuilder();

	private String heredocNowdocMarker;

	private boolean heredocNowdocVariableInterpolation;

	private Symbol symbol(final int type) {
		final String text = yytext();
		final Location left = new Location(yyline, yycolumn);
		final Location right = new Location(yyline, yycolumn + text.length());
		return symbolFactory.newSymbol(text, type, left, right);
	}

	private Symbol symbol(final int type, final Object value) {
		final String text = yytext();
		final Location left = new Location(yyline, yycolumn);
		final Location right = new Location(yyline, yycolumn + text.length());
		return symbolFactory.newSymbol(text, type, left, right, value);
	}

	private void beginHeredocNowdoc(String markerContainer, final boolean markerQuoted, final boolean interpolateVariables) {
		markerContainer = markerContainer.trim();
		this.heredocNowdocMarker = markerContainer.substring(markerQuoted ? 4 : 3, markerContainer.length() - (markerQuoted ? 1 : 0));
		this.heredocNowdocVariableInterpolation = interpolateVariables;
		stringBuilder.setLength(0);
		yybegin(HEREDOC_NOWDOC);
	}

	private Symbol handleHeredocNowdocStopperCandidate(final String identifier) {
		if (identifier.equals(heredocNowdocMarker)) {
			return buildHeredocNowdocString();
		} else {
			handleHeredocNowdocContent(identifier);
			return null;
		}
	}

	private void handleHeredocNowdocContent(final String content) {
		stringBuilder.append(content);
	}

	private Symbol buildHeredocNowdocString() {
		// TODO interpolation
		yybegin(CODE);
		return symbol(Tokens.STRING_LITERAL, stringBuilder.toString());
	}

	/**
	 * Creates a new scanner
	 *
	 * @param   in  the java.io.Reader to read input from.
	 */
	public Lexer(final java.io.Reader in) {
		this.zzReader = in;
	}

	/** 
	 * Unpacks the compressed character translation table.
	 *
	 * @param packed   the packed character translation table
	 * @return         the unpacked character translation table
	 */
	private static char[] zzUnpackCMap(final String packed) {
		final char[] map = new char[0x10000];
		int i = 0; /* index in packed string  */
		int j = 0; /* index in unpacked array */
		while (i < 1930) {
			int count = packed.charAt(i++);
			final char value = packed.charAt(i++);
			do {
				map[j++] = value;
			} while (--count > 0);
		}
		return map;
	}

	/**
	 * Refills the input buffer.
	 *
	 * @return      <code>false</code>, iff there was new input.
	 * 
	 * @exception   java.io.IOException  if any I/O-Error occurs
	 */
	private boolean zzRefill() throws java.io.IOException {

		/* first: make room (if you can) */
		if (zzStartRead > 0) {
			System.arraycopy(zzBuffer, zzStartRead, zzBuffer, 0, zzEndRead - zzStartRead);

			/* translate stored positions */
			zzEndRead -= zzStartRead;
			zzCurrentPos -= zzStartRead;
			zzMarkedPos -= zzStartRead;
			zzStartRead = 0;
		}

		/* is the buffer big enough? */
		if (zzCurrentPos >= zzBuffer.length) {
			/* if not: blow it up */
			final char newBuffer[] = new char[zzCurrentPos * 2];
			System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
			zzBuffer = newBuffer;
		}

		/* finally: fill the buffer with new input */
		final int numRead = zzReader.read(zzBuffer, zzEndRead, zzBuffer.length - zzEndRead);

		if (numRead > 0) {
			zzEndRead += numRead;
			return false;
		}
		// unlikely but not impossible: read 0 characters, but not at end of stream    
		if (numRead == 0) {
			final int c = zzReader.read();
			if (c == -1) {
				return true;
			} else {
				zzBuffer[zzEndRead++] = (char)c;
				return false;
			}
		}

		// numRead < 0
		return true;
	}

	/**
	 * Closes the input stream.
	 */
	public final void yyclose() throws java.io.IOException {
		zzAtEOF = true; /* indicate end of file */
		zzEndRead = zzStartRead; /* invalidate buffer    */

		if (zzReader != null) {
			zzReader.close();
		}
	}

	/**
	 * Resets the scanner to read from a new input stream.
	 * Does not close the old reader.
	 *
	 * All internal variables are reset, the old input stream 
	 * <b>cannot</b> be reused (internal buffer is discarded and lost).
	 * Lexical state is set to <tt>ZZ_INITIAL</tt>.
	 *
	 * Internal scan buffer is resized down to its initial length, if it has grown.
	 *
	 * @param reader   the new input stream 
	 */
	public final void yyreset(final java.io.Reader reader) {
		zzReader = reader;
		zzAtBOL = true;
		zzAtEOF = false;
		zzEOFDone = false;
		zzEndRead = zzStartRead = 0;
		zzCurrentPos = zzMarkedPos = 0;
		yyline = yychar = yycolumn = 0;
		zzLexicalState = YYINITIAL;
		if (zzBuffer.length > ZZ_BUFFERSIZE) {
			zzBuffer = new char[ZZ_BUFFERSIZE];
		}
	}

	/**
	 * Returns the current lexical state.
	 */
	public final int yystate() {
		return zzLexicalState;
	}

	/**
	 * Enters a new lexical state
	 *
	 * @param newState the new lexical state
	 */
	public final void yybegin(final int newState) {
		zzLexicalState = newState;
	}

	/**
	 * Returns the text matched by the current regular expression.
	 */
	public final String yytext() {
		return new String(zzBuffer, zzStartRead, zzMarkedPos - zzStartRead);
	}

	/**
	 * Returns the character at position <tt>pos</tt> from the 
	 * matched text. 
	 * 
	 * It is equivalent to yytext().charAt(pos), but faster
	 *
	 * @param pos the position of the character to fetch. 
	 *            A value from 0 to yylength()-1.
	 *
	 * @return the character at position pos
	 */
	public final char yycharat(final int pos) {
		return zzBuffer[zzStartRead + pos];
	}

	/**
	 * Returns the length of the matched text region.
	 */
	public final int yylength() {
		return zzMarkedPos - zzStartRead;
	}

	/**
	 * Reports an error that occured while scanning.
	 *
	 * In a wellformed scanner (no or only correct usage of 
	 * yypushback(int) and a match-all fallback rule) this method 
	 * will only be called with things that "Can't Possibly Happen".
	 * If this method is called, something is seriously wrong
	 * (e.g. a JFlex bug producing a faulty scanner etc.).
	 *
	 * Usual syntax/scanner level error handling should be done
	 * in error fallback rules.
	 *
	 * @param   errorCode  the code of the errormessage to display
	 */
	private void zzScanError(final int errorCode) {
		String message;
		try {
			message = ZZ_ERROR_MSG[errorCode];
		} catch (final ArrayIndexOutOfBoundsException e) {
			message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
		}

		throw new Error(message);
	}

	/**
	 * Pushes the specified amount of characters back into the input stream.
	 *
	 * They will be read again by then next call of the scanning method
	 *
	 * @param number  the number of characters to be read again.
	 *                This number must not be greater than yylength()!
	 */
	public void yypushback(final int number) {
		if (number > yylength()) {
			zzScanError(ZZ_PUSHBACK_2BIG);
		}

		zzMarkedPos -= number;
	}

	/**
	 * Contains user EOF-code, which will be executed exactly once,
	 * when the end of file is reached
	 */
	private void zzDoEOF() throws java.io.IOException {
		if (!zzEOFDone) {
			zzEOFDone = true;
			yyclose();
		}
	}

	/**
	 * Resumes scanning until the next regular expression is matched,
	 * the end of input is encountered or an I/O-Error occurs.
	 *
	 * @return      the next token
	 * @exception   java.io.IOException  if any I/O-Error occurs
	 */
	@Override
	public java_cup.runtime.Symbol next_token() throws java.io.IOException {
		int zzInput;
		int zzAction;

		// cached fields:
		int zzCurrentPosL;
		int zzMarkedPosL;
		int zzEndReadL = zzEndRead;
		char[] zzBufferL = zzBuffer;
		final char[] zzCMapL = ZZ_CMAP;

		final int[] zzTransL = ZZ_TRANS;
		final int[] zzRowMapL = ZZ_ROWMAP;
		final int[] zzAttrL = ZZ_ATTRIBUTE;

		while (true) {
			zzMarkedPosL = zzMarkedPos;

			boolean zzR = false;
			for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL; zzCurrentPosL++) {
				switch (zzBufferL[zzCurrentPosL]) {
				case '\u000B':
				case '\u000C':
				case '\u0085':
				case '\u2028':
				case '\u2029':
					yyline++;
					yycolumn = 0;
					zzR = false;
					break;
				case '\r':
					yyline++;
					yycolumn = 0;
					zzR = true;
					break;
				case '\n':
					if (zzR) {
						zzR = false;
					} else {
						yyline++;
						yycolumn = 0;
					}
					break;
				default:
					zzR = false;
					yycolumn++;
				}
			}

			if (zzR) {
				// peek one character ahead if it is \n (if we have counted one line too much)
				boolean zzPeek;
				if (zzMarkedPosL < zzEndReadL) {
					zzPeek = zzBufferL[zzMarkedPosL] == '\n';
				} else if (zzAtEOF) {
					zzPeek = false;
				} else {
					final boolean eof = zzRefill();
					zzEndReadL = zzEndRead;
					zzMarkedPosL = zzMarkedPos;
					zzBufferL = zzBuffer;
					if (eof) {
						zzPeek = false;
					} else {
						zzPeek = zzBufferL[zzMarkedPosL] == '\n';
					}
				}
				if (zzPeek) {
					yyline--;
				}
			}
			zzAction = -1;

			zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

			zzState = ZZ_LEXSTATE[zzLexicalState];

			// set up zzAction for empty match case:
			int zzAttributes = zzAttrL[zzState];
			if ((zzAttributes & 1) == 1) {
				zzAction = zzState;
			}

			zzForAction: {
				while (true) {

					if (zzCurrentPosL < zzEndReadL) {
						zzInput = zzBufferL[zzCurrentPosL++];
					} else if (zzAtEOF) {
						zzInput = YYEOF;
						break zzForAction;
					} else {
						// store back cached positions
						zzCurrentPos = zzCurrentPosL;
						zzMarkedPos = zzMarkedPosL;
						final boolean eof = zzRefill();
						// get translated positions and possibly new buffer
						zzCurrentPosL = zzCurrentPos;
						zzMarkedPosL = zzMarkedPos;
						zzBufferL = zzBuffer;
						zzEndReadL = zzEndRead;
						if (eof) {
							zzInput = YYEOF;
							break zzForAction;
						} else {
							zzInput = zzBufferL[zzCurrentPosL++];
						}
					}
					final int zzNext = zzTransL[zzRowMapL[zzState] + zzCMapL[zzInput]];
					if (zzNext == -1) {
						break zzForAction;
					}
					zzState = zzNext;

					zzAttributes = zzAttrL[zzState];
					if ((zzAttributes & 1) == 1) {
						zzAction = zzState;
						zzMarkedPosL = zzCurrentPosL;
						if ((zzAttributes & 8) == 8) {
							break zzForAction;
						}
					}

				}
			}

			// store back cached position
			zzMarkedPos = zzMarkedPosL;

			switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
			case 1: {
				return symbol(Tokens.VERBATIM_CONTENT, yytext());
			}
			case 123:
				break;
			case 2: {
				final String s = yytext();
				final int code = s.charAt(0);
				throw new RuntimeException("Illegal character '" + yytext() + "' (code " + code + ")");
			}
			case 124:
				break;
			case 3: { // ignore
			}
			case 125:
				break;
			case 4: {
				return symbol(Tokens.DIVIDE);
			}
			case 126:
				break;
			case 5: {
				return symbol(Tokens.TIMES);
			}
			case 127:
				break;
			case 6: {
				return symbol(Tokens.INTEGER_LITERAL, Integer.parseInt(yytext()));
			}
			case 128:
				break;
			case 7: {
				return symbol(Tokens.IDENTIFIER, yytext());
			}
			case 129:
				break;
			case 8: {
				return symbol(Tokens.LESS);
			}
			case 130:
				break;
			case 9: {
				stringBuilder.setLength(0);
				yybegin(DOUBLE_QUOTED_STRING);
			}
			case 131:
				break;
			case 10: {
				stringBuilder.setLength(0);
				yybegin(SINGLE_QUOTED_STRING);
			}
			case 132:
				break;
			case 11: {
				return symbol(Tokens.QUESTION_MARK);
			}
			case 133:
				break;
			case 12: {
				return symbol(Tokens.ASSIGN);
			}
			case 134:
				break;
			case 13: {
				return symbol(Tokens.GREATER);
			}
			case 135:
				break;
			case 14: {
				return symbol(Tokens.OPENING_PARENTHESIS);
			}
			case 136:
				break;
			case 15: {
				return symbol(Tokens.CLOSING_PARENTHESIS);
			}
			case 137:
				break;
			case 16: {
				return symbol(Tokens.OPENING_CURLY_BRACE);
			}
			case 138:
				break;
			case 17: {
				return symbol(Tokens.CLOSING_CURLY_BRACE);
			}
			case 139:
				break;
			case 18: {
				return symbol(Tokens.OPENING_SQUARE_BRACKET);
			}
			case 140:
				break;
			case 19: {
				return symbol(Tokens.CLOSING_SQUARE_BRACKET);
			}
			case 141:
				break;
			case 20: {
				return symbol(Tokens.MINUS);
			}
			case 142:
				break;
			case 21: {
				return symbol(Tokens.SEMICOLON);
			}
			case 143:
				break;
			case 22: {
				return symbol(Tokens.COLON);
			}
			case 144:
				break;
			case 23: {
				return symbol(Tokens.COMMA);
			}
			case 145:
				break;
			case 24: {
				return symbol(Tokens.PLUS);
			}
			case 146:
				break;
			case 25: {
				return symbol(Tokens.MOD);
			}
			case 147:
				break;
			case 26: {
				return symbol(Tokens.CONCAT);
			}
			case 148:
				break;
			case 27: {
				return symbol(Tokens.LOGICAL_NOT);
			}
			case 149:
				break;
			case 28: {
				return symbol(Tokens.BITWISE_AND);
			}
			case 150:
				break;
			case 29: {
				return symbol(Tokens.BITWISE_OR);
			}
			case 151:
				break;
			case 30: {
				return symbol(Tokens.BITWISE_NOT);
			}
			case 152:
				break;
			case 31: {
				return symbol(Tokens.BITWISE_XOR);
			}
			case 153:
				break;
			case 32: {
				stringBuilder.append(yytext());
			}
			case 154:
				break;
			case 33: {
				yybegin(CODE);
				return symbol(Tokens.STRING_LITERAL, stringBuilder.toString());
			}
			case 155:
				break;
			case 34: {
				stringBuilder.append('\\');
			}
			case 156:
				break;
			case 35: { // TODO interpolate
				stringBuilder.append(yytext());
			}
			case 157:
				break;
			case 36: {
				handleHeredocNowdocContent(yytext());
			}
			case 158:
				break;
			case 37:
				// lookahead expression with fixed base length
				zzMarkedPos = zzStartRead + 1;
				{
					return symbol(Tokens.VERBATIM_CONTENT, yytext());
				}
			case 159:
				break;
			case 38: {
				yybegin(CODE);
			}
			case 160:
				break;
			case 39: {
				return symbol(Tokens.DIVIDE_ASSIGN);
			}
			case 161:
				break;
			case 40: {
				return symbol(Tokens.POWER);
			}
			case 162:
				break;
			case 41: {
				return symbol(Tokens.TIMES_ASSIGN);
			}
			case 163:
				break;
			case 42: {
				return symbol(Tokens.LOCAL_VARIABLE, yytext().substring(1));
			}
			case 164:
				break;
			case 43: {
				return symbol(Tokens.SHIFT_LEFT);
			}
			case 165:
				break;
			case 44: {
				return symbol(Tokens.LESS_EQUAL);
			}
			case 166:
				break;
			case 45: {
				return symbol(Tokens.NOT_EQUAL);
			}
			case 167:
				break;
			case 46: {
				yybegin(YYINITIAL);
				return symbol(Tokens.SEMICOLON);
			}
			case 168:
				break;
			case 47: {
				return symbol(Tokens.EQUAL);
			}
			case 169:
				break;
			case 48: {
				return symbol(Tokens.DOUBLE_RIGHT_ARROW);
			}
			case 170:
				break;
			case 49: {
				return symbol(Tokens.GREATER_EQUAL);
			}
			case 171:
				break;
			case 50: {
				return symbol(Tokens.SHIFT_RIGHT);
			}
			case 172:
				break;
			case 51: {
				return symbol(Tokens.MINUS_ASSIGN);
			}
			case 173:
				break;
			case 52: {
				return symbol(Tokens.RIGHT_ARROW);
			}
			case 174:
				break;
			case 53: {
				return symbol(Tokens.DECREMENT);
			}
			case 175:
				break;
			case 54: {
				return symbol(Tokens.SCOPE_RESOLUTION);
			}
			case 176:
				break;
			case 55: {
				return symbol(Tokens.IF);
			}
			case 177:
				break;
			case 56: {
				return symbol(Tokens.LOW_PRECEDENCE_LOGICAL_SHORTCUT_OR);
			}
			case 178:
				break;
			case 57: {
				return symbol(Tokens.AS);
			}
			case 179:
				break;
			case 58: {
				return symbol(Tokens.DO);
			}
			case 180:
				break;
			case 59: {
				return symbol(Tokens.PLUS_ASSIGN);
			}
			case 181:
				break;
			case 60: {
				return symbol(Tokens.INCREMENT);
			}
			case 182:
				break;
			case 61: {
				return symbol(Tokens.MOD_ASSIGN);
			}
			case 183:
				break;
			case 62: {
				return symbol(Tokens.CONCAT_ASSIGN);
			}
			case 184:
				break;
			case 63: {
				return symbol(Tokens.BITWISE_AND_ASSIGN);
			}
			case 185:
				break;
			case 64: {
				return symbol(Tokens.LOGICAL_SHORTCUT_AND);
			}
			case 186:
				break;
			case 65: {
				return symbol(Tokens.BITWISE_OR_ASSIGN);
			}
			case 187:
				break;
			case 66: {
				return symbol(Tokens.LOGICAL_SHORTCUT_OR);
			}
			case 188:
				break;
			case 67: {
				return symbol(Tokens.BITWISE_XOR_ASSIGN);
			}
			case 189:
				break;
			case 68: {
				stringBuilder.append('\'');
			}
			case 190:
				break;
			case 69: {
				stringBuilder.append('\n');
			}
			case 191:
				break;
			case 70: {
				stringBuilder.append('\t');
			}
			case 192:
				break;
			case 71: {
				stringBuilder.append('\r');
			}
			case 193:
				break;
			case 72: {
				stringBuilder.append('\"');
			}
			case 194:
				break;
			case 73:
			// general lookahead, find correct zzMarkedPos
			{
				int zzFState = 5;
				int zzFPos = zzStartRead;
				if (zzFin.length <= zzBufferL.length) {
					zzFin = new boolean[zzBufferL.length + 1];
				}
				final boolean zzFinL[] = zzFin;
				while (zzFState != -1 && zzFPos < zzMarkedPos) {
					zzFinL[zzFPos] = ((zzAttrL[zzFState] & 1) == 1);
					zzInput = zzBufferL[zzFPos++];
					zzFState = zzTransL[zzRowMapL[zzFState] + zzCMapL[zzInput]];
				}
				if (zzFState != -1) {
					zzFinL[zzFPos++] = ((zzAttrL[zzFState] & 1) == 1);
				}
				while (zzFPos <= zzMarkedPos) {
					zzFinL[zzFPos++] = false;
				}

				zzFState = 6;
				zzFPos = zzMarkedPos;
				while (!zzFinL[zzFPos] || (zzAttrL[zzFState] & 1) != 1) {
					zzInput = zzBufferL[--zzFPos];
					zzFState = zzTransL[zzRowMapL[zzFState] + zzCMapL[zzInput]];
				}
				;
				zzMarkedPos = zzFPos;
			}
				{
					final Symbol s = handleHeredocNowdocStopperCandidate(yytext());
					if (s != null) {
						return s;
					}
				}
			case 195:
				break;
			case 74: {
				yybegin(CODE);
				return symbol(Tokens.IDENTIFIER, "echo");
			}
			case 196:
				break;
			case 75: {
				return symbol(Tokens.SHIFT_LEFT_ASSIGN);
			}
			case 197:
				break;
			case 76: {
				return symbol(Tokens.IDENTICAL);
			}
			case 198:
				break;
			case 77: {
				return symbol(Tokens.SHIFT_RIGHT_ASSIGN);
			}
			case 199:
				break;
			case 78: {
				return symbol(Tokens.FOR);
			}
			case 200:
				break;
			case 79: {
				return symbol(Tokens.NEW);
			}
			case 201:
				break;
			case 80: {
				return symbol(Tokens.TRY);
			}
			case 202:
				break;
			case 81: {
				return symbol(Tokens.CAST_TYPE_NAME);
			}
			case 203:
				break;
			case 82: {
				return symbol(Tokens.LOW_PRECEDENCE_LOGICAL_SHORTCUT_AND);
			}
			case 204:
				break;
			case 83: {
				return symbol(Tokens.LOW_PRECEDENCE_LOGICAL_XOR);
			}
			case 205:
				break;
			case 84: {
				return symbol(Tokens.VAR);
			}
			case 206:
				break;
			case 85: {
				return symbol(Tokens.NOT_IDENTICAL);
			}
			case 207:
				break;
			case 86: {
				return symbol(Tokens.NULL_LITERAL);
			}
			case 208:
				break;
			case 87: {
				return symbol(Tokens.BOOLEAN_LITERAL, true);
			}
			case 209:
				break;
			case 88: {
				return symbol(Tokens.SELF);
			}
			case 210:
				break;
			case 89: {
				return symbol(Tokens.ECHO);
			}
			case 211:
				break;
			case 90: {
				return symbol(Tokens.ELSE);
			}
			case 212:
				break;
			case 91: {
				beginHeredocNowdoc(yytext(), false, true);
			}
			case 213:
				break;
			case 92: {
				return symbol(Tokens.FINAL);
			}
			case 214:
				break;
			case 93: {
				return symbol(Tokens.BOOLEAN_LITERAL, false);
			}
			case 215:
				break;
			case 94: {
				return symbol(Tokens.CONST);
			}
			case 216:
				break;
			case 95: {
				return symbol(Tokens.CLASS);
			}
			case 217:
				break;
			case 96: {
				return symbol(Tokens.CATCH);
			}
			case 218:
				break;
			case 97: {
				return symbol(Tokens.THROW);
			}
			case 219:
				break;
			case 98: {
				return symbol(Tokens.ARRAY);
			}
			case 220:
				break;
			case 99: {
				return symbol(Tokens.BREAK);
			}
			case 221:
				break;
			case 100: {
				return symbol(Tokens.WHILE);
			}
			case 222:
				break;
			case 101: {
				return symbol(Tokens.PUBLIC);
			}
			case 223:
				break;
			case 102: {
				return symbol(Tokens.PARENT);
			}
			case 224:
				break;
			case 103: {
				return symbol(Tokens.STATIC);
			}
			case 225:
				break;
			case 104: {
				return symbol(Tokens.ELSEIF);
			}
			case 226:
				break;
			case 105: {
				return symbol(Tokens.RETURN);
			}
			case 227:
				break;
			case 106: {
				return symbol(Tokens.GLOBAL);
			}
			case 228:
				break;
			case 107: {
				beginHeredocNowdoc(yytext(), true, true);
			}
			case 229:
				break;
			case 108: {
				beginHeredocNowdoc(yytext(), true, false);
			}
			case 230:
				break;
			case 109: {
				return symbol(Tokens.PRIVATE);
			}
			case 231:
				break;
			case 110: {
				return symbol(Tokens.FINALLY);
			}
			case 232:
				break;
			case 111: {
				return symbol(Tokens.FOREACH);
			}
			case 233:
				break;
			case 112: {
				return symbol(Tokens.INCLUDE);
			}
			case 234:
				break;
			case 113: {
				return symbol(Tokens.EXTENDS);
			}
			case 235:
				break;
			case 114: {
				return symbol(Tokens.REQUIRE);
			}
			case 236:
				break;
			case 115: {
				return symbol(Tokens.FUNCTION);
			}
			case 237:
				break;
			case 116: {
				return symbol(Tokens.ABSTRACT);
			}
			case 238:
				break;
			case 117: {
				return symbol(Tokens.PROTECTED);
			}
			case 239:
				break;
			case 118: {
				return symbol(Tokens.INTERFACE);
			}
			case 240:
				break;
			case 119: {
				return symbol(Tokens.INSTANCEOF);
			}
			case 241:
				break;
			case 120: {
				return symbol(Tokens.IMPLEMENTS);
			}
			case 242:
				break;
			case 121: {
				return symbol(Tokens.INCLUDE_ONCE);
			}
			case 243:
				break;
			case 122: {
				return symbol(Tokens.REQUIRE_ONCE);
			}
			case 244:
				break;
			default:
				if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
					zzAtEOF = true;
					zzDoEOF();
					{
						final Location location = new Location(yyline, yycolumn);
						return symbolFactory.newSymbol("EOF", Tokens.EOF, location, location);
					}
				} else {
					zzScanError(ZZ_NO_MATCH);
				}
			}
		}
	}

}
