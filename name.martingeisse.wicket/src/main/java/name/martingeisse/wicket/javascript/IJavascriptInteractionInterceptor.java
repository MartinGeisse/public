/**
 * Copyright (c) 2010 Martin Geisse
 *
 * This file is distributed under the terms of the MIT license.
 */

package name.martingeisse.wicket.javascript;

import java.io.Serializable;

/**
 * Implementations of this interface are able to "intercept" commands
 * and inject custom behavior. Assume that a component provides a specific
 * feature that involves user interaction with Javascript. If this component
 * allows to install an interceptor, then this interceptor can provide
 * additional client-side functionality *before* a server round-trip
 * occurs, and can also accept additional data from the user.
 * 
 * A typical example for an interceptor is {@link #CONFIRM}: This interceptor
 * displays a Javascript confirmation dialog before the Javascript continues.
 * The original action is only executed if confirmed. Likewise, {@link #PROMPT}
 * allows to capture a text string from the user.
 * 
 * Implementation: A component provides interceptor support by allowing its
 * calling code to set an interceptor. When it generates the relevant piece
 * of Javascript code, it wraps that code in a function and instead invokes
 * a Javascript function generated by the interceptor, passing the original
 * function. How interceptors work is best explained by using some simple examples:
 * - the {@link #SKIP} interceptor function does nothing, so the original
 *   action is skipped
 * - the {@link #PASS} interceptor function simply calls the original function,
 *   acting as a "null" interceptor
 * - the {@link #CONFIRM} interceptor function opens a confirmation dialog
 *   and calls the original function if and only if the user confirms the action. 
 * - the {@link #PROMPT} interceptor function opens a text input dialog
 *   and calls the original function if and only if the user confirms the dialog,
 *   sending the user's input as an additional parameter. 
 * 
 * On a lower level, the interceptor has a method that generates the above-mentioned
 * Javascript interceptor function (as a JS function expression).
 * 
 * @param <T> the type of the extra parameter that is generated by the interceptor
 * and passed to its caller
 */
public interface IJavascriptInteractionInterceptor<T> extends Serializable {

	/**
	 * Prints the interceptor function of this interceptor to the specified builder.
	 * @param builder the string builder to write to
	 */
	public void printInterceptorFunction(StringBuilder builder);
	
	/**
	 * Converts the extra parameter to type T.
	 * @param jsonData the parsed JSON data from the request
	 * @return the converted parameter value
	 */
	public T convertParameter(Object jsonData);

	/**
	 * Does not call the original function. This is the default
	 * {@link SkipInterceptor} using {@link Void} parameter type.
	 */
	public static final IJavascriptInteractionInterceptor<Void> SKIP = new SkipInterceptor<Void>();

	/**
	 * Simply calls the original function. This is the default
	 * {@link PassInterceptor} using {@link Void} parameter type.
	 */
	public static final IJavascriptInteractionInterceptor<Void> PASS = new PassInterceptor<Void>();

	/**
	 * Opens a confirmation dialog and calls the original function if and only
	 * if the user confirmed. This is the default
	 * {@link ConfirmInterceptor} using {@link Void} parameter type.
	 */
	public static final IJavascriptInteractionInterceptor<Void> CONFIRM = new ConfirmInterceptor<Void>();
	
	/**
	 * Opens a text input dialog and calls the original function if and only
	 * if the user confirmed, passing the text input as an additional parameter.
	 */
	public static final IJavascriptInteractionInterceptor<String> PROMPT = new AbstractStringInterceptor() {
		@Override
		public void printInterceptorFunction(StringBuilder builder) {
			builder.append("function(f){var input = prompt(); if (input != null) f(JSON.stringify(input));}");
		}
	};
	
}
