/* The following code was generated by JFlex 1.5.0-SNAPSHOT */


// ---------------------------------------------------------------------------------------------------------
// --- header information
// ---------------------------------------------------------------------------------------------------------


// imports
package name.martingeisse.phunky.runtime.parser;
import java_cup.runtime.*;
import java_cup.runtime.ComplexSymbolFactory.Location;

/**
 * The Lexer.
 */

public class Lexer implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;
  private static final String ZZ_NL = System.getProperty("line.separator");

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int CODE = 2;
  public static final int STRING = 4;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2, 2
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\3\1\2\1\0\1\3\1\1\22\0\1\3\1\57\1\64"+
    "\1\0\1\12\1\56\1\60\1\0\1\21\1\22\1\5\1\54\1\31"+
    "\1\55\1\0\1\4\1\6\11\7\1\30\1\27\1\13\1\17\1\20"+
    "\1\14\1\0\32\10\1\25\1\65\1\26\1\63\1\10\1\0\1\42"+
    "\1\46\1\35\1\47\1\44\1\32\1\10\1\16\1\37\1\10\1\52"+
    "\1\41\1\10\1\34\1\40\1\15\1\10\1\45\1\43\1\36\1\33"+
    "\1\50\1\51\1\10\1\53\1\10\1\23\1\61\1\24\1\62\53\0"+
    "\1\10\12\0\1\10\4\0\1\10\5\0\27\10\1\0\37\10\1\0"+
    "\u01ca\10\4\0\14\10\16\0\5\10\7\0\1\10\1\0\1\10\126\0"+
    "\1\10\52\0\5\10\1\0\2\10\2\0\4\10\10\0\1\10\1\0"+
    "\3\10\1\0\1\10\1\0\24\10\1\0\123\10\1\0\213\10\10\0"+
    "\236\10\11\0\46\10\2\0\1\10\7\0\47\10\50\0\16\10\1\0"+
    "\1\10\1\0\2\10\1\0\2\10\1\0\1\10\10\0\33\10\5\0"+
    "\3\10\35\0\13\10\5\0\70\10\1\0\7\10\12\11\4\0\146\10"+
    "\1\0\10\10\4\0\10\10\4\0\3\10\12\11\3\10\2\0\1\10"+
    "\20\0\60\10\15\0\145\10\16\0\12\11\41\10\11\0\2\10\4\0"+
    "\1\10\5\0\30\10\2\0\23\10\23\0\31\10\107\0\1\10\1\0"+
    "\13\10\67\0\6\10\6\0\17\10\1\0\74\10\1\0\20\10\1\0"+
    "\3\10\4\0\17\10\2\0\12\11\1\0\7\10\1\0\7\10\1\0"+
    "\3\10\1\0\10\10\2\0\2\10\2\0\26\10\1\0\7\10\1\0"+
    "\1\10\3\0\4\10\3\0\10\10\2\0\2\10\2\0\2\10\1\0"+
    "\1\10\10\0\1\10\4\0\2\10\1\0\5\10\2\0\12\11\2\10"+
    "\17\0\3\10\1\0\6\10\4\0\2\10\2\0\26\10\1\0\7\10"+
    "\1\0\2\10\1\0\2\10\1\0\2\10\4\0\5\10\4\0\2\10"+
    "\2\0\2\10\4\0\1\10\7\0\4\10\1\0\1\10\7\0\12\11"+
    "\6\10\13\0\3\10\1\0\11\10\1\0\3\10\1\0\26\10\1\0"+
    "\7\10\1\0\2\10\1\0\5\10\3\0\11\10\1\0\3\10\1\0"+
    "\2\10\3\0\1\10\17\0\4\10\2\0\12\11\21\0\3\10\1\0"+
    "\10\10\2\0\2\10\2\0\26\10\1\0\7\10\1\0\2\10\1\0"+
    "\5\10\3\0\10\10\2\0\2\10\2\0\2\10\11\0\2\10\4\0"+
    "\2\10\1\0\5\10\2\0\12\11\1\0\1\10\20\0\2\10\1\0"+
    "\6\10\3\0\3\10\1\0\4\10\3\0\2\10\1\0\1\10\1\0"+
    "\2\10\3\0\2\10\3\0\3\10\3\0\14\10\4\0\5\10\3\0"+
    "\3\10\1\0\3\10\3\0\1\10\6\0\1\10\16\0\12\11\21\0"+
    "\3\10\1\0\10\10\1\0\3\10\1\0\27\10\1\0\12\10\1\0"+
    "\5\10\3\0\10\10\1\0\3\10\1\0\3\10\10\0\2\10\1\0"+
    "\2\10\6\0\4\10\2\0\12\11\22\0\2\10\1\0\10\10\1\0"+
    "\3\10\1\0\27\10\1\0\12\10\1\0\5\10\3\0\10\10\1\0"+
    "\3\10\1\0\3\10\10\0\2\10\7\0\1\10\1\0\4\10\2\0"+
    "\12\11\1\0\2\10\17\0\2\10\1\0\10\10\1\0\3\10\1\0"+
    "\51\10\2\0\10\10\1\0\3\10\1\0\3\10\1\0\1\10\10\0"+
    "\1\10\10\0\4\10\2\0\12\11\12\0\6\10\2\0\2\10\1\0"+
    "\22\10\3\0\30\10\1\0\11\10\1\0\1\10\2\0\7\10\10\0"+
    "\6\10\1\0\1\10\1\0\10\10\22\0\2\10\15\0\72\10\5\0"+
    "\7\10\6\0\1\10\2\0\12\11\47\0\2\10\1\0\1\10\2\0"+
    "\2\10\1\0\1\10\2\0\1\10\6\0\4\10\1\0\7\10\1\0"+
    "\3\10\1\0\1\10\1\0\1\10\2\0\2\10\1\0\15\10\1\0"+
    "\3\10\2\0\5\10\1\0\1\10\6\0\1\10\2\0\12\11\2\0"+
    "\4\10\40\0\1\10\37\0\12\11\26\0\10\10\1\0\44\10\4\0"+
    "\21\10\6\0\20\10\1\0\44\10\103\0\67\10\1\0\1\10\2\0"+
    "\5\10\12\11\6\0\23\10\2\0\4\10\5\0\31\10\7\0\1\10"+
    "\1\0\12\11\2\0\2\10\2\0\46\10\1\0\1\10\5\0\1\10"+
    "\2\0\53\10\1\0\u014d\10\1\0\4\10\2\0\7\10\1\0\1\10"+
    "\1\0\4\10\2\0\51\10\1\0\4\10\2\0\41\10\1\0\4\10"+
    "\2\0\7\10\1\0\1\10\1\0\4\10\2\0\17\10\1\0\71\10"+
    "\1\0\4\10\2\0\103\10\4\0\1\10\40\0\20\10\20\0\125\10"+
    "\14\0\u026c\10\2\0\21\10\1\0\32\10\5\0\113\10\3\0\3\10"+
    "\17\0\15\10\1\0\6\10\14\0\24\10\14\0\24\10\14\0\15\10"+
    "\1\0\3\10\1\0\2\10\14\0\64\10\2\0\23\10\16\0\1\10"+
    "\4\0\1\10\3\0\12\11\46\0\12\11\6\0\130\10\10\0\53\10"+
    "\5\0\106\10\12\0\35\10\3\0\14\10\4\0\11\10\15\0\12\11"+
    "\36\10\2\0\5\10\13\0\54\10\4\0\32\10\6\0\12\11\46\0"+
    "\34\10\4\0\77\10\2\0\24\10\13\0\12\11\6\0\12\11\15\0"+
    "\1\10\130\0\64\10\1\0\17\10\1\0\7\10\4\0\12\11\46\0"+
    "\52\10\2\0\4\10\12\11\54\10\1\0\13\10\16\0\66\10\12\0"+
    "\12\11\3\0\3\10\12\11\44\10\153\0\4\10\1\0\6\10\1\0"+
    "\2\10\11\0\300\10\100\0\u0116\10\2\0\6\10\2\0\46\10\2\0"+
    "\6\10\2\0\10\10\1\0\1\10\1\0\1\10\1\0\1\10\1\0"+
    "\37\10\2\0\65\10\1\0\7\10\1\0\1\10\3\0\3\10\1\0"+
    "\7\10\3\0\4\10\2\0\6\10\4\0\15\10\5\0\3\10\1\0"+
    "\7\10\164\0\1\10\15\0\1\10\20\0\15\10\145\0\1\10\4\0"+
    "\1\10\2\0\12\10\1\0\1\10\3\0\5\10\6\0\1\10\1\0"+
    "\1\10\1\0\1\10\1\0\4\10\1\0\13\10\2\0\4\10\5\0"+
    "\5\10\4\0\1\10\21\0\51\10\u032d\0\64\10\u0716\0\57\10\1\0"+
    "\57\10\1\0\205\10\6\0\4\10\3\0\2\10\14\0\46\10\1\0"+
    "\1\10\5\0\1\10\2\0\70\10\7\0\1\10\20\0\27\10\11\0"+
    "\7\10\1\0\7\10\1\0\7\10\1\0\7\10\1\0\7\10\1\0"+
    "\7\10\1\0\7\10\1\0\7\10\1\0\40\10\57\0\1\10\u01d5\0"+
    "\3\10\31\0\11\10\7\0\5\10\2\0\5\10\4\0\126\10\6\0"+
    "\3\10\1\0\132\10\1\0\4\10\5\0\51\10\3\0\136\10\21\0"+
    "\33\10\65\0\20\10\u0200\0\u19b6\10\112\0\u51cd\10\63\0\u048d\10\103\0"+
    "\56\10\2\0\u010d\10\3\0\20\10\12\11\2\10\24\0\57\10\5\0"+
    "\10\10\3\0\31\10\7\0\121\10\47\0\11\10\2\0\147\10\2\0"+
    "\4\10\1\0\4\10\14\0\13\10\115\0\12\10\1\0\3\10\1\0"+
    "\4\10\1\0\34\10\30\0\64\10\14\0\104\10\14\0\12\11\30\0"+
    "\6\10\3\0\1\10\4\0\12\11\41\10\5\0\43\10\15\0\35\10"+
    "\3\0\63\10\1\0\14\10\17\0\1\10\12\11\46\0\67\10\11\0"+
    "\16\10\2\0\12\11\6\0\27\10\3\0\1\10\5\0\77\10\1\0"+
    "\1\10\1\0\1\10\30\0\3\10\2\0\20\10\2\0\4\10\13\0"+
    "\6\10\2\0\6\10\2\0\6\10\11\0\7\10\1\0\7\10\221\0"+
    "\53\10\5\0\12\11\6\0\u2ba4\10\14\0\27\10\4\0\61\10\u2104\0"+
    "\u016e\10\2\0\152\10\46\0\7\10\14\0\5\10\5\0\14\10\1\0"+
    "\15\10\1\0\5\10\1\0\1\10\1\0\2\10\1\0\2\10\1\0"+
    "\154\10\41\0\u016b\10\22\0\100\10\2\0\66\10\50\0\14\10\164\0"+
    "\5\10\1\0\207\10\23\0\12\11\7\0\32\10\6\0\32\10\13\0"+
    "\131\10\3\0\6\10\2\0\6\10\2\0\6\10\2\0\3\10\43\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\3\0\1\1\2\2\2\3\1\4\1\5\2\6\1\7"+
    "\1\2\1\10\1\11\1\7\1\12\1\13\1\14\1\15"+
    "\1\16\1\17\1\20\1\21\1\22\1\23\1\24\15\7"+
    "\1\25\1\26\1\27\1\30\1\31\1\32\1\33\1\34"+
    "\1\35\1\36\1\37\1\40\1\41\1\42\2\0\1\43"+
    "\1\44\1\45\1\46\1\47\1\50\3\7\1\51\1\52"+
    "\1\53\1\54\1\55\12\7\1\56\10\7\1\57\1\7"+
    "\1\60\1\61\1\62\1\63\1\64\1\65\1\66\1\67"+
    "\1\70\1\71\1\72\1\73\1\74\1\75\1\76\1\0"+
    "\1\77\2\0\1\100\4\7\1\101\1\102\2\7\1\103"+
    "\7\7\1\104\11\7\1\105\2\0\1\3\11\7\1\106"+
    "\3\7\1\107\4\7\1\110\1\7\1\111\3\7\1\42"+
    "\5\7\1\112\1\7\1\113\1\114\1\115\1\116\1\117"+
    "\1\7\1\120\2\7\1\121\1\7\1\122\1\123\1\124"+
    "\1\125\7\7\1\126\1\127\1\130\2\7\1\131\1\132"+
    "\3\7\1\133\1\7\1\134\1\135\1\136";

  private static int [] zzUnpackAction() {
    int [] result = new int[211];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\66\0\154\0\242\0\330\0\u010e\0\u0144\0\u010e"+
    "\0\u017a\0\u01b0\0\u010e\0\u01e6\0\u021c\0\u0252\0\u0288\0\u02be"+
    "\0\u02f4\0\u032a\0\u0360\0\u010e\0\u010e\0\u010e\0\u010e\0\u010e"+
    "\0\u010e\0\u010e\0\u0396\0\u010e\0\u03cc\0\u0402\0\u0438\0\u046e"+
    "\0\u04a4\0\u04da\0\u0510\0\u0546\0\u057c\0\u05b2\0\u05e8\0\u061e"+
    "\0\u0654\0\u068a\0\u06c0\0\u06f6\0\u072c\0\u0762\0\u0798\0\u010e"+
    "\0\u07ce\0\u010e\0\u0804\0\u010e\0\u083a\0\u010e\0\u0870\0\u08a6"+
    "\0\u08dc\0\u010e\0\u010e\0\u0912\0\u0948\0\u010e\0\u010e\0\u097e"+
    "\0\u09b4\0\u09ea\0\u0a20\0\u010e\0\u010e\0\u0a56\0\u010e\0\u0a8c"+
    "\0\u0ac2\0\u0af8\0\u0b2e\0\u0b64\0\u0b9a\0\u0bd0\0\u0c06\0\u0c3c"+
    "\0\u0c72\0\u021c\0\u0ca8\0\u0cde\0\u0d14\0\u0d4a\0\u0d80\0\u0db6"+
    "\0\u0dec\0\u0e22\0\u021c\0\u0e58\0\u010e\0\u010e\0\u010e\0\u010e"+
    "\0\u010e\0\u0e8e\0\u010e\0\u010e\0\u010e\0\u010e\0\u010e\0\u010e"+
    "\0\u010e\0\u010e\0\u010e\0\u0ec4\0\u010e\0\u0efa\0\u0f30\0\u010e"+
    "\0\u0f66\0\u0f9c\0\u0fd2\0\u1008\0\u010e\0\u010e\0\u103e\0\u1074"+
    "\0\u10aa\0\u10e0\0\u1116\0\u114c\0\u1182\0\u11b8\0\u11ee\0\u1224"+
    "\0\u021c\0\u125a\0\u1290\0\u12c6\0\u12fc\0\u1332\0\u1368\0\u139e"+
    "\0\u13d4\0\u140a\0\u010e\0\u1440\0\u1476\0\u0efa\0\u14ac\0\u14e2"+
    "\0\u1518\0\u154e\0\u1584\0\u15ba\0\u15f0\0\u1626\0\u165c\0\u021c"+
    "\0\u1692\0\u16c8\0\u16fe\0\u021c\0\u1734\0\u176a\0\u17a0\0\u17d6"+
    "\0\u021c\0\u180c\0\u1842\0\u1878\0\u18ae\0\u18e4\0\u010e\0\u191a"+
    "\0\u1950\0\u1986\0\u19bc\0\u19f2\0\u1a28\0\u1a5e\0\u021c\0\u021c"+
    "\0\u021c\0\u021c\0\u021c\0\u1a94\0\u021c\0\u1aca\0\u1b00\0\u021c"+
    "\0\u1b36\0\u021c\0\u021c\0\u021c\0\u021c\0\u1b6c\0\u1ba2\0\u1bd8"+
    "\0\u1c0e\0\u1c44\0\u1c7a\0\u1cb0\0\u021c\0\u021c\0\u021c\0\u1ce6"+
    "\0\u1d1c\0\u021c\0\u021c\0\u1d52\0\u1d88\0\u1dbe\0\u021c\0\u1df4"+
    "\0\u021c\0\u021c\0\u021c";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[211];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\13\4\1\5\52\4\1\6\1\7\2\10\1\11\1\12"+
    "\1\13\1\14\1\15\1\6\1\16\1\17\1\20\1\21"+
    "\1\15\1\22\1\23\1\24\1\25\1\26\1\27\1\30"+
    "\1\31\1\32\1\33\1\34\1\35\1\36\1\37\1\40"+
    "\1\41\1\42\2\15\1\43\1\44\1\45\1\46\1\47"+
    "\1\50\1\15\1\51\2\15\1\52\1\53\1\54\1\55"+
    "\1\56\1\57\1\60\1\61\1\62\1\6\1\63\2\6"+
    "\61\63\1\64\1\65\13\4\1\0\52\4\14\66\1\67"+
    "\51\66\70\0\1\10\67\0\1\70\1\71\11\0\1\72"+
    "\65\0\1\73\54\0\2\14\64\0\4\15\3\0\2\15"+
    "\13\0\22\15\22\0\1\74\4\0\2\74\13\0\22\74"+
    "\25\0\1\75\3\0\1\76\66\0\1\77\53\0\4\15"+
    "\3\0\2\15\13\0\1\15\1\100\6\15\1\101\2\15"+
    "\1\102\6\15\31\0\1\103\1\104\64\0\1\105\1\106"+
    "\75\0\1\107\43\0\4\15\3\0\2\15\13\0\1\15"+
    "\1\110\3\15\1\111\1\112\1\15\1\113\11\15\20\0"+
    "\4\15\3\0\2\15\13\0\2\15\1\114\17\15\20\0"+
    "\4\15\3\0\2\15\13\0\1\15\1\115\20\15\20\0"+
    "\4\15\3\0\2\15\13\0\7\15\1\116\1\117\11\15"+
    "\20\0\4\15\3\0\1\15\1\120\13\0\13\15\1\121"+
    "\6\15\20\0\4\15\3\0\2\15\13\0\1\122\1\15"+
    "\1\123\17\15\20\0\4\15\3\0\2\15\13\0\13\15"+
    "\1\124\1\125\5\15\20\0\4\15\3\0\2\15\13\0"+
    "\4\15\1\126\5\15\1\127\7\15\20\0\4\15\3\0"+
    "\2\15\13\0\7\15\1\130\12\15\20\0\4\15\3\0"+
    "\2\15\13\0\12\15\1\131\7\15\20\0\4\15\3\0"+
    "\2\15\13\0\13\15\1\132\6\15\20\0\4\15\3\0"+
    "\2\15\13\0\6\15\1\133\13\15\20\0\4\15\3\0"+
    "\1\15\1\134\13\0\22\15\31\0\1\135\34\0\1\136"+
    "\30\0\1\137\35\0\1\140\27\0\1\141\65\0\1\142"+
    "\65\0\1\143\40\0\1\144\24\0\1\145\41\0\1\146"+
    "\23\0\1\147\46\0\1\63\2\0\61\63\36\0\1\150"+
    "\1\0\1\151\6\0\1\152\16\0\1\153\16\0\1\154"+
    "\1\0\1\155\46\0\1\70\1\7\1\10\63\70\5\156"+
    "\1\157\60\156\6\0\4\74\3\0\2\74\13\0\22\74"+
    "\31\0\1\160\54\0\4\15\3\0\2\15\13\0\14\15"+
    "\1\161\5\15\20\0\4\15\3\0\2\15\13\0\13\15"+
    "\1\162\6\15\20\0\4\15\3\0\2\15\13\0\5\15"+
    "\1\163\1\164\13\15\31\0\1\165\65\0\1\166\54\0"+
    "\4\15\3\0\2\15\13\0\2\15\1\167\17\15\20\0"+
    "\4\15\3\0\2\15\13\0\2\15\1\170\17\15\20\0"+
    "\4\15\3\0\2\15\13\0\13\15\1\171\6\15\20\0"+
    "\4\15\3\0\2\15\13\0\7\15\1\172\12\15\20\0"+
    "\4\15\3\0\2\15\13\0\4\15\1\173\15\15\20\0"+
    "\4\15\3\0\2\15\13\0\7\15\1\174\12\15\20\0"+
    "\4\15\3\0\2\15\13\0\10\15\1\175\11\15\20\0"+
    "\4\15\3\0\2\15\13\0\4\15\1\176\15\15\20\0"+
    "\4\15\3\0\2\15\13\0\13\15\1\177\6\15\20\0"+
    "\4\15\3\0\2\15\13\0\1\15\1\200\17\15\1\201"+
    "\20\0\4\15\3\0\2\15\13\0\4\15\1\202\15\15"+
    "\20\0\4\15\3\0\2\15\13\0\13\15\1\203\6\15"+
    "\20\0\4\15\3\0\2\15\13\0\11\15\1\204\10\15"+
    "\20\0\4\15\3\0\2\15\13\0\10\15\1\205\11\15"+
    "\20\0\4\15\3\0\2\15\13\0\7\15\1\206\12\15"+
    "\20\0\4\15\3\0\2\15\13\0\11\15\1\207\10\15"+
    "\20\0\4\15\3\0\2\15\13\0\4\15\1\210\15\15"+
    "\20\0\4\15\3\0\2\15\13\0\12\15\1\211\7\15"+
    "\20\0\4\15\3\0\2\15\13\0\5\15\1\212\14\15"+
    "\31\0\1\213\64\0\1\214\47\0\5\156\1\215\64\156"+
    "\1\216\1\215\60\156\6\0\4\15\3\0\2\15\13\0"+
    "\7\15\1\217\12\15\20\0\4\15\3\0\2\15\13\0"+
    "\12\15\1\220\7\15\20\0\4\15\3\0\2\15\13\0"+
    "\16\15\1\221\3\15\20\0\4\15\3\0\2\15\13\0"+
    "\4\15\1\222\15\15\20\0\4\15\3\0\2\15\13\0"+
    "\3\15\1\223\16\15\20\0\4\15\3\0\2\15\13\0"+
    "\10\15\1\224\11\15\20\0\4\15\3\0\2\15\13\0"+
    "\12\15\1\225\7\15\20\0\4\15\3\0\2\15\13\0"+
    "\11\15\1\226\10\15\20\0\4\15\3\0\2\15\13\0"+
    "\5\15\1\227\14\15\20\0\4\15\3\0\2\15\13\0"+
    "\7\15\1\230\12\15\20\0\4\15\3\0\2\15\13\0"+
    "\11\15\1\231\10\15\20\0\4\15\3\0\2\15\13\0"+
    "\3\15\1\232\16\15\20\0\4\15\3\0\2\15\13\0"+
    "\6\15\1\233\13\15\20\0\4\15\3\0\2\15\13\0"+
    "\12\15\1\234\7\15\20\0\4\15\3\0\2\15\13\0"+
    "\12\15\1\235\7\15\20\0\4\15\3\0\2\15\13\0"+
    "\10\15\1\236\11\15\20\0\4\15\3\0\2\15\13\0"+
    "\4\15\1\237\15\15\20\0\4\15\3\0\2\15\13\0"+
    "\4\15\1\240\15\15\20\0\4\15\3\0\2\15\13\0"+
    "\1\241\21\15\20\0\4\15\3\0\2\15\13\0\5\15"+
    "\1\242\4\15\1\243\7\15\20\0\4\15\3\0\2\15"+
    "\13\0\1\15\1\244\20\15\20\0\4\15\3\0\2\15"+
    "\13\0\10\15\1\245\11\15\20\0\4\15\3\0\2\15"+
    "\13\0\7\15\1\246\12\15\27\0\1\247\50\0\4\156"+
    "\1\10\1\215\60\156\6\0\4\15\3\0\2\15\13\0"+
    "\5\15\1\250\14\15\20\0\4\15\3\0\2\15\13\0"+
    "\2\15\1\251\17\15\20\0\4\15\3\0\2\15\13\0"+
    "\10\15\1\252\11\15\20\0\4\15\3\0\2\15\13\0"+
    "\12\15\1\253\7\15\20\0\4\15\3\0\2\15\13\0"+
    "\4\15\1\254\15\15\20\0\4\15\3\0\2\15\13\0"+
    "\7\15\1\255\12\15\20\0\4\15\3\0\2\15\13\0"+
    "\10\15\1\256\11\15\20\0\4\15\3\0\2\15\13\0"+
    "\12\15\1\257\7\15\20\0\4\15\3\0\2\15\13\0"+
    "\7\15\1\260\12\15\20\0\4\15\3\0\2\15\13\0"+
    "\11\15\1\261\10\15\20\0\4\15\3\0\1\15\1\262"+
    "\13\0\22\15\20\0\4\15\3\0\2\15\13\0\17\15"+
    "\1\263\2\15\20\0\4\15\3\0\2\15\13\0\13\15"+
    "\1\264\6\15\20\0\4\15\3\0\2\15\13\0\21\15"+
    "\1\265\20\0\4\15\3\0\2\15\13\0\13\15\1\266"+
    "\6\15\20\0\4\15\3\0\2\15\13\0\5\15\1\267"+
    "\14\15\20\0\4\15\3\0\2\15\13\0\1\270\21\15"+
    "\20\0\4\15\3\0\2\15\13\0\5\15\1\242\14\15"+
    "\20\0\4\15\3\0\2\15\13\0\13\15\1\271\6\15"+
    "\20\0\4\15\3\0\2\15\13\0\20\15\1\272\1\15"+
    "\20\0\4\15\3\0\2\15\13\0\12\15\1\273\7\15"+
    "\20\0\4\15\3\0\2\15\13\0\3\15\1\274\16\15"+
    "\20\0\4\15\3\0\2\15\13\0\4\15\1\275\15\15"+
    "\20\0\4\15\3\0\2\15\13\0\4\15\1\276\15\15"+
    "\20\0\4\15\3\0\2\15\13\0\3\15\1\277\16\15"+
    "\20\0\4\15\3\0\2\15\13\0\5\15\1\300\14\15"+
    "\20\0\4\15\3\0\2\15\13\0\7\15\1\301\12\15"+
    "\20\0\4\15\3\0\2\15\13\0\3\15\1\302\16\15"+
    "\20\0\4\15\3\0\2\15\13\0\1\303\21\15\20\0"+
    "\4\15\3\0\2\15\13\0\10\15\1\304\11\15\20\0"+
    "\4\15\3\0\2\15\13\0\3\15\1\305\16\15\20\0"+
    "\4\15\3\0\2\15\13\0\2\15\1\306\17\15\20\0"+
    "\4\15\3\0\2\15\13\0\12\15\1\307\7\15\20\0"+
    "\4\15\3\0\2\15\13\0\4\15\1\310\15\15\20\0"+
    "\4\15\3\0\2\15\13\0\6\15\1\311\13\15\20\0"+
    "\4\15\3\0\2\15\13\0\21\15\1\312\20\0\4\15"+
    "\3\0\1\15\1\313\13\0\22\15\20\0\4\15\3\0"+
    "\2\15\13\0\10\15\1\314\11\15\20\0\4\15\3\0"+
    "\2\15\13\0\3\15\1\315\16\15\20\0\4\15\3\0"+
    "\2\15\13\0\12\15\1\316\7\15\20\0\4\15\3\0"+
    "\2\15\13\0\2\15\1\317\17\15\20\0\4\15\3\0"+
    "\2\15\13\0\3\15\1\320\16\15\20\0\4\15\3\0"+
    "\2\15\13\0\4\15\1\321\15\15\20\0\4\15\3\0"+
    "\2\15\13\0\15\15\1\322\4\15\20\0\4\15\3\0"+
    "\2\15\13\0\12\15\1\323\7\15\12\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[7722];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\3\0\2\1\1\11\1\1\1\11\2\1\1\11\10\1"+
    "\7\11\1\1\1\11\23\1\1\11\1\1\1\11\1\1"+
    "\1\11\1\1\1\11\1\1\2\0\2\11\2\1\2\11"+
    "\4\1\2\11\1\1\1\11\25\1\5\11\1\1\11\11"+
    "\1\0\1\11\2\0\1\11\4\1\2\11\24\1\1\11"+
    "\2\0\31\1\1\11\54\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[211];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
	ComplexSymbolFactory symbolFactory = new ComplexSymbolFactory();
	StringBuilder stringBuilder = new StringBuilder();

	private Symbol symbol(int type) {
		String text = yytext();
		Location left = new Location(yyline, yycolumn);
		Location right = new Location(yyline, yycolumn + text.length());
		return symbolFactory.newSymbol(text, type, left, right);
	}
  
	private Symbol symbol(int type, Object value) {
		String text = yytext();
		Location left = new Location(yyline, yycolumn);
		Location right = new Location(yyline, yycolumn + text.length());
		return symbolFactory.newSymbol(text, type, left, right, value);
	}


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Lexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 1920) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

    // numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  @Override
public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn++;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 1: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [86] { return symbol(Tokens.VERBATIM_CONTENT, yytext()); }");
          { return symbol(Tokens.VERBATIM_CONTENT, yytext());
          }
        case 95: break;
        case 2: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [419] { String s = yytext();"+ZZ_NL+"\tint code = s.charAt(0);"+ZZ_NL+"\tthrow new RuntimeException(\"Illegal character \'\" + yytext() + \"\' (code \" + code + \")\"); }");
          { String s = yytext();
	int code = s.charAt(0);
	throw new RuntimeException("Illegal character '" + yytext() + "' (code " + code + ")");
          }
        case 96: break;
        case 3: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [386] { // ignore }");
          { // ignore
          }
        case 97: break;
        case 4: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [244] { return symbol(Tokens.DIVIDE); }");
          { return symbol(Tokens.DIVIDE);
          }
        case 98: break;
        case 5: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [241] { return symbol(Tokens.TIMES); }");
          { return symbol(Tokens.TIMES);
          }
        case 99: break;
        case 6: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [366] { return symbol(Tokens.INTEGER_LITERAL, Integer.parseInt(yytext())); }");
          { return symbol(Tokens.INTEGER_LITERAL, Integer.parseInt(yytext()));
          }
        case 100: break;
        case 7: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [375] { return symbol(Tokens.IDENTIFIER, yytext()); }");
          { return symbol(Tokens.IDENTIFIER, yytext());
          }
        case 101: break;
        case 8: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [294] { return symbol(Tokens.LESS); }");
          { return symbol(Tokens.LESS);
          }
        case 102: break;
        case 9: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [146] { return symbol(Tokens.QUESTION_MARK); }");
          { return symbol(Tokens.QUESTION_MARK);
          }
        case 103: break;
        case 10: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [305] { return symbol(Tokens.ASSIGN); }");
          { return symbol(Tokens.ASSIGN);
          }
        case 104: break;
        case 11: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [291] { return symbol(Tokens.GREATER); }");
          { return symbol(Tokens.GREATER);
          }
        case 105: break;
        case 12: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [119] { return symbol(Tokens.OPENING_PARENTHESIS); }");
          { return symbol(Tokens.OPENING_PARENTHESIS);
          }
        case 106: break;
        case 13: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [122] { return symbol(Tokens.CLOSING_PARENTHESIS); }");
          { return symbol(Tokens.CLOSING_PARENTHESIS);
          }
        case 107: break;
        case 14: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [125] { return symbol(Tokens.OPENING_CURLY_BRACE); }");
          { return symbol(Tokens.OPENING_CURLY_BRACE);
          }
        case 108: break;
        case 15: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [128] { return symbol(Tokens.CLOSING_CURLY_BRACE); }");
          { return symbol(Tokens.CLOSING_CURLY_BRACE);
          }
        case 109: break;
        case 16: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [131] { return symbol(Tokens.OPENING_SQUARE_BRACKET); }");
          { return symbol(Tokens.OPENING_SQUARE_BRACKET);
          }
        case 110: break;
        case 17: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [134] { return symbol(Tokens.CLOSING_SQUARE_BRACKET); }");
          { return symbol(Tokens.CLOSING_SQUARE_BRACKET);
          }
        case 111: break;
        case 18: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [140] { return symbol(Tokens.SEMICOLON); }");
          { return symbol(Tokens.SEMICOLON);
          }
        case 112: break;
        case 19: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [149] { return symbol(Tokens.COLON); }");
          { return symbol(Tokens.COLON);
          }
        case 113: break;
        case 20: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [152] { return symbol(Tokens.COMMA); }");
          { return symbol(Tokens.COMMA);
          }
        case 114: break;
        case 21: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [235] { return symbol(Tokens.PLUS); }");
          { return symbol(Tokens.PLUS);
          }
        case 115: break;
        case 22: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [238] { return symbol(Tokens.MINUS); }");
          { return symbol(Tokens.MINUS);
          }
        case 116: break;
        case 23: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [247] { return symbol(Tokens.MOD); }");
          { return symbol(Tokens.MOD);
          }
        case 117: break;
        case 24: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [250] { return symbol(Tokens.LOGICAL_NOT); }");
          { return symbol(Tokens.LOGICAL_NOT);
          }
        case 118: break;
        case 25: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [262] { return symbol(Tokens.BITWISE_AND); }");
          { return symbol(Tokens.BITWISE_AND);
          }
        case 119: break;
        case 26: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [265] { return symbol(Tokens.BITWISE_OR); }");
          { return symbol(Tokens.BITWISE_OR);
          }
        case 120: break;
        case 27: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [259] { return symbol(Tokens.BITWISE_NOT); }");
          { return symbol(Tokens.BITWISE_NOT);
          }
        case 121: break;
        case 28: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [268] { return symbol(Tokens.BITWISE_XOR); }");
          { return symbol(Tokens.BITWISE_XOR);
          }
        case 122: break;
        case 29: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [369] { stringBuilder.setLength(0);"+ZZ_NL+"\t\tyybegin(STRING); }");
          { stringBuilder.setLength(0);
		yybegin(STRING);
          }
        case 123: break;
        case 30: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [398] { stringBuilder.append(yytext()); }");
          { stringBuilder.append(yytext());
          }
        case 124: break;
        case 31: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [394] { yybegin(CODE); "+ZZ_NL+"\t\treturn symbol(Tokens.STRING_LITERAL, stringBuilder.toString()); }");
          { yybegin(CODE); 
		return symbol(Tokens.STRING_LITERAL, stringBuilder.toString());
          }
        case 125: break;
        case 32: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [413] { stringBuilder.append(\'\\\\\'); }");
          { stringBuilder.append('\\');
          }
        case 126: break;
        case 33: 
          // lookahead expression with fixed base length
          zzMarkedPos = zzStartRead + 1;
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [89] { return symbol(Tokens.VERBATIM_CONTENT, yytext()); }");
          { return symbol(Tokens.VERBATIM_CONTENT, yytext());
          }
        case 127: break;
        case 34: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [94] { yybegin(CODE); }");
          { yybegin(CODE);
          }
        case 128: break;
        case 35: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [323] { return symbol(Tokens.DIVIDE_ASSIGN); }");
          { return symbol(Tokens.DIVIDE_ASSIGN);
          }
        case 129: break;
        case 36: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [320] { return symbol(Tokens.TIMES_ASSIGN); }");
          { return symbol(Tokens.TIMES_ASSIGN);
          }
        case 130: break;
        case 37: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [378] { return symbol(Tokens.LOCAL_VARIABLE, yytext().substring(1)); }");
          { return symbol(Tokens.LOCAL_VARIABLE, yytext().substring(1));
          }
        case 131: break;
        case 38: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [271] { return symbol(Tokens.SHIFT_LEFT); }");
          { return symbol(Tokens.SHIFT_LEFT);
          }
        case 132: break;
        case 39: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [300] { return symbol(Tokens.LESS_EQUAL); }");
          { return symbol(Tokens.LESS_EQUAL);
          }
        case 133: break;
        case 40: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [113] { yybegin(YYINITIAL);"+ZZ_NL+"\t\treturn symbol(Tokens.SEMICOLON); }");
          { yybegin(YYINITIAL);
		return symbol(Tokens.SEMICOLON);
          }
        case 134: break;
        case 41: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [279] { return symbol(Tokens.EQUAL); }");
          { return symbol(Tokens.EQUAL);
          }
        case 135: break;
        case 42: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [137] { return symbol(Tokens.RIGHT_ARROW); }");
          { return symbol(Tokens.RIGHT_ARROW);
          }
        case 136: break;
        case 43: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [297] { return symbol(Tokens.GREATER_EQUAL); }");
          { return symbol(Tokens.GREATER_EQUAL);
          }
        case 137: break;
        case 44: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [274] { return symbol(Tokens.SHIFT_RIGHT); }");
          { return symbol(Tokens.SHIFT_RIGHT);
          }
        case 138: break;
        case 45: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [143] { return symbol(Tokens.SCOPE_RESOLUTION); }");
          { return symbol(Tokens.SCOPE_RESOLUTION);
          }
        case 139: break;
        case 46: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [206] { return symbol(Tokens.IF); }");
          { return symbol(Tokens.IF);
          }
        case 140: break;
        case 47: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [197] { return symbol(Tokens.DO); }");
          { return symbol(Tokens.DO);
          }
        case 141: break;
        case 48: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [314] { return symbol(Tokens.PLUS_ASSIGN); }");
          { return symbol(Tokens.PLUS_ASSIGN);
          }
        case 142: break;
        case 49: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [308] { return symbol(Tokens.INCREMENT); }");
          { return symbol(Tokens.INCREMENT);
          }
        case 143: break;
        case 50: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [317] { return symbol(Tokens.MINUS_ASSIGN); }");
          { return symbol(Tokens.MINUS_ASSIGN);
          }
        case 144: break;
        case 51: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [311] { return symbol(Tokens.DECREMENT); }");
          { return symbol(Tokens.DECREMENT);
          }
        case 145: break;
        case 52: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [326] { return symbol(Tokens.MOD_ASSIGN); }");
          { return symbol(Tokens.MOD_ASSIGN);
          }
        case 146: break;
        case 53: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [282] { return symbol(Tokens.NOT_EQUAL); }");
          { return symbol(Tokens.NOT_EQUAL);
          }
        case 147: break;
        case 54: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [329] { return symbol(Tokens.BITWISE_AND_ASSIGN); }");
          { return symbol(Tokens.BITWISE_AND_ASSIGN);
          }
        case 148: break;
        case 55: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [253] { return symbol(Tokens.SHORTCUT_AND); }");
          { return symbol(Tokens.SHORTCUT_AND);
          }
        case 149: break;
        case 56: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [332] { return symbol(Tokens.BITWISE_OR_ASSIGN); }");
          { return symbol(Tokens.BITWISE_OR_ASSIGN);
          }
        case 150: break;
        case 57: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [256] { return symbol(Tokens.SHORTCUT_OR); }");
          { return symbol(Tokens.SHORTCUT_OR);
          }
        case 151: break;
        case 58: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [335] { return symbol(Tokens.BITWISE_XOR_ASSIGN); }");
          { return symbol(Tokens.BITWISE_XOR_ASSIGN);
          }
        case 152: break;
        case 59: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [404] { stringBuilder.append(\'\\n\'); }");
          { stringBuilder.append('\n');
          }
        case 153: break;
        case 60: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [401] { stringBuilder.append(\'\\t\'); }");
          { stringBuilder.append('\t');
          }
        case 154: break;
        case 61: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [407] { stringBuilder.append(\'\\r\'); }");
          { stringBuilder.append('\r');
          }
        case 155: break;
        case 62: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [410] { stringBuilder.append(\'\\\"\'); }");
          { stringBuilder.append('\"');
          }
        case 156: break;
        case 63: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [102] { yybegin(CODE);"+ZZ_NL+"\t\treturn symbol(Tokens.IDENTIFIER, \"echo\"); }");
          { yybegin(CODE);
		return symbol(Tokens.IDENTIFIER, "echo");
          }
        case 157: break;
        case 64: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [338] { return symbol(Tokens.SHIFT_LEFT_ASSIGN); }");
          { return symbol(Tokens.SHIFT_LEFT_ASSIGN);
          }
        case 158: break;
        case 65: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [285] { return symbol(Tokens.IDENTICAL); }");
          { return symbol(Tokens.IDENTICAL);
          }
        case 159: break;
        case 66: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [341] { return symbol(Tokens.SHIFT_RIGHT_ASSIGN); }");
          { return symbol(Tokens.SHIFT_RIGHT_ASSIGN);
          }
        case 160: break;
        case 67: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [188] { return symbol(Tokens.FOR); }");
          { return symbol(Tokens.FOR);
          }
        case 161: break;
        case 68: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [224] { return symbol(Tokens.TRY); }");
          { return symbol(Tokens.TRY);
          }
        case 162: break;
        case 69: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [288] { return symbol(Tokens.NOT_IDENTICAL); }");
          { return symbol(Tokens.NOT_IDENTICAL);
          }
        case 163: break;
        case 70: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [357] { return symbol(Tokens.NULL_LITERAL); }");
          { return symbol(Tokens.NULL_LITERAL);
          }
        case 164: break;
        case 71: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [360] { return symbol(Tokens.BOOLEAN_LITERAL, true); }");
          { return symbol(Tokens.BOOLEAN_LITERAL, true);
          }
        case 165: break;
        case 72: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [349] { return symbol(Tokens.SELF); }");
          { return symbol(Tokens.SELF);
          }
        case 166: break;
        case 73: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [215] { return symbol(Tokens.ELSE); }");
          { return symbol(Tokens.ELSE);
          }
        case 167: break;
        case 74: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [180] { return symbol(Tokens.FINAL); }");
          { return symbol(Tokens.FINAL);
          }
        case 168: break;
        case 75: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [363] { return symbol(Tokens.BOOLEAN_LITERAL, false); }");
          { return symbol(Tokens.BOOLEAN_LITERAL, false);
          }
        case 169: break;
        case 76: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [194] { return symbol(Tokens.UNTIL); }");
          { return symbol(Tokens.UNTIL);
          }
        case 170: break;
        case 77: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [160] { return symbol(Tokens.CLASS); }");
          { return symbol(Tokens.CLASS);
          }
        case 171: break;
        case 78: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [227] { return symbol(Tokens.CATCH); }");
          { return symbol(Tokens.CATCH);
          }
        case 172: break;
        case 79: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [221] { return symbol(Tokens.THROW); }");
          { return symbol(Tokens.THROW);
          }
        case 173: break;
        case 80: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [346] { return symbol(Tokens.ARRAY); }");
          { return symbol(Tokens.ARRAY);
          }
        case 174: break;
        case 81: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [209] { return symbol(Tokens.ELSEIF); }");
          { return symbol(Tokens.ELSEIF);
          }
        case 175: break;
        case 82: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [203] { return symbol(Tokens.BREAK); }");
          { return symbol(Tokens.BREAK);
          }
        case 176: break;
        case 83: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [200] { return symbol(Tokens.WHILE); }");
          { return symbol(Tokens.WHILE);
          }
        case 177: break;
        case 84: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [168] { return symbol(Tokens.PUBLIC); }");
          { return symbol(Tokens.PUBLIC);
          }
        case 178: break;
        case 85: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [352] { return symbol(Tokens.PARENT); }");
          { return symbol(Tokens.PARENT);
          }
        case 179: break;
        case 86: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [183] { return symbol(Tokens.STATIC); }");
          { return symbol(Tokens.STATIC);
          }
        case 180: break;
        case 87: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [218] { return symbol(Tokens.RETURN); }");
          { return symbol(Tokens.RETURN);
          }
        case 181: break;
        case 88: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [174] { return symbol(Tokens.PRIVATE); }");
          { return symbol(Tokens.PRIVATE);
          }
        case 182: break;
        case 89: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [230] { return symbol(Tokens.FINALLY); }");
          { return symbol(Tokens.FINALLY);
          }
        case 183: break;
        case 90: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [191] { return symbol(Tokens.FOREACH); }");
          { return symbol(Tokens.FOREACH);
          }
        case 184: break;
        case 91: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [157] { return symbol(Tokens.FUNCTION); }");
          { return symbol(Tokens.FUNCTION);
          }
        case 185: break;
        case 92: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [177] { return symbol(Tokens.ABSTRACT); }");
          { return symbol(Tokens.ABSTRACT);
          }
        case 186: break;
        case 93: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [171] { return symbol(Tokens.PROTECTED); }");
          { return symbol(Tokens.PROTECTED);
          }
        case 187: break;
        case 94: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [163] { return symbol(Tokens.INTERFACE); }");
          { return symbol(Tokens.INTERFACE);
          }
        case 188: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
              { 	Location location = new Location(yyline, yycolumn);
	return symbolFactory.newSymbol("EOF", Tokens.EOF, location, location); 
 }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }

  /**
   * Runs the scanner on input files.
   *
   * This main method is the debugging routine for the scanner.
   * It prints debugging information about each returned token to
   * System.out until the end of file is reached, or an error occured.
   *
   * @param argv   the command line, contains the filenames to run
   *               the scanner on.
   */
  public static void main(String argv[]) {
    if (argv.length == 0) {
      System.out.println("Usage : java Lexer [ --encoding <name> ] <inputfile(s)>");
    }
    else {
      int firstFilePos = 0;
      String encodingName = "UTF-8";
      if (argv[0].equals("--encoding")) {
        firstFilePos = 2;
        encodingName = argv[1];
        try {
          java.nio.charset.Charset.forName(encodingName); // Side-effect: is encodingName valid? 
        } catch (Exception e) {
          System.out.println("Invalid encoding '" + encodingName + "'");
          return;
        }
      }
      for (int i = firstFilePos; i < argv.length; i++) {
        Lexer scanner = null;
        try {
          java.io.FileInputStream stream = new java.io.FileInputStream(argv[i]);
          java.io.Reader reader = new java.io.InputStreamReader(stream, encodingName);
          scanner = new Lexer(reader);
          do {
            System.out.println(scanner.next_token());
          } while (!scanner.zzAtEOF);

        }
        catch (java.io.FileNotFoundException e) {
          System.out.println("File not found : \""+argv[i]+"\"");
        }
        catch (java.io.IOException e) {
          System.out.println("IO error scanning file \""+argv[i]+"\"");
          System.out.println(e);
        }
        catch (Exception e) {
          System.out.println("Unexpected exception:");
          e.printStackTrace();
        }
      }
    }
  }


}
