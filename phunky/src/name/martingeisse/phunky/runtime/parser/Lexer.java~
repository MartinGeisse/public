/* The following code was generated by JFlex 1.5.0-SNAPSHOT */


// ---------------------------------------------------------------------------------------------------------
// --- header information
// ---------------------------------------------------------------------------------------------------------


// imports
package name.martingeisse.phunky.runtime.parser;
import java_cup.runtime.*;
import java_cup.runtime.ComplexSymbolFactory.Location;

/**
 * The Lexer.
 */

public class Lexer implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int CODE = 2;
  public static final int SINGLE_QUOTED_STRING = 4;
  public static final int DOUBLE_QUOTED_STRING = 6;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3, 3
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\3\1\2\1\0\1\3\1\1\22\0\1\3\1\57\1\65"+
    "\1\0\1\12\1\56\1\60\1\64\1\21\1\22\1\5\1\54\1\31"+
    "\1\55\1\0\1\4\1\6\11\7\1\30\1\27\1\13\1\17\1\20"+
    "\1\14\1\0\32\10\1\25\1\66\1\26\1\63\1\10\1\0\1\42"+
    "\1\46\1\35\1\47\1\44\1\32\1\10\1\16\1\37\1\10\1\52"+
    "\1\41\1\10\1\34\1\40\1\15\1\10\1\45\1\43\1\36\1\33"+
    "\1\50\1\51\1\10\1\53\1\10\1\23\1\61\1\24\1\62\53\0"+
    "\1\10\12\0\1\10\4\0\1\10\5\0\27\10\1\0\37\10\1\0"+
    "\u01ca\10\4\0\14\10\16\0\5\10\7\0\1\10\1\0\1\10\126\0"+
    "\1\10\52\0\5\10\1\0\2\10\2\0\4\10\10\0\1\10\1\0"+
    "\3\10\1\0\1\10\1\0\24\10\1\0\123\10\1\0\213\10\10\0"+
    "\236\10\11\0\46\10\2\0\1\10\7\0\47\10\50\0\16\10\1\0"+
    "\1\10\1\0\2\10\1\0\2\10\1\0\1\10\10\0\33\10\5\0"+
    "\3\10\35\0\13\10\5\0\70\10\1\0\7\10\12\11\4\0\146\10"+
    "\1\0\10\10\4\0\10\10\4\0\3\10\12\11\3\10\2\0\1\10"+
    "\20\0\60\10\15\0\145\10\16\0\12\11\41\10\11\0\2\10\4\0"+
    "\1\10\5\0\30\10\2\0\23\10\23\0\31\10\107\0\1\10\1\0"+
    "\13\10\67\0\6\10\6\0\17\10\1\0\74\10\1\0\20\10\1\0"+
    "\3\10\4\0\17\10\2\0\12\11\1\0\7\10\1\0\7\10\1\0"+
    "\3\10\1\0\10\10\2\0\2\10\2\0\26\10\1\0\7\10\1\0"+
    "\1\10\3\0\4\10\3\0\10\10\2\0\2\10\2\0\2\10\1\0"+
    "\1\10\10\0\1\10\4\0\2\10\1\0\5\10\2\0\12\11\2\10"+
    "\17\0\3\10\1\0\6\10\4\0\2\10\2\0\26\10\1\0\7\10"+
    "\1\0\2\10\1\0\2\10\1\0\2\10\4\0\5\10\4\0\2\10"+
    "\2\0\2\10\4\0\1\10\7\0\4\10\1\0\1\10\7\0\12\11"+
    "\6\10\13\0\3\10\1\0\11\10\1\0\3\10\1\0\26\10\1\0"+
    "\7\10\1\0\2\10\1\0\5\10\3\0\11\10\1\0\3\10\1\0"+
    "\2\10\3\0\1\10\17\0\4\10\2\0\12\11\21\0\3\10\1\0"+
    "\10\10\2\0\2\10\2\0\26\10\1\0\7\10\1\0\2\10\1\0"+
    "\5\10\3\0\10\10\2\0\2\10\2\0\2\10\11\0\2\10\4\0"+
    "\2\10\1\0\5\10\2\0\12\11\1\0\1\10\20\0\2\10\1\0"+
    "\6\10\3\0\3\10\1\0\4\10\3\0\2\10\1\0\1\10\1\0"+
    "\2\10\3\0\2\10\3\0\3\10\3\0\14\10\4\0\5\10\3\0"+
    "\3\10\1\0\3\10\3\0\1\10\6\0\1\10\16\0\12\11\21\0"+
    "\3\10\1\0\10\10\1\0\3\10\1\0\27\10\1\0\12\10\1\0"+
    "\5\10\3\0\10\10\1\0\3\10\1\0\3\10\10\0\2\10\1\0"+
    "\2\10\6\0\4\10\2\0\12\11\22\0\2\10\1\0\10\10\1\0"+
    "\3\10\1\0\27\10\1\0\12\10\1\0\5\10\3\0\10\10\1\0"+
    "\3\10\1\0\3\10\10\0\2\10\7\0\1\10\1\0\4\10\2\0"+
    "\12\11\1\0\2\10\17\0\2\10\1\0\10\10\1\0\3\10\1\0"+
    "\51\10\2\0\10\10\1\0\3\10\1\0\3\10\1\0\1\10\10\0"+
    "\1\10\10\0\4\10\2\0\12\11\12\0\6\10\2\0\2\10\1\0"+
    "\22\10\3\0\30\10\1\0\11\10\1\0\1\10\2\0\7\10\10\0"+
    "\6\10\1\0\1\10\1\0\10\10\22\0\2\10\15\0\72\10\5\0"+
    "\7\10\6\0\1\10\2\0\12\11\47\0\2\10\1\0\1\10\2\0"+
    "\2\10\1\0\1\10\2\0\1\10\6\0\4\10\1\0\7\10\1\0"+
    "\3\10\1\0\1\10\1\0\1\10\2\0\2\10\1\0\15\10\1\0"+
    "\3\10\2\0\5\10\1\0\1\10\6\0\1\10\2\0\12\11\2\0"+
    "\4\10\40\0\1\10\37\0\12\11\26\0\10\10\1\0\44\10\4\0"+
    "\21\10\6\0\20\10\1\0\44\10\103\0\67\10\1\0\1\10\2\0"+
    "\5\10\12\11\6\0\23\10\2\0\4\10\5\0\31\10\7\0\1\10"+
    "\1\0\12\11\2\0\2\10\2\0\46\10\1\0\1\10\5\0\1\10"+
    "\2\0\53\10\1\0\u014d\10\1\0\4\10\2\0\7\10\1\0\1\10"+
    "\1\0\4\10\2\0\51\10\1\0\4\10\2\0\41\10\1\0\4\10"+
    "\2\0\7\10\1\0\1\10\1\0\4\10\2\0\17\10\1\0\71\10"+
    "\1\0\4\10\2\0\103\10\4\0\1\10\40\0\20\10\20\0\125\10"+
    "\14\0\u026c\10\2\0\21\10\1\0\32\10\5\0\113\10\3\0\3\10"+
    "\17\0\15\10\1\0\6\10\14\0\24\10\14\0\24\10\14\0\15\10"+
    "\1\0\3\10\1\0\2\10\14\0\64\10\2\0\23\10\16\0\1\10"+
    "\4\0\1\10\3\0\12\11\46\0\12\11\6\0\130\10\10\0\53\10"+
    "\5\0\106\10\12\0\35\10\3\0\14\10\4\0\11\10\15\0\12\11"+
    "\36\10\2\0\5\10\13\0\54\10\4\0\32\10\6\0\12\11\46\0"+
    "\34\10\4\0\77\10\2\0\24\10\13\0\12\11\6\0\12\11\15\0"+
    "\1\10\130\0\64\10\1\0\17\10\1\0\7\10\4\0\12\11\46\0"+
    "\52\10\2\0\4\10\12\11\54\10\1\0\13\10\16\0\66\10\12\0"+
    "\12\11\3\0\3\10\12\11\44\10\153\0\4\10\1\0\6\10\1\0"+
    "\2\10\11\0\300\10\100\0\u0116\10\2\0\6\10\2\0\46\10\2\0"+
    "\6\10\2\0\10\10\1\0\1\10\1\0\1\10\1\0\1\10\1\0"+
    "\37\10\2\0\65\10\1\0\7\10\1\0\1\10\3\0\3\10\1\0"+
    "\7\10\3\0\4\10\2\0\6\10\4\0\15\10\5\0\3\10\1\0"+
    "\7\10\164\0\1\10\15\0\1\10\20\0\15\10\145\0\1\10\4\0"+
    "\1\10\2\0\12\10\1\0\1\10\3\0\5\10\6\0\1\10\1\0"+
    "\1\10\1\0\1\10\1\0\4\10\1\0\13\10\2\0\4\10\5\0"+
    "\5\10\4\0\1\10\21\0\51\10\u032d\0\64\10\u0716\0\57\10\1\0"+
    "\57\10\1\0\205\10\6\0\4\10\3\0\2\10\14\0\46\10\1\0"+
    "\1\10\5\0\1\10\2\0\70\10\7\0\1\10\20\0\27\10\11\0"+
    "\7\10\1\0\7\10\1\0\7\10\1\0\7\10\1\0\7\10\1\0"+
    "\7\10\1\0\7\10\1\0\7\10\1\0\40\10\57\0\1\10\u01d5\0"+
    "\3\10\31\0\11\10\7\0\5\10\2\0\5\10\4\0\126\10\6\0"+
    "\3\10\1\0\132\10\1\0\4\10\5\0\51\10\3\0\136\10\21\0"+
    "\33\10\65\0\20\10\u0200\0\u19b6\10\112\0\u51cd\10\63\0\u048d\10\103\0"+
    "\56\10\2\0\u010d\10\3\0\20\10\12\11\2\10\24\0\57\10\5\0"+
    "\10\10\3\0\31\10\7\0\121\10\47\0\11\10\2\0\147\10\2\0"+
    "\4\10\1\0\4\10\14\0\13\10\115\0\12\10\1\0\3\10\1\0"+
    "\4\10\1\0\34\10\30\0\64\10\14\0\104\10\14\0\12\11\30\0"+
    "\6\10\3\0\1\10\4\0\12\11\41\10\5\0\43\10\15\0\35\10"+
    "\3\0\63\10\1\0\14\10\17\0\1\10\12\11\46\0\67\10\11\0"+
    "\16\10\2\0\12\11\6\0\27\10\3\0\1\10\5\0\77\10\1\0"+
    "\1\10\1\0\1\10\30\0\3\10\2\0\20\10\2\0\4\10\13\0"+
    "\6\10\2\0\6\10\2\0\6\10\11\0\7\10\1\0\7\10\221\0"+
    "\53\10\5\0\12\11\6\0\u2ba4\10\14\0\27\10\4\0\61\10\u2104\0"+
    "\u016e\10\2\0\152\10\46\0\7\10\14\0\5\10\5\0\14\10\1\0"+
    "\15\10\1\0\5\10\1\0\1\10\1\0\2\10\1\0\2\10\1\0"+
    "\154\10\41\0\u016b\10\22\0\100\10\2\0\66\10\50\0\14\10\164\0"+
    "\5\10\1\0\207\10\23\0\12\11\7\0\32\10\6\0\32\10\13\0"+
    "\131\10\3\0\6\10\2\0\6\10\2\0\6\10\2\0\3\10\43\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\4\0\1\1\2\2\2\3\1\4\1\5\2\6\1\7"+
    "\1\2\1\10\1\11\1\7\1\12\1\13\1\14\1\15"+
    "\1\16\1\17\1\20\1\21\1\22\1\23\1\24\15\7"+
    "\1\25\1\26\1\27\1\30\1\31\1\32\1\33\1\34"+
    "\1\35\1\36\1\37\1\40\1\41\1\37\1\41\1\42"+
    "\1\43\2\0\1\44\1\45\1\46\1\47\1\50\1\51"+
    "\3\7\1\52\1\53\1\54\1\55\1\56\12\7\1\57"+
    "\10\7\1\60\1\7\1\61\1\62\1\63\1\64\1\65"+
    "\1\66\1\67\1\70\1\71\1\72\1\73\1\74\1\75"+
    "\1\76\1\77\1\100\1\0\1\101\2\0\1\102\4\7"+
    "\1\103\1\104\2\7\1\105\7\7\1\106\11\7\1\107"+
    "\2\0\1\3\11\7\1\110\3\7\1\111\4\7\1\112"+
    "\1\7\1\113\3\7\1\43\5\7\1\114\1\7\1\115"+
    "\1\116\1\117\1\120\1\121\1\7\1\122\2\7\1\123"+
    "\1\7\1\124\1\125\1\126\1\127\7\7\1\130\1\131"+
    "\1\132\2\7\1\133\1\134\3\7\1\135\1\7\1\136"+
    "\1\137\1\140";

  private static int [] zzUnpackAction() {
    int [] result = new int[216];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\67\0\156\0\245\0\334\0\u0113\0\u014a\0\u0181"+
    "\0\u014a\0\u01b8\0\u01ef\0\u014a\0\u0226\0\u025d\0\u0294\0\u02cb"+
    "\0\u0302\0\u0339\0\u0370\0\u03a7\0\u014a\0\u014a\0\u014a\0\u014a"+
    "\0\u014a\0\u014a\0\u014a\0\u03de\0\u014a\0\u0415\0\u044c\0\u0483"+
    "\0\u04ba\0\u04f1\0\u0528\0\u055f\0\u0596\0\u05cd\0\u0604\0\u063b"+
    "\0\u0672\0\u06a9\0\u06e0\0\u0717\0\u074e\0\u0785\0\u07bc\0\u07f3"+
    "\0\u014a\0\u082a\0\u014a\0\u014a\0\u0861\0\u014a\0\u0898\0\u08cf"+
    "\0\u0906\0\u014a\0\u093d\0\u0974\0\u09ab\0\u014a\0\u014a\0\u09e2"+
    "\0\u0a19\0\u014a\0\u014a\0\u0a50\0\u0a87\0\u0abe\0\u0af5\0\u014a"+
    "\0\u014a\0\u0b2c\0\u014a\0\u0b63\0\u0b9a\0\u0bd1\0\u0c08\0\u0c3f"+
    "\0\u0c76\0\u0cad\0\u0ce4\0\u0d1b\0\u0d52\0\u025d\0\u0d89\0\u0dc0"+
    "\0\u0df7\0\u0e2e\0\u0e65\0\u0e9c\0\u0ed3\0\u0f0a\0\u025d\0\u0f41"+
    "\0\u014a\0\u014a\0\u014a\0\u014a\0\u014a\0\u0f78\0\u014a\0\u014a"+
    "\0\u014a\0\u014a\0\u014a\0\u014a\0\u014a\0\u014a\0\u014a\0\u014a"+
    "\0\u0faf\0\u014a\0\u0fe6\0\u101d\0\u014a\0\u1054\0\u108b\0\u10c2"+
    "\0\u10f9\0\u014a\0\u014a\0\u1130\0\u1167\0\u119e\0\u11d5\0\u120c"+
    "\0\u1243\0\u127a\0\u12b1\0\u12e8\0\u131f\0\u025d\0\u1356\0\u138d"+
    "\0\u13c4\0\u13fb\0\u1432\0\u1469\0\u14a0\0\u14d7\0\u150e\0\u014a"+
    "\0\u1545\0\u157c\0\u0fe6\0\u15b3\0\u15ea\0\u1621\0\u1658\0\u168f"+
    "\0\u16c6\0\u16fd\0\u1734\0\u176b\0\u025d\0\u17a2\0\u17d9\0\u1810"+
    "\0\u025d\0\u1847\0\u187e\0\u18b5\0\u18ec\0\u025d\0\u1923\0\u195a"+
    "\0\u1991\0\u19c8\0\u19ff\0\u014a\0\u1a36\0\u1a6d\0\u1aa4\0\u1adb"+
    "\0\u1b12\0\u1b49\0\u1b80\0\u025d\0\u025d\0\u025d\0\u025d\0\u025d"+
    "\0\u1bb7\0\u025d\0\u1bee\0\u1c25\0\u025d\0\u1c5c\0\u025d\0\u025d"+
    "\0\u025d\0\u025d\0\u1c93\0\u1cca\0\u1d01\0\u1d38\0\u1d6f\0\u1da6"+
    "\0\u1ddd\0\u025d\0\u025d\0\u025d\0\u1e14\0\u1e4b\0\u025d\0\u025d"+
    "\0\u1e82\0\u1eb9\0\u1ef0\0\u025d\0\u1f27\0\u025d\0\u025d\0\u025d";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[216];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\13\5\1\6\53\5\1\7\1\10\2\11\1\12\1\13"+
    "\1\14\1\15\1\16\1\7\1\17\1\20\1\21\1\22"+
    "\1\16\1\23\1\24\1\25\1\26\1\27\1\30\1\31"+
    "\1\32\1\33\1\34\1\35\1\36\1\37\1\40\1\41"+
    "\1\42\1\43\2\16\1\44\1\45\1\46\1\47\1\50"+
    "\1\51\1\16\1\52\2\16\1\53\1\54\1\55\1\56"+
    "\1\57\1\60\1\61\1\62\1\63\1\64\1\7\1\65"+
    "\2\7\61\65\1\66\1\65\1\67\1\70\2\7\62\70"+
    "\1\66\1\71\13\5\1\0\53\5\14\72\1\73\52\72"+
    "\71\0\1\11\70\0\1\74\1\75\11\0\1\76\66\0"+
    "\1\77\55\0\2\15\65\0\4\16\3\0\2\16\13\0"+
    "\22\16\23\0\1\100\4\0\2\100\13\0\22\100\26\0"+
    "\1\101\3\0\1\102\67\0\1\103\54\0\4\16\3\0"+
    "\2\16\13\0\1\16\1\104\6\16\1\105\2\16\1\106"+
    "\6\16\32\0\1\107\1\110\65\0\1\111\1\112\76\0"+
    "\1\113\44\0\4\16\3\0\2\16\13\0\1\16\1\114"+
    "\3\16\1\115\1\116\1\16\1\117\11\16\21\0\4\16"+
    "\3\0\2\16\13\0\2\16\1\120\17\16\21\0\4\16"+
    "\3\0\2\16\13\0\1\16\1\121\20\16\21\0\4\16"+
    "\3\0\2\16\13\0\7\16\1\122\1\123\11\16\21\0"+
    "\4\16\3\0\1\16\1\124\13\0\13\16\1\125\6\16"+
    "\21\0\4\16\3\0\2\16\13\0\1\126\1\16\1\127"+
    "\17\16\21\0\4\16\3\0\2\16\13\0\13\16\1\130"+
    "\1\131\5\16\21\0\4\16\3\0\2\16\13\0\4\16"+
    "\1\132\5\16\1\133\7\16\21\0\4\16\3\0\2\16"+
    "\13\0\7\16\1\134\12\16\21\0\4\16\3\0\2\16"+
    "\13\0\12\16\1\135\7\16\21\0\4\16\3\0\2\16"+
    "\13\0\13\16\1\136\6\16\21\0\4\16\3\0\2\16"+
    "\13\0\6\16\1\137\13\16\21\0\4\16\3\0\1\16"+
    "\1\140\13\0\22\16\32\0\1\141\34\0\1\142\31\0"+
    "\1\143\35\0\1\144\30\0\1\145\66\0\1\146\66\0"+
    "\1\147\40\0\1\150\25\0\1\151\41\0\1\152\24\0"+
    "\1\153\47\0\1\65\2\0\61\65\1\0\1\65\35\0"+
    "\1\154\1\0\1\155\6\0\1\156\16\0\1\157\2\0"+
    "\1\70\2\0\62\70\36\0\1\154\1\0\1\155\6\0"+
    "\1\156\17\0\1\160\16\0\1\161\1\0\1\162\47\0"+
    "\1\74\1\10\1\11\64\74\5\163\1\164\61\163\6\0"+
    "\4\100\3\0\2\100\13\0\22\100\32\0\1\165\55\0"+
    "\4\16\3\0\2\16\13\0\14\16\1\166\5\16\21\0"+
    "\4\16\3\0\2\16\13\0\13\16\1\167\6\16\21\0"+
    "\4\16\3\0\2\16\13\0\5\16\1\170\1\171\13\16"+
    "\32\0\1\172\66\0\1\173\55\0\4\16\3\0\2\16"+
    "\13\0\2\16\1\174\17\16\21\0\4\16\3\0\2\16"+
    "\13\0\2\16\1\175\17\16\21\0\4\16\3\0\2\16"+
    "\13\0\13\16\1\176\6\16\21\0\4\16\3\0\2\16"+
    "\13\0\7\16\1\177\12\16\21\0\4\16\3\0\2\16"+
    "\13\0\4\16\1\200\15\16\21\0\4\16\3\0\2\16"+
    "\13\0\7\16\1\201\12\16\21\0\4\16\3\0\2\16"+
    "\13\0\10\16\1\202\11\16\21\0\4\16\3\0\2\16"+
    "\13\0\4\16\1\203\15\16\21\0\4\16\3\0\2\16"+
    "\13\0\13\16\1\204\6\16\21\0\4\16\3\0\2\16"+
    "\13\0\1\16\1\205\17\16\1\206\21\0\4\16\3\0"+
    "\2\16\13\0\4\16\1\207\15\16\21\0\4\16\3\0"+
    "\2\16\13\0\13\16\1\210\6\16\21\0\4\16\3\0"+
    "\2\16\13\0\11\16\1\211\10\16\21\0\4\16\3\0"+
    "\2\16\13\0\10\16\1\212\11\16\21\0\4\16\3\0"+
    "\2\16\13\0\7\16\1\213\12\16\21\0\4\16\3\0"+
    "\2\16\13\0\11\16\1\214\10\16\21\0\4\16\3\0"+
    "\2\16\13\0\4\16\1\215\15\16\21\0\4\16\3\0"+
    "\2\16\13\0\12\16\1\216\7\16\21\0\4\16\3\0"+
    "\2\16\13\0\5\16\1\217\14\16\32\0\1\220\65\0"+
    "\1\221\50\0\5\163\1\222\65\163\1\223\1\222\61\163"+
    "\6\0\4\16\3\0\2\16\13\0\7\16\1\224\12\16"+
    "\21\0\4\16\3\0\2\16\13\0\12\16\1\225\7\16"+
    "\21\0\4\16\3\0\2\16\13\0\16\16\1\226\3\16"+
    "\21\0\4\16\3\0\2\16\13\0\4\16\1\227\15\16"+
    "\21\0\4\16\3\0\2\16\13\0\3\16\1\230\16\16"+
    "\21\0\4\16\3\0\2\16\13\0\10\16\1\231\11\16"+
    "\21\0\4\16\3\0\2\16\13\0\12\16\1\232\7\16"+
    "\21\0\4\16\3\0\2\16\13\0\11\16\1\233\10\16"+
    "\21\0\4\16\3\0\2\16\13\0\5\16\1\234\14\16"+
    "\21\0\4\16\3\0\2\16\13\0\7\16\1\235\12\16"+
    "\21\0\4\16\3\0\2\16\13\0\11\16\1\236\10\16"+
    "\21\0\4\16\3\0\2\16\13\0\3\16\1\237\16\16"+
    "\21\0\4\16\3\0\2\16\13\0\6\16\1\240\13\16"+
    "\21\0\4\16\3\0\2\16\13\0\12\16\1\241\7\16"+
    "\21\0\4\16\3\0\2\16\13\0\12\16\1\242\7\16"+
    "\21\0\4\16\3\0\2\16\13\0\10\16\1\243\11\16"+
    "\21\0\4\16\3\0\2\16\13\0\4\16\1\244\15\16"+
    "\21\0\4\16\3\0\2\16\13\0\4\16\1\245\15\16"+
    "\21\0\4\16\3\0\2\16\13\0\1\246\21\16\21\0"+
    "\4\16\3\0\2\16\13\0\5\16\1\247\4\16\1\250"+
    "\7\16\21\0\4\16\3\0\2\16\13\0\1\16\1\251"+
    "\20\16\21\0\4\16\3\0\2\16\13\0\10\16\1\252"+
    "\11\16\21\0\4\16\3\0\2\16\13\0\7\16\1\253"+
    "\12\16\30\0\1\254\51\0\4\163\1\11\1\222\61\163"+
    "\6\0\4\16\3\0\2\16\13\0\5\16\1\255\14\16"+
    "\21\0\4\16\3\0\2\16\13\0\2\16\1\256\17\16"+
    "\21\0\4\16\3\0\2\16\13\0\10\16\1\257\11\16"+
    "\21\0\4\16\3\0\2\16\13\0\12\16\1\260\7\16"+
    "\21\0\4\16\3\0\2\16\13\0\4\16\1\261\15\16"+
    "\21\0\4\16\3\0\2\16\13\0\7\16\1\262\12\16"+
    "\21\0\4\16\3\0\2\16\13\0\10\16\1\263\11\16"+
    "\21\0\4\16\3\0\2\16\13\0\12\16\1\264\7\16"+
    "\21\0\4\16\3\0\2\16\13\0\7\16\1\265\12\16"+
    "\21\0\4\16\3\0\2\16\13\0\11\16\1\266\10\16"+
    "\21\0\4\16\3\0\1\16\1\267\13\0\22\16\21\0"+
    "\4\16\3\0\2\16\13\0\17\16\1\270\2\16\21\0"+
    "\4\16\3\0\2\16\13\0\13\16\1\271\6\16\21\0"+
    "\4\16\3\0\2\16\13\0\21\16\1\272\21\0\4\16"+
    "\3\0\2\16\13\0\13\16\1\273\6\16\21\0\4\16"+
    "\3\0\2\16\13\0\5\16\1\274\14\16\21\0\4\16"+
    "\3\0\2\16\13\0\1\275\21\16\21\0\4\16\3\0"+
    "\2\16\13\0\5\16\1\247\14\16\21\0\4\16\3\0"+
    "\2\16\13\0\13\16\1\276\6\16\21\0\4\16\3\0"+
    "\2\16\13\0\20\16\1\277\1\16\21\0\4\16\3\0"+
    "\2\16\13\0\12\16\1\300\7\16\21\0\4\16\3\0"+
    "\2\16\13\0\3\16\1\301\16\16\21\0\4\16\3\0"+
    "\2\16\13\0\4\16\1\302\15\16\21\0\4\16\3\0"+
    "\2\16\13\0\4\16\1\303\15\16\21\0\4\16\3\0"+
    "\2\16\13\0\3\16\1\304\16\16\21\0\4\16\3\0"+
    "\2\16\13\0\5\16\1\305\14\16\21\0\4\16\3\0"+
    "\2\16\13\0\7\16\1\306\12\16\21\0\4\16\3\0"+
    "\2\16\13\0\3\16\1\307\16\16\21\0\4\16\3\0"+
    "\2\16\13\0\1\310\21\16\21\0\4\16\3\0\2\16"+
    "\13\0\10\16\1\311\11\16\21\0\4\16\3\0\2\16"+
    "\13\0\3\16\1\312\16\16\21\0\4\16\3\0\2\16"+
    "\13\0\2\16\1\313\17\16\21\0\4\16\3\0\2\16"+
    "\13\0\12\16\1\314\7\16\21\0\4\16\3\0\2\16"+
    "\13\0\4\16\1\315\15\16\21\0\4\16\3\0\2\16"+
    "\13\0\6\16\1\316\13\16\21\0\4\16\3\0\2\16"+
    "\13\0\21\16\1\317\21\0\4\16\3\0\1\16\1\320"+
    "\13\0\22\16\21\0\4\16\3\0\2\16\13\0\10\16"+
    "\1\321\11\16\21\0\4\16\3\0\2\16\13\0\3\16"+
    "\1\322\16\16\21\0\4\16\3\0\2\16\13\0\12\16"+
    "\1\323\7\16\21\0\4\16\3\0\2\16\13\0\2\16"+
    "\1\324\17\16\21\0\4\16\3\0\2\16\13\0\3\16"+
    "\1\325\16\16\21\0\4\16\3\0\2\16\13\0\4\16"+
    "\1\326\15\16\21\0\4\16\3\0\2\16\13\0\15\16"+
    "\1\327\4\16\21\0\4\16\3\0\2\16\13\0\12\16"+
    "\1\330\7\16\13\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[8030];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\4\0\2\1\1\11\1\1\1\11\2\1\1\11\10\1"+
    "\7\11\1\1\1\11\23\1\1\11\1\1\2\11\1\1"+
    "\1\11\3\1\1\11\1\1\2\0\2\11\2\1\2\11"+
    "\4\1\2\11\1\1\1\11\25\1\5\11\1\1\12\11"+
    "\1\0\1\11\2\0\1\11\4\1\2\11\24\1\1\11"+
    "\2\0\31\1\1\11\54\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[216];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
	ComplexSymbolFactory symbolFactory = new ComplexSymbolFactory();
	StringBuilder stringBuilder = new StringBuilder();

	private Symbol symbol(int type) {
		String text = yytext();
		Location left = new Location(yyline, yycolumn);
		Location right = new Location(yyline, yycolumn + text.length());
		return symbolFactory.newSymbol(text, type, left, right);
	}
  
	private Symbol symbol(int type, Object value) {
		String text = yytext();
		Location left = new Location(yyline, yycolumn);
		Location right = new Location(yyline, yycolumn + text.length());
		return symbolFactory.newSymbol(text, type, left, right, value);
	}


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Lexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 1920) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

    // numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  @Override
public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn++;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 1: 
          { return symbol(Tokens.VERBATIM_CONTENT, yytext());
          }
        case 97: break;
        case 2: 
          { String s = yytext();
	int code = s.charAt(0);
	throw new RuntimeException("Illegal character '" + yytext() + "' (code " + code + ")");
          }
        case 98: break;
        case 3: 
          { // ignore
          }
        case 99: break;
        case 4: 
          { return symbol(Tokens.DIVIDE);
          }
        case 100: break;
        case 5: 
          { return symbol(Tokens.TIMES);
          }
        case 101: break;
        case 6: 
          { return symbol(Tokens.INTEGER_LITERAL, Integer.parseInt(yytext()));
          }
        case 102: break;
        case 7: 
          { return symbol(Tokens.IDENTIFIER, yytext());
          }
        case 103: break;
        case 8: 
          { return symbol(Tokens.LESS);
          }
        case 104: break;
        case 9: 
          { return symbol(Tokens.QUESTION_MARK);
          }
        case 105: break;
        case 10: 
          { return symbol(Tokens.ASSIGN);
          }
        case 106: break;
        case 11: 
          { return symbol(Tokens.GREATER);
          }
        case 107: break;
        case 12: 
          { return symbol(Tokens.OPENING_PARENTHESIS);
          }
        case 108: break;
        case 13: 
          { return symbol(Tokens.CLOSING_PARENTHESIS);
          }
        case 109: break;
        case 14: 
          { return symbol(Tokens.OPENING_CURLY_BRACE);
          }
        case 110: break;
        case 15: 
          { return symbol(Tokens.CLOSING_CURLY_BRACE);
          }
        case 111: break;
        case 16: 
          { return symbol(Tokens.OPENING_SQUARE_BRACKET);
          }
        case 112: break;
        case 17: 
          { return symbol(Tokens.CLOSING_SQUARE_BRACKET);
          }
        case 113: break;
        case 18: 
          { return symbol(Tokens.SEMICOLON);
          }
        case 114: break;
        case 19: 
          { return symbol(Tokens.COLON);
          }
        case 115: break;
        case 20: 
          { return symbol(Tokens.COMMA);
          }
        case 116: break;
        case 21: 
          { return symbol(Tokens.PLUS);
          }
        case 117: break;
        case 22: 
          { return symbol(Tokens.MINUS);
          }
        case 118: break;
        case 23: 
          { return symbol(Tokens.MOD);
          }
        case 119: break;
        case 24: 
          { return symbol(Tokens.LOGICAL_NOT);
          }
        case 120: break;
        case 25: 
          { return symbol(Tokens.BITWISE_AND);
          }
        case 121: break;
        case 26: 
          { return symbol(Tokens.BITWISE_OR);
          }
        case 122: break;
        case 27: 
          { return symbol(Tokens.BITWISE_NOT);
          }
        case 123: break;
        case 28: 
          { return symbol(Tokens.BITWISE_XOR);
          }
        case 124: break;
        case 29: 
          { stringBuilder.setLength(0);
		yybegin(SINGLE_QUOTED_STRING);
          }
        case 125: break;
        case 30: 
          { stringBuilder.setLength(0);
		yybegin(DOUBLE_QUOTED_STRING);
          }
        case 126: break;
        case 31: 
          { stringBuilder.append(yytext());
          }
        case 127: break;
        case 32: 
          { yybegin(CODE); 
		return symbol(Tokens.STRING_LITERAL, stringBuilder.toString());
          }
        case 128: break;
        case 33: 
          { stringBuilder.append('\\');
          }
        case 129: break;
        case 34: 
          // lookahead expression with fixed base length
          zzMarkedPos = zzStartRead + 1;
          { return symbol(Tokens.VERBATIM_CONTENT, yytext());
          }
        case 130: break;
        case 35: 
          { yybegin(CODE);
          }
        case 131: break;
        case 36: 
          { return symbol(Tokens.DIVIDE_ASSIGN);
          }
        case 132: break;
        case 37: 
          { return symbol(Tokens.TIMES_ASSIGN);
          }
        case 133: break;
        case 38: 
          { return symbol(Tokens.LOCAL_VARIABLE, yytext().substring(1));
          }
        case 134: break;
        case 39: 
          { return symbol(Tokens.SHIFT_LEFT);
          }
        case 135: break;
        case 40: 
          { return symbol(Tokens.LESS_EQUAL);
          }
        case 136: break;
        case 41: 
          { yybegin(YYINITIAL);
		return symbol(Tokens.SEMICOLON);
          }
        case 137: break;
        case 42: 
          { return symbol(Tokens.EQUAL);
          }
        case 138: break;
        case 43: 
          { return symbol(Tokens.RIGHT_ARROW);
          }
        case 139: break;
        case 44: 
          { return symbol(Tokens.GREATER_EQUAL);
          }
        case 140: break;
        case 45: 
          { return symbol(Tokens.SHIFT_RIGHT);
          }
        case 141: break;
        case 46: 
          { return symbol(Tokens.SCOPE_RESOLUTION);
          }
        case 142: break;
        case 47: 
          { return symbol(Tokens.IF);
          }
        case 143: break;
        case 48: 
          { return symbol(Tokens.DO);
          }
        case 144: break;
        case 49: 
          { return symbol(Tokens.PLUS_ASSIGN);
          }
        case 145: break;
        case 50: 
          { return symbol(Tokens.INCREMENT);
          }
        case 146: break;
        case 51: 
          { return symbol(Tokens.MINUS_ASSIGN);
          }
        case 147: break;
        case 52: 
          { return symbol(Tokens.DECREMENT);
          }
        case 148: break;
        case 53: 
          { return symbol(Tokens.MOD_ASSIGN);
          }
        case 149: break;
        case 54: 
          { return symbol(Tokens.NOT_EQUAL);
          }
        case 150: break;
        case 55: 
          { return symbol(Tokens.BITWISE_AND_ASSIGN);
          }
        case 151: break;
        case 56: 
          { return symbol(Tokens.SHORTCUT_AND);
          }
        case 152: break;
        case 57: 
          { return symbol(Tokens.BITWISE_OR_ASSIGN);
          }
        case 153: break;
        case 58: 
          { return symbol(Tokens.SHORTCUT_OR);
          }
        case 154: break;
        case 59: 
          { return symbol(Tokens.BITWISE_XOR_ASSIGN);
          }
        case 155: break;
        case 60: 
          { stringBuilder.append('\n');
          }
        case 156: break;
        case 61: 
          { stringBuilder.append('\t');
          }
        case 157: break;
        case 62: 
          { stringBuilder.append('\r');
          }
        case 158: break;
        case 63: 
          { stringBuilder.append('\'');
          }
        case 159: break;
        case 64: 
          { stringBuilder.append('\"');
          }
        case 160: break;
        case 65: 
          { yybegin(CODE);
		return symbol(Tokens.IDENTIFIER, "echo");
          }
        case 161: break;
        case 66: 
          { return symbol(Tokens.SHIFT_LEFT_ASSIGN);
          }
        case 162: break;
        case 67: 
          { return symbol(Tokens.IDENTICAL);
          }
        case 163: break;
        case 68: 
          { return symbol(Tokens.SHIFT_RIGHT_ASSIGN);
          }
        case 164: break;
        case 69: 
          { return symbol(Tokens.FOR);
          }
        case 165: break;
        case 70: 
          { return symbol(Tokens.TRY);
          }
        case 166: break;
        case 71: 
          { return symbol(Tokens.NOT_IDENTICAL);
          }
        case 167: break;
        case 72: 
          { return symbol(Tokens.NULL_LITERAL);
          }
        case 168: break;
        case 73: 
          { return symbol(Tokens.BOOLEAN_LITERAL, true);
          }
        case 169: break;
        case 74: 
          { return symbol(Tokens.SELF);
          }
        case 170: break;
        case 75: 
          { return symbol(Tokens.ELSE);
          }
        case 171: break;
        case 76: 
          { return symbol(Tokens.FINAL);
          }
        case 172: break;
        case 77: 
          { return symbol(Tokens.BOOLEAN_LITERAL, false);
          }
        case 173: break;
        case 78: 
          { return symbol(Tokens.UNTIL);
          }
        case 174: break;
        case 79: 
          { return symbol(Tokens.CLASS);
          }
        case 175: break;
        case 80: 
          { return symbol(Tokens.CATCH);
          }
        case 176: break;
        case 81: 
          { return symbol(Tokens.THROW);
          }
        case 177: break;
        case 82: 
          { return symbol(Tokens.ARRAY);
          }
        case 178: break;
        case 83: 
          { return symbol(Tokens.ELSEIF);
          }
        case 179: break;
        case 84: 
          { return symbol(Tokens.BREAK);
          }
        case 180: break;
        case 85: 
          { return symbol(Tokens.WHILE);
          }
        case 181: break;
        case 86: 
          { return symbol(Tokens.PUBLIC);
          }
        case 182: break;
        case 87: 
          { return symbol(Tokens.PARENT);
          }
        case 183: break;
        case 88: 
          { return symbol(Tokens.STATIC);
          }
        case 184: break;
        case 89: 
          { return symbol(Tokens.RETURN);
          }
        case 185: break;
        case 90: 
          { return symbol(Tokens.PRIVATE);
          }
        case 186: break;
        case 91: 
          { return symbol(Tokens.FINALLY);
          }
        case 187: break;
        case 92: 
          { return symbol(Tokens.FOREACH);
          }
        case 188: break;
        case 93: 
          { return symbol(Tokens.FUNCTION);
          }
        case 189: break;
        case 94: 
          { return symbol(Tokens.ABSTRACT);
          }
        case 190: break;
        case 95: 
          { return symbol(Tokens.PROTECTED);
          }
        case 191: break;
        case 96: 
          { return symbol(Tokens.INTERFACE);
          }
        case 192: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
              { 	Location location = new Location(yyline, yycolumn);
	return symbolFactory.newSymbol("EOF", Tokens.EOF, location, location); 
 }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
