
// ------------------------------------------------------------------------------------
// --- header information
// ------------------------------------------------------------------------------------

import java_cup.runtime.*;
import name.martingeisse.phunky.runtime.code.BinaryExpression;
import name.martingeisse.phunky.runtime.code.BinaryOperator;
import name.martingeisse.phunky.runtime.code.Expression;
import name.martingeisse.phunky.runtime.code.LiteralExpression;

// scanner behavior
init with {:
:};
scan with {:
	return getScanner().next_token();
:};


// ------------------------------------------------------------------------------------
// --- symbols
// ------------------------------------------------------------------------------------

// punctuation (some of these can be operators too)
terminal OPENING_PARENTHESIS, CLOSING_PARENTHESIS;
terminal OPENING_CURLY_BRACE, CLOSING_CURLY_BRACE;
terminal OPENING_SQUARE_BRACKET, CLOSING_SQUARE_BRACKET;
terminal RIGHT_ARROW;
terminal SEMICOLON;
terminal SCOPE_RESOLUTION;
terminal QUESTION_MARK;
terminal COLON;
terminal COMMA;

// compilation object keywords
terminal FUNCTION, CLASS, INTERFACE;

// modifier keywords
terminal PUBLIC, PROTECTED, PRIVATE;
terminal ABSTRACT, FINAL, STATIC;

// statement keywords
terminal FOR, FOREACH, UNTIL, DO, WHILE, BREAK;
terminal IF, ELSEIF, ELSE;
terminal RETURN;
terminal THROW, TRY, CATCH, FINALLY;

// computation and logical operators
terminal PLUS, MINUS, TIMES, DIVIDE, MOD;
terminal LOGICAL_NOT, SHORTCUT_AND, SHORTCUT_OR;
terminal BITWISE_NOT, BITWISE_AND, BITWISE_OR, BITWISE_XOR;
terminal SHIFT_LEFT, SHIFT_RIGHT;

// comparison operators
terminal EQUAL, NOT_EQUAL, IDENTICAL, NOT_IDENTICAL;
terminal GREATER, LESS, GREATER_EQUAL, LESS_EQUAL;

// assignment operators
terminal ASSIGN;
terminal INCREMENT, DECREMENT;
terminal PLUS_ASSIGN, MINUS_ASSIGN, TIMES_ASSIGN, DIVIDE_ASSIGN, MOD_ASSIGN;
terminal BITWISE_AND_ASSIGN, BITWISE_OR_ASSIGN, BITWISE_XOR_ASSIGN;
terminal SHIFT_LEFT_ASSIGN, SHIFT_RIGHT_ASSIGN;

// special expressions
terminal ARRAY;
terminal SELF;
terminal PARENT;

// primitive expressions
terminal NULL_LITERAL;
terminal Boolean BOOLEAN_LITERAL;
terminal Integer INTEGER_LITERAL;
terminal String STRING_LITERAL;
terminal String IDENTIFIER;
terminal String LOCAL_VARIABLE;



// non terminals
non terminal Expression expression;

// precedences
precedence left PLUS, MINUS;
precedence left TIMES, DIVIDE, MOD;


// ------------------------------------------------------------------------------------
// --- rules
// ------------------------------------------------------------------------------------

expression ::=
	INTEGER_LITERAL:e
		{: RESULT = new LiteralExpression(e); :} 
	| expression:e1 PLUS expression:e2
		{: RESULT = new BinaryExpression(e1, BinaryOperator.ADD, e2); :} 
	| expression:e1 MINUS expression:e2
		{: RESULT = new BinaryExpression(e1, BinaryOperator.SUBTRACT, e2); :} 
	| expression:e1 TIMES expression:e2
		{: RESULT = new BinaryExpression(e1, BinaryOperator.MULTIPLY, e2); :} 
	| expression:e1 DIVIDE expression:e2
		{: RESULT = new BinaryExpression(e1, BinaryOperator.DIVIDE, e2); :} 
	| expression:e1 MOD expression:e2
		{: RESULT = new BinaryExpression(e1, BinaryOperator.REMAINDER, e2); :} 
;


