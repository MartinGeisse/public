//----------------------------------------------------
// The following code was generated by CUP v0.11b beta 20140220
// Sat Mar 15 11:38:55 CET 2014
//----------------------------------------------------

package name.martingeisse.phunky.runtime.parser;

import java_cup.runtime.ComplexSymbolFactory.Location;
import name.martingeisse.phunky.runtime.code.BinaryExpression;
import name.martingeisse.phunky.runtime.code.BinaryOperator;
import name.martingeisse.phunky.runtime.code.Expression;
import name.martingeisse.phunky.runtime.code.LiteralExpression;

/** CUP v0.11b beta 20140220 generated parser.
  * @version Sat Mar 15 11:38:55 CET 2014
  */
@SuppressWarnings("all")
public class Parser extends java_cup.runtime.lr_parser {

	/** Default constructor. */
	public Parser() {
		super();
	}

	/** Constructor which sets the default scanner. */
	public Parser(final java_cup.runtime.Scanner s) {
		super(s);
	}

	/** Constructor which sets the default scanner. */
	public Parser(final java_cup.runtime.Scanner s, final java_cup.runtime.SymbolFactory sf) {
		super(s, sf);
	}

	/** Production table. */
	protected static final short _production_table[][] = unpackFromStrings(new String[] { "\000\007\000\002\002\003\000\002\002\004\000\002\002" + "\005\000\002\002\005\000\002\002\005\000\002\002\005" + "\000\002\002\005" });

	/** Access to production table. */
	@Override
	public short[][] production_table() {
		return _production_table;
	}

	/** Parse-action table. */
	protected static final short[][] _action_table = unpackFromStrings(new String[] { "\000\016\000\004\117\004\001\002\000\016\002\001\047" + "\001\050\001\051\001\052\001\053\001\001\002\000\016" + "\002\012\047\007\050\010\051\013\052\011\053\006\001" + "\002\000\004\117\004\001\002\000\004\117\004\001\002" + "\000\004\117\004\001\002\000\004\117\004\001\002\000" + "\004\002\000\001\002\000\004\117\004\001\002\000\016" + "\002\ufffd\047\ufffd\050\ufffd\051\ufffd\052\ufffd\053\ufffd\001" + "\002\000\016\002\ufffc\047\ufffc\050\ufffc\051\ufffc\052\ufffc" + "\053\ufffc\001\002\000\016\002\ufffe\047\ufffe\050\ufffe\051" + "\013\052\011\053\006\001\002\000\016\002\uffff\047\uffff" + "\050\uffff\051\013\052\011\053\006\001\002\000\016\002" + "\ufffb\047\ufffb\050\ufffb\051\ufffb\052\ufffb\053\ufffb\001\002" + "" });

	/** Access to parse-action table. */
	@Override
	public short[][] action_table() {
		return _action_table;
	}

	/** <code>reduce_goto</code> table. */
	protected static final short[][] _reduce_table = unpackFromStrings(new String[] { "\000\016\000\004\002\004\001\001\000\002\001\001\000" + "\002\001\001\000\004\002\017\001\001\000\004\002\016" + "\001\001\000\004\002\015\001\001\000\004\002\014\001" + "\001\000\002\001\001\000\004\002\013\001\001\000\002" + "\001\001\000\002\001\001\000\002\001\001\000\002\001" + "\001\000\002\001\001" });

	/** Access to <code>reduce_goto</code> table. */
	@Override
	public short[][] reduce_table() {
		return _reduce_table;
	}

	/** Instance of action encapsulation class. */
	protected CUP$Parser$actions action_obj;

	/** Action encapsulation object initializer. */
	@Override
	protected void init_actions() {
		action_obj = new CUP$Parser$actions(this);
	}

	/** Invoke a user supplied parse action. */
	@Override
	public java_cup.runtime.Symbol do_action(final int act_num, final java_cup.runtime.lr_parser parser, final java.util.Stack stack, final int top) throws java.lang.Exception {
		/* call code in generated class */
		return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
	}

	/** Indicates start state. */
	@Override
	public int start_state() {
		return 0;
	}

	/** Indicates start production. */
	@Override
	public int start_production() {
		return 1;
	}

	/** <code>EOF</code> Symbol index. */
	@Override
	public int EOF_sym() {
		return 0;
	}

	/** <code>error</code> Symbol index. */
	@Override
	public int error_sym() {
		return 1;
	}

	/** User initialization code. */
	@Override
	public void user_init() throws java.lang.Exception {

	}

	/** Scan to get the next Symbol. */
	@Override
	public java_cup.runtime.Symbol scan() throws java.lang.Exception {

		return getScanner().next_token();

	}
}

/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings("all")
class CUP$Parser$actions {
	private final Parser parser;

	/** Constructor */
	CUP$Parser$actions(final Parser parser) {
		this.parser = parser;
	}

	/** Method 0 with the actual generated action code for actions 0 to 300. */
	public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(final int CUP$Parser$act_num, final java_cup.runtime.lr_parser CUP$Parser$parser, final java.util.Stack CUP$Parser$stack, final int CUP$Parser$top) throws java.lang.Exception {
		/* Symbol object for return from actions */
		java_cup.runtime.Symbol CUP$Parser$result;

		/* select the action based on the action number */
		switch (CUP$Parser$act_num) {
		/*. . . . . . . . . . . . . . . . . . . .*/
		case 0: // expression ::= INTEGER_LITERAL 
		{
			Expression RESULT = null;
			final Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
			final Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
			final Integer e = (Integer)((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).value;
			RESULT = new LiteralExpression(e);
			CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression", 0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
		}
			return CUP$Parser$result;

			/*. . . . . . . . . . . . . . . . . . . .*/
		case 1: // $START ::= expression EOF 
		{
			Object RESULT = null;
			final Location start_valxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).xleft;
			final Location start_valxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).xright;
			final Expression start_val = (Expression)((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).value;
			RESULT = start_val;
			CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START", 0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top - 1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
		}
			/* ACCEPT */
			CUP$Parser$parser.done_parsing();
			return CUP$Parser$result;

			/*. . . . . . . . . . . . . . . . . . . .*/
		case 2: // expression ::= expression PLUS expression 
		{
			Expression RESULT = null;
			final Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).xleft;
			final Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).xright;
			final Expression e1 = (Expression)((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).value;
			final Location e2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
			final Location e2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
			final Expression e2 = (Expression)((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).value;
			RESULT = new BinaryExpression(e1, BinaryOperator.ADD, e2);
			CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression", 0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top - 2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
		}
			return CUP$Parser$result;

			/*. . . . . . . . . . . . . . . . . . . .*/
		case 3: // expression ::= expression MINUS expression 
		{
			Expression RESULT = null;
			final Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).xleft;
			final Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).xright;
			final Expression e1 = (Expression)((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).value;
			final Location e2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
			final Location e2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
			final Expression e2 = (Expression)((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).value;
			RESULT = new BinaryExpression(e1, BinaryOperator.SUBTRACT, e2);
			CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression", 0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top - 2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
		}
			return CUP$Parser$result;

			/*. . . . . . . . . . . . . . . . . . . .*/
		case 4: // expression ::= expression TIMES expression 
		{
			Expression RESULT = null;
			final Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).xleft;
			final Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).xright;
			final Expression e1 = (Expression)((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).value;
			final Location e2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
			final Location e2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
			final Expression e2 = (Expression)((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).value;
			RESULT = new BinaryExpression(e1, BinaryOperator.MULTIPLY, e2);
			CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression", 0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top - 2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
		}
			return CUP$Parser$result;

			/*. . . . . . . . . . . . . . . . . . . .*/
		case 5: // expression ::= expression DIVIDE expression 
		{
			Expression RESULT = null;
			final Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).xleft;
			final Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).xright;
			final Expression e1 = (Expression)((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).value;
			final Location e2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
			final Location e2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
			final Expression e2 = (Expression)((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).value;
			RESULT = new BinaryExpression(e1, BinaryOperator.DIVIDE, e2);
			CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression", 0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top - 2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
		}
			return CUP$Parser$result;

			/*. . . . . . . . . . . . . . . . . . . .*/
		case 6: // expression ::= expression MOD expression 
		{
			Expression RESULT = null;
			final Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).xleft;
			final Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).xright;
			final Expression e1 = (Expression)((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).value;
			final Location e2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
			final Location e2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
			final Expression e2 = (Expression)((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).value;
			RESULT = new BinaryExpression(e1, BinaryOperator.REMAINDER, e2);
			CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression", 0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top - 2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
		}
			return CUP$Parser$result;

			/* . . . . . .*/
		default:
			throw new Exception("Invalid action number " + CUP$Parser$act_num + "found in internal parse table");

		}
	} /* end of method */

	/** Method splitting the generated action code into several parts. */
	public final java_cup.runtime.Symbol CUP$Parser$do_action(final int CUP$Parser$act_num, final java_cup.runtime.lr_parser CUP$Parser$parser, final java.util.Stack CUP$Parser$stack, final int CUP$Parser$top) throws java.lang.Exception {
		return CUP$Parser$do_action_part00000000(CUP$Parser$act_num, CUP$Parser$parser, CUP$Parser$stack, CUP$Parser$top);
	}
}
