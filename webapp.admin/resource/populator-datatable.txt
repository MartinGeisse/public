
Es gibt keine schon existierenden Populator-Klassen, die direkt JSON in einen JavascriptAssembler
schreiben. Falls man eine solche direkte Lösung braucht, kann man auch direkt eine Subklasse
von AbstractEntityDataTable schreiben und *alle* Tabellenspalten da assemblen, ohne Populatoren.
Eine solche Populator-Lösung wird schlicht und einfach nicht gebraucht.

Was sinnvoll ist, ist eine Implementierung mit Wicket-Populatoren, also solchen, die Markup
erzeugen. Grundsätzlich lassen sich da sogar Populatoren reinbauen, die direkt JSON erzeugen,
nur halt nicht per Zugriff auf den äußeren Javascript-Assembler (*). Eine solche Klasse
lässt sich am einfachsten als Subklasse von AbstractJsonRenderingEntityDataTablePanel
schreiben, und zwar mit einem ListView<ICellPopulator> welches an ein Tag im wicket:child
gehängt wird; dieses enthält wiederum ein (JSON-Array-Komma und) <wicket:json> und darin
ein leeres <wicket:container>, welches vom jeweiligen Populator mit einer Component verknüpft
wird. Der Populator ist der Einfachheit halber identisch mit dem jeweiligen ColumnDescriptor;
dieser kann z.B. ein Wrapper für einen ICellPopulator sein. Der ColumnDescriptor entscheidet
dann auch gleich, ob die Ausgabe noch JSON-encoded werden muss oder ob sie das schon ist.

(*) Einfachste Umsetzung: <wicket:json> bekommt einen Schalter, mit dem die Encoding-Funktion
deaktiviert wird; sie verhalten sich dann wie ein unveränderter WebMarkupContainer.
