
Entity/NaviNode: IGetNavigationDelegateEntity liefert eine Delegate-Entity und mit dieser wird gesucht.
Man kann zum Beispiel die Entity "Order" als Delegate zur Entity "OrderItem" einstellen. Dann wird
für Instance-lokale Seiten für OrderItem-Instanzen vorzugsweise die ungefilterte Liste zu "OrderItem"
genommen, aber falls es die nicht gibt, die ungefilterte Liste zu "Order".

- IEntityNavigationContributor
	- wichtiger Standard-Contributor ist natürlich einer, der explizit einen Pfad
	  und NaviNode nimmt und nur diese liefert (bei allen Entities, die anhand
	  eines Predicate erkannt werden). Damit kann man eigene Seiten einfügen.
	- Contributoren müssen außerdem in der Lage sein, die Sortierung für
	  Navi-Subnodes eines Nodes zu liefern. Am besten mit Vorrang nach Score,
	  so dass z.B. eine alphabetische Sortierung als Fallback dient. Denkbar
	  wäre auch ein orderIndex in den Nodes, wobei dieser von den Contributoren
	  gesetzt werden müsste, was wieder umständlich für Standard-Contributoren
	  ist. Einfache aber auch flexible Lösung: konfigurierbarer OrderIndex sowie
	  eine einzige Sortierungs-Strategy aus der Application Config, die
	  default-Implementierung geht direkt nach orderIndex und bei gleichem
	  orderIndex alphabetisch nach Title.
	
- Interessant wären in diesem Zuge auch mal sauber definierte "Terms"-Interfaces
	(IdAware, NameAware, DisplayNameAware) und ein sauberes Predicate-/
	Mapping-/Comparator-System (Comparator-Interface schon da; wir brauchen
	dann auch Standard-Implementierungen für die Terms-Interfaces sowie
	Kombinator-Implementierungen, allerdings letzteres nicht übertreiben,
	es geht nur darum nicht *ganz* unnötig eine innere Klasse zu schreiben,
	aber sobald es komplexer wird ist eine innere Klasse besser als
	eine Kombinator-Struktur). Gut wären auch Implementierungen, die sich
	auf die globalen App-Daten aus der Admin-App beziehen.
	- Basissystem (Terms, Terms-Impl, Kombinatoren): webapp.common
	- evtl. Wicket-Komponenten, die darauf aufbauen: webapp.wicket
	- Impl., die sich auf globale Admin-Daten beziehen: webapp.admin

------

Darstellung von Variablen als Namenloser Platzhalter:
	/foo/${bar}/fupp
	/foo/*/fupp
später. Ist zwar unschön, wenn ${bar} öffentlich zu sehen ist, aber nicht
katastrophal (eigentlich sollen eh keine URLs öffentlich sichtbar sein,
wo der Path-PP zu sehen ist). Erst mal alles zum Laufen bringen.

	Dabei müsste beim Mounting klar sein, wann eine URL einem normalen Child
	und wann einem Instance Child entspricht. Das ist bei URL->Handler aber
	einfach: Der Instance Child Mapper erkennt beliebige Segmentwerte aber
	hat einen niedrigeren Compatibility Score.
	
	Dann muss von NaviPaths und NaviPathTemplates gesprochen werden.
	NaviPath: /foo/nodes/99/bar/fupp
	MountPath: /foo/nodes/${id}/bar/fupp
	NaviPathTemplate: /foo/nodes/*/bar/fupp
	also NaviPathTemplate im Prinzip wie der MountPath mit einem Platzhalter, aber
	mit neutraler Syntax und ohne Parametername (der ist eine interne Sache).

------

Navigation Tree kann als Contributor zur Sitemap fungieren. Wobei
1. es auch andere geben könnte, daher sollte das Sitemap-Erstellen eine separate Funktionalität
   sein und der NaviTree wirklich nur ein Contributor, kein zentrales Objekt.
2. XML-Sitemaps bei Admin-Applications unwichtig sind, aber Sitemap-Seiten wichtig.
3. es Zusammen mit der Sitemap auch eine Suchfunktion geben kann. Wie stark die beiden zusammenhängen
   muss noch geklärt werden.





