
Zu entscheiden:
Inwiefern soll das Original-TeX nachgebildet werden? Also vor allem
was den Macro-Interpreter angeht! Wäre zwar recht cool, insbesondere
weil die Codebase dann von einer breiteren Masse genutzt wird, aber
das eigentliche Ziel ist eine einfachere Macro-Sprache! Trotzdem macht
es Sinn, auch Benutzer vom "normalen" TeX abzugreifen.


\font\ninerm=cmr9
	Lädt den Font cmr9 und speichern ihn so, dass die CS \ninerm den Font aktiviert.

\font\magnifiedfiverm=cmr5 at 10pt
	Skaliert einen Font. Sollte nur benutzt werden, wenn es keinen Font in der passenden
	Größe gibt.

\font\magnifiedfiverm=cmr5 scaled 2000
	Dasselbe mit Skalierungsfaktor (in 1/1000) statt Zielgröße.

\string\anycontrolsequence --> \anycontrolsequence
	Also eine Art Escaping für Control Sequences. Alle Zeichen (besonders der Backslash)
	haben Catcode 12 (other), so dass keine Effekte mehr getriggert werden. Ausnahme:
	Space hat den Space-Catcode 10.
	
\csname ... \endcsname
	Erzeugt ein Control Sequence Token, indem der Content Ausgewertet wird (Macros werden
	Expanded) und danach die Zeichen zu einem String zusammengesetzt werden. Dann darf
	aber keine Control Sequence mehr da sein, was letztendlich bedeutet, dass keine
	Primitiven CSes im Content verwendet werden dürfen (auch nicht von im Content
	aufgerufenen Macros).

Setting \escapechar
	Wird von \csname als erstes Zeichen für Control Sequences benutzt. Default ist der
	Backslash. Dieses Zeichen steuert nur die Convertierung CS->String, *nicht* die
	Erkennung von CSes, das passiert über Catcodes!

\number, \romannumeral
	Sinnvoll, um interne Variablen auszugeben, Bsp. \number\count5 gibt den
	Inhalt der Variablen count5 aus.

\uppercase, \lowercase
	Wird gesteuert per \uccode und \lccode ähnlich \catcode.
	-> Das wird in Unicode klar definiert, Idee also dass das nicht geändert werden kann
	außer es ist für bestimmte Pakete nötig.
	ACHTUNG: Wirkt eh nur auf Character Tokens!!!

\char
	Beliebiges Zeichen diret ausgeben.

’
	vor Zahlen --> oktal
	unklar welches Zeichen genau!

"
	vor Zahlen --> hexadezimal

‘
	ASCII-Code, Bsp.:
	\def\%{\char‘\%}
	unklar welches Zeichen genau!

^^A ^^7a etc.
	um *alle* ASCII-Zeichen zu erzeugen. Das passiert noch vor dem eigentlichen Parsen,
	z.B. kann das innerhalb einer CS passieren. Genau genommen steht ^ hier für
	ein Zeichen mit Catcode 7.
	
"states" N, M, S
	-> haben mit Tokenization zu tun. != Modes, die greifen an einem späteren
	Punkt an.
	Zeichen am Anfang und am Ende einer Zeile werden gelöscht.
	Danach wird am Ende jeder Zeile ein <return> Character angehängt,
		genauer gesagt das Zeichen \endlinechar (default 13),
		dessen Bedeutung vom Catcode abhängt. Wenn \endlinechar negativ oder
		> 255 ist dann wird er nicht angehängt.
	Achtung: CRLF -> LF Normalisierung!
	Nach einer CS:
		- aus Buchstaben: State S (spaces skippen)
		- aus 1 Space: State S (spaces skippen)
		- aus 1 anderen Zeichen: State M (normal weitermachen)
	Alle Spaces (Catcode 10) werden als Character Code 32 gelesen. 

Interessant:
	Was passiert mit Stretchability / Shrinkability einer Box/Glue-Sequenz, wenn man
	sie in einer hbox verpackt und diese dann wieder in einer horizontalen Sequenz
	benutzt? Hat diese hbox dann immer fest ihre "Natural Width" oder bleibt sie
	stretchable/shrinkable?

hfil, hfill, hfilll:
	1st, 2nd, 3rd order Infinity. Kann für Flattersatz und für die letzte Zeile in
	einem Absatz benutzt werden. Erst wird entschieden ob Strech oder Shrink, danach
	hat nur die höchste Ordnung != 0 Auswirkungen und nimmt den kompletten
	stretch/shrink amount ein. Vermutung: Das passiert dann wieder in dem Verhältnis
	in dem die einzelnen Infinity-Vorfaktoren der höchsten Ordnung zueinander
	stehen. Inf macht nur bei stretch/shrink Sinn, nicht bei natural. Alle dimensions
	außer der höchsten Ordnung behalten ihren natural amount.
	
	
	
baselineskip, lineskip, lineskiplimit
	Zwei vertikal angeordnete Boxen mit heights, depths h1, d1, h2, d2.
	Berechne y := baselineskip - d1 - h2
	Interline Glue (der Glue zwischen der Unterkante Box1 und Oberkante Box2:
		Wenn natural(y) < lineskiplimit
			ILG := y
		sonst
			ILG := lineskip
	Achtung: Das bedeutet insbesondere, dass baselineskip und lineskip trotz des
	ähnlichen Namens ganz anders gerechnet werden! BLS wird zwischen den Baselines
	angesetzt, LS zwischen Unterkante1 und Oberkante2.
	-
	Zusätzlicher Glue z.B. durch \smallskip wird *danach* draufgezählt, hat also
	auf die Entscheidung zwischen BLS oder LS keinen Einfluß.
	-
	Bei mehrseitigen Dokumenten wird empfohlen, dass BLS fix ist (ohne stretch/shrink)
	weil Seiten mit verschiedenen Baseline-Abständen in ein und demselben Dokument
	kacke aussehen.






