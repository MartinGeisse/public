
Basismodell: "Aktive Datenbank" (Companion Process) mit Delta-Events.

Kommunikation mit der IDE per JSON-Socket und darüber UI-Protocol u.a.

Ggf. Kommunikation direkt mit dem Browser per AJAX-JSON-API.

---

Der Zugriff auf die ADB könnte sein:
- HTTP-HTML vom Browser: Entspricht Sticky-Lösung mit dedicated server. Umständlich,
  den Wicket-Kontext zu übertragen (wäre dann second-class-webserver,
  weil er nur bestimmte Sachen rendert). Mehr Nachteile als Vorteile.
- AJAX-API vom Browser: Umständlich, das für alle Teile jedes Dokumenttyps zu
  bauen, aber für Einzelfälle interessant (gute Performance, da die
  AJAX-Calls direkt zum DocServer gehen statt über Umweg).
  DDOS zum DocServer über einen "intelligenten" Load Balancer abfangen
  + Hash-Signatur im HTTP Header oder so was.
- JSON-API-Zugriff vom Webserver: Highlevel-Sprache, in der der DocServer dem
  WebServer sagt, wie das UI zu einem Doc aussehen soll. Schon sehr gut, aber
  noch sehr aufwändig, weil dieses JSON-Format ständig erweitert werden muss.
- Serialized-API-Zugriff vom Webserver: Sieht aktuell nach der coolsten
  Lösung aus:
  - DocServer hält Doc
  - DocServer erzeugt Wicket-Komponenten dazu mit Models, die auch Remote (also
    über die API zwischen Webserver und DocServer) funktionieren. Hier muss
    nur mehr Standardisierung her (für die IModel-Klassen) aber zumindest
    die Components müssen nicht mehr so übertragen werden
  - Wicket-Komponenten werden serialized (das geht ja bei Wicket immer!)
    und zum Webserver gesendet
  - Webserver baut die Komponenten in die WorkbenchPage ein und rendert sie,
    dabei werden die Remote-Fähigen Models benutzt. Die Models sollten aber
    auch nach Möglichkeit cachen!
  - DocServer sendet Change- bzw. CacheClear- (Notify-) Events
  - Webserver ändert das Doc über die IModel API
  - Übergang zu JSON-spezifizierten Components wenn sinnvoll
  - Übergang zu HTTP-API im DocServer, die direkt vom Browser angesprochen wird,
    wenn sinnvoll
  - Übergang zu N-to-N Kommunikation wenn sinnvoll
