
Problemstellung:

- Benutzer gegeneinander abschirmen (sensible Daten; Workspace Permissions)

- Plugins gegeneinander abschirmen (Benutzer vor den von ihnen installierten
	Plugins schützen -- man kann nicht davon ausgehen, dass ein Benutzer
	vor der Installation jedes Problem abcheckt)

- Workspaces gegeneinander abschirmen

- Workspace Storage, Caching, Change Notifications, History

---

Das Ganze betrifft vor allem Plugins. Built-in Code kann auf üblichem
Wege fehlerfrei gemacht werden, spielt also in derselben Liga wie der
Webserver / die Hauptanwendung selbst. 

Plugins sind, soweit die GUI betroffen ist, nicht unbedingt auf Abschirmung
abgewiesen -> Lua oder ähnliches Scripting statt Java-Code. Wirklich
problematisch sind externe Tools. Ansätze:

- Temporäre "Toolspaces", die nur für die Dauer des Tools existieren. Das
  läuft auf temporär existierende Unix-Benutzeraccounts hinaus.

- Workspaces sind als Plain Files abgelegt und die Tools arbeiten darauf.
  Dann wären vermutlich (IDE-User == Unix-User) und (IDE-Workspace == Unix-Group).

--- Ansatz: Linux-Permissions

Linux unterstützt 2^32 User-Accounts -> machbar. 

1. Idee
- IDE-User =^= Linux-User
- IDE-Workspace =^= Linux-Usergroup
ODER 2. Idee
- IDE-User =^= (keine Linux-Entsprechung)
- IDE-Workspace =^= Linux-User

bei 1. Idee:
- Permissions für "public workspaces":
	alle Ordner: rwxrwxr-x
	ausfürbare Dateien: rwxrwxr--
	normale Dateien: rw-rw-r--
- Permissions für "private workspaces":
	alle Ordner: rwxrwx---
	ausfürbare Dateien: rwxrwx---
	normale Dateien: rw-rw----

---------------------------------------------
	
	???
	Ansatz: Solange es keine echte Task Queue gibt, reagieren die Builder direkt
	auf Change Events. -> Dazu müssten die Builder vorgehalten werden, erst noch
	instanziieren geht zu weit

Große Frage: Wie funktioniert die Trennung zwischen Plugins? Hier wären FreeBSD Jails
hilfreich! In Linux auch ohne harte Trennung sollte es zumindest einfach sein, die
Plugins zu trennen, und schwer, dass es Interferenzen gibt. Bausteine:

- GUI darf nicht abstürzen: Auch wenn ein Plugin verrückt spielt, muss es immer
  möglich sein, es wieder zu deaktivieren, selbst wenn sonst gar nichts geht.
- Revert Workspace: Nachdem ein Plugin deaktiviert wurde, muss es möglich sein,
  die Auswirkungen rückgängig zu machen.

Von daher ist die Trennung per Jails zwar wünschenswert, aber nicht so wichtig wie
die beiden o.g. Punkte.

---

bei 2. Idee ist zumindest klar, auf welchen User die WS-Ressourcen gemünzt werden
(den WS-User / WS-Group). Mit diesem USer werden auch die Tools gestartet.



