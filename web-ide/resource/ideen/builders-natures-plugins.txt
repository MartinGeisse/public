
- builtin_plugins nur Fassade, kein auto-update

- Versionswechsel und dadurch nötige State-Flushes / Rebuilds per Events an
  die Builder melden.

- VMs würden dann grundsätzlich über einen "type" auswählen, welche VM-Implementierung
  gemeint ist, wenn das per "pluginId" gewählte Plugin mehrere zur Verfügung stellt.

- plugins: +plugin_public_id +active
	Was ist plugin_public_id bei builtin Plugins (mehrere Builder im builtin plugin -- doch einen sub-selector benutzen?)? Was bei staging?
	-> staging: pluginJsonWorkspacePath (durch den '/' am Anfang immer unterscheidbar)
	-> builtin: "!builtin"

- Refresh-Logik:
	InternalPluginUtil.updateUsersPlugins(): Zusätzlich zu dem was jetzt passiert: Updated
	die user_installed_plugins des Benutzers auf die neuesten Versionen.
	Zusätzlich werden States übertragen.
		- States gehören zu Bundles. Sie müssen zum *jeweiligen* Bundle der neuesten
		  Plugin-Version mit derselben public Id übertragen werden.
		  Idee: "internal Bundle Name" -> Plugin-lokal aber innerhalb des
		  	Plugins eindeutig. States werden zum Bundle mit demselben internal Name
		  	übertragen.
		- Es gibt keine Stelle, wo *alle* aktuell aktiven Plugins je Benutzer
		  festgehalten werden. Die könnte man aber schaffen.
		  Idee: Ist das nötig? Man kann die States je User finden und dazu
		  	die neuesten Plugins. -> Ja, aber nur solange keine Versions-Constraints
		  	aktiv sind. Wenn die kommen dann müssten auch die aktiven Plugins
		  	je Benutzer gelistet werden. Bis dahin gehts aber ohne.

- Zukunft evtl.: Zentral Plugins aufzählen, die für alle Buildpunkte gelten (z.B. um Javadoc
  für alle Java-Builds zu bauen; nicht-Java-Builds würden sich dieses Plugin zwar "einfangen"
  aber den entsprechenden EP nie abrufen)

Wie sieht diese Überlegung dann bei VMs aus?
- in der vm.json sind Plugins aufgezählt
- Falls mehrere VM-Types definiert wird spezifiziert, welcher gemeint ist
- Der VM-Type ist per EPs erweiterbar und diese kommen wieder aus den Plugins
- dieselbe vm.json wird vom kompletten VM-Aufbau verwendet, also VM und Ext.

Noch zu klären: Was ist mit State für Workspace-gebundene Plugin-Netzwerke?
Wird erst mal nicht unterstützt. Je nach Situation kann solcher State an das jeweilige
Plugin-Netzwerk gebunden sein oder den ganzen Workspace betreffen. 

-----

Weiteres Problem: Builder sollten auch per Ext. / EP erweiterbar sein. Beispiel: Java-Builder
wird als Plugin ausgeliefert und ein anderer Autor schreibt dafür eine Javadoc-Extension.
Die Frage ist jetzt. An welchem Punkt kommen Plugins dafür zusammen, und woher kommt die
Information *welche* Plugins das sind?

- Stufe 1: Steht alles in der build.json: Hier werden Plugins aufgezählt (public ID)
  und (?) ein Builder benannt [weglassen falls nur 1 Builder definiert, damit einfacher?].
  Der Builder ist selbst als Extension definiert und per EPs erweiterbar. Erweiterungen
  kommen auch aus den hier aufgezählten Plugins.
- dieselbe build.json wird vom kompletten Build-Aufbau verwendet, also Builder und Ext.

---

WorkspaceExtensionBindings würde vom BuildMapper gebaut wobei die workspaceId auch in das auflösen der Public IDs einfließt.
Die WorkspaceBuilders wäre dann unnötig. Die WorkspaceBuildTriggers braucht dann keine workspaceBuilderId
mehr sondern einen builderName (null falls nicht angegeben, dann muss er eindeutig sein).

Wenn ein Trigger ausgelöst wird, wird anhand der workspaceId und des buildscriptPath (-> anchorPath)
und extension point ID "builders" (oder wie auch immer genau der heißt) alle Builder-Extensions gesucht.
Entweder ist das genau eine oder der Builder-Name muss angegeben sein. Der Builder kann dann wiederum
auf den Build-Descriptor zugreifen (wie) sowie Extensions aus dem o.g. Ext-Netzwerk holen (wie?).

---

Builder Thread:

- WorkspaceExtensionBindings werden von der WorkspaceExtensionQuery on-demand erzeugt (unmöglich,
  "keine bindings" von "nicht gecached" zu unterscheiden, aber das ist ein Randfall der erst mal
  nicht optimiert werden muss) -> Das reicht nicht, weil Extensions immer mit einem EP-Name
  zusammen abgerufen werden. Keine Ergebnis kann also heißen:
  	- nicht gecached
  	- keine Extension *für diesen EP*
  und damit ist es kein Randfall mehr. Schnelle Lösung: Extra-Tabelle, in der vermerkt wird, ob
  für einen Anker ein Ergebnis vorliegt. Ablauf:
  	- Extensions abrufen, falls Ergebnis da -> return
  	- prüfen, ob vorhanden. Falls ja -> leeres Ergebnis
  	- Abrufen und speichern

----



