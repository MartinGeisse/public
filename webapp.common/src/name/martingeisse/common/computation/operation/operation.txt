
Erst mal die Frage: Welches Problem soll das Op-Framework eigentlich lösen? Hier kommen viele
Design-Fragen auf, die leicht beantwortet werden können, wenn das klar ist. z.B. ob Werte
anhand der Klasse, Key oder beides abgerufen werden.

Einfach mal ein paar typische Stories, wie das Op-Framework die Arbeit vereinfachen könnte.

------------------------------------------------------------------------------------------------------------------------
Story:

Ein Cronjob muss geschrieben werden. Dieser muss Datensätze nach bestimmten Conditions abrufen
und diese dann bearbeiten. Viele dieser Aufgaben treten bei vielen solchen Cronjobs auf:

- Logging, dass der Job läuft (wobei das noch das Cron-Framework machen könnte)
- DB-Verbindung aufbauen
- Daten anhand einer IExpression / EntityFilter abrufen; Logging, wie viele gefunden
- Looping & Loop-Logging
- Exception handling & Exception Logging
- Transaktion pro Datensatz (Die verschiedenen Datensätze haben nix miteinander zu tun; der
  Cronjob "erwischt" sie nur gleichzeitig)

Hier ist also eine Wrapper-Op für diese Aufgaben sinnvoll. Muss nicht aus mehreren bestehen;
diese Aufgaben kommen oft in genau dieser Kombination vor.

Benötigte Infrastruktur:

- Logging - check (log4j)
- DB Provider - aus Context
- DB-Verbindung weitergeben - per Context; evtl. werden mehrere benötigt, aber dann wissen
  beide Ops dass es genau diese beiden gibt, also z.B. "bekannte Keys".
- Daten weitergeben - Context oder direkter Parameter; direkter Parameter benötigt ein
  spezialisiertes Op-Interface; das wäre evtl. sogar sinnvoll - ein Interface für genau
  diesen Zweck. Für die DB-Verbindung ist das weniger sinnvoll, weil dann die DB-Funktionalität
  auch spezialisiert geschrieben werden müsste.
- Evtl: weit innen geschachtelten Funktionen signalisieren, dass schon eine T'on läuft

Pros:

- Checks am Datensatz können Unstimmigkeiten (z.B. Flags falsch gesetzt) durch Exceptions
  signalisieren
- Dieselbe Op kann manuell getriggert werden (z.B. Admin-Oberfläche), um eine vom Benutzer
  festgelegte Menge von Datensätzen zu bearbeiten. Dabei kann vieles übernommen werden;
  die Wrapper-Op wird evtl. ersetzt. Es ist ohne weiteres möglich, eine gemeinsame T'on
  statt einer T'on pro Datensatz zu benutzen, wenn das gewünscht ist -- die innere Op
  muss dafür nicht angepasst werden.
  
Offene Fragen:

- Benutzer-lesbare Logs ("process log"). Diese werden am besten von den internen Logs (log4j)
  getrennt; man will im log4j alles mögliche an internen Werten sehen, aber im Benutzer-Log
  nur die Dinge, die der Benutzer verstehen kann. Das Benutzerlog soll außerdem i18n'd
  werden, das interne Log muss das nicht. Möglich wäre es, für das Benutzer-Log einen
  Logging-Dienst über den Op-Context zur Verfügung zu stellen.

------------------------------------------------------------------------------------------------------------------------



------------------------------------------------------------------------------------------------------------------------

Ideen:

Kein extra Interface für JDBC

Transaction Handling:
- Wrapper-Operation, um "schnell" eine Operation mit einer t'on zu verpacken.
- Context Nodes, mit denen man herausfinden kann, ob zu einer Connection schon eine t'on läuft.

Connection Handling:
- Clients suchem im Context nach Connection / IConnectionProvider
- Wrapper-Operation, um eine Verbindung zur Verfügung zu stellen.

---

Wrapper-Operation, um Exceptions zu fangen ("Schnell-Wrapper"). Ansonsten können Ops das auch selbst tun.


