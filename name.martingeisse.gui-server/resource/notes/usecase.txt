
------------------------------------------------------------------------------------------------
General Features

[ok] tab panel (esp. lazy-loading)
[..] tab panel: URL segment für active tab (funzt noch nicht richtig)
[..] tab panel: links die trotzdem relativ zur page-url sind
[ok] enclosure
[..] popup window (lazy-loading content)
[..] pagination
[..] caching
[ok] lazy-loading
[..] 1-tag: kitten-captcha als tags um einen geschützten Bereich herum + ständig variierende Captcha-Sammlung mit einfachen Rätseln
[ok] charts mit Daten aus dem Backend; erzeugung als SVG mit JFreeSVG
[..] 1-tag: WebMarkupContainer zum Aufklappen und Lazyload
[..] 1-tag: WebMarkupContainer nur sichtbar wenn eingeloggt + authorisiert
[..] OT-editor
[..] wizards (AJAX-Wizards ähnlich Popups mit <ajaxWizard; Page-Wizards mit Pages, die <gui:wizard> als Root-Element haben
[..] translations (will have to override .properties files for built-in components)

------------------------------------------------------------------------------------------------
Forms

[ok] forms mit backend processing
[ok] required
[ok] GUI-side validation rules
[ok] Bootstrap core replacement + form markup

------------------------------------------------------------------------------------------------
Core Plugins

vorgebautes markup (passt im Zweifel nicht). Dafür gibt es "core replacement" plugins.
Diese stellen dieselben special tags zur verfügung wie der core, aber die elemente
machen teilweise andere dinge. Z.B. macht ein textField nicht nur das Feld selber sondern
auch alles runrum (layout, validation error, ...) mit vorgebautem markup, z.B. bootstrap.
Man benutzt dann einfach übrerall dieses Plugin *statt* dem core, was geht, weil alle
core tags vom plugin gespiegelt werden (dafür ist kein besonderer code nötig, das plugin
definiert einfach elemente die dasselbe tun. Man bindet dann das plugin statt dem core
unter dem prefix gui: im XML ein.

------------------------------------------------------------------------------------------------
AJAX Links

Werden auch vom GUI-Server als AJAX-Links ausgegeben. Submit als Wicket/AJAX an den
GUI-Server, dann als Backend-JSON-request, als BAckend-JSON-response zurück vom Backend,
dann als Wicket/AJAX Response zurück an die GUI. Das Backend-JSON-Objekt hat dann
ähnliche Fähigkeiten wie Wicket/AJAX, aber auf höherer Ebene.

Ladedreher: Der gui:ajaxLink steht in einem gui:ajaxLinkContext (default: page)
und innerhalb von diesem werden *alle* / der *erste* Ladedreher sichtbar, diese
sind per gui:ajaxLoadingIndicator gekennzeichnet.
