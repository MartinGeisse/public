
- downloaded config files should be cached on a file-by-file basis
	(multiple files possible using includes)

Handle things like auto-generated configuration pages:
don't dynamically generate the GUI configuration. Use a fixed GUI configuration
that behaves differently based on the data.


<switch model="m1">
    <case value="foo.bar">
        Visible if m1.foo.bar == true when coerced to boolean
    </case>
    <case value="foo.baz">
        Visible if the first case didn't match and
            m1.foo.baz == true when coerced to boolean
    </case>
    <case value="blarp" model="m2">
        the model from the switch element is just the default
    </case>
    <default>
        Visible if none of the previous cases match. Similar to value="true",
        but also works when the input value is different (see below)
    </default>
</switch>

<switch model="m1" multi="true">
    ...
    multiple cases may apply, not just the first matching one
    default case still applies if no other case does

<switch model="m1" value="foo.bar">
    ...
    compares m1.foo.bar to the value for each case. foo.bar dictates the type.
    ...
    <case value="foo.baz">
        applies if foo.bar == foo.baz when the latter is coerced to the type of the former
    </case>
    <case value="5">
        applies if foo.bar == (typeof(foo.bar))5

TYPE COERCION ISN'T GOOD THE WAY IT IS DEFINED ABOVE!

<switch model="m1" value="foo.bar" type="int">
    ...
    coerces both values to int type

MIGHT WANT TO REQUIRE THE "type" ATTRIBUTE IF "value" IS PRESENT AS THE <switch>
->
might require type="" if value="" is present AND NOT (cases are all constants
of the same type). With all cases being constants of the same type, the type
coercion is obvious. Without value="" at the switch, the type is boolean and
the value is true.
