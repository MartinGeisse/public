
Übrelegung:
ComponentConfiguration --> ComponentFactory

Dann funktioniert allerdings die Idee mit Visitor Pattern auf diesen
Objekten schlechter -- dass ein Visitor auf den Factories läuft, um
Eigenschaften der erzeugten Objekte zu bestimmen, passt nicht so recht
zu Factories. Das wird aktuell aber nur für URL mounting benutzt und
es ist unklar, ob es für andere Fälle überhaupt passt.

Anderes Problem: Je mehr allgemeine Factories "nur zusammengesteckt"
werden, desto mehr wandert Logik in den Parser-Code, der diese
zusammensteckt.

-->
Macht es sinn, von Configurations auf Factories zu wechseln?

Die Absicht war es, Component-Libs mit vorgebautem Markup (so wie bei
Bootstrap) besonders einfach zu unterstützen. Das würde auch gehen,
indem ein Bootstrap-spezifischer Parser entsprechendes Markup erzeugt,
aber die gleichen ComponentConfigs. Da hier wieder die Logik im Parser
steckt und die Configs dieselben sind, entspricht dies dem
Grundgedanken von ComponentFactories. ComponentConfigs würden Logik
in den Configs / Components lassen. Wobei das nicht so hart zu sehen
ist, weil Wicket selbst ja schon immer die Kombination aus
Components + Markup kennt, und dem Markup eine eigene Wichtigkeit gibt.

Weniger wichtig und evtl. sogar nicht sinnvoll ist es, dieses
wiederverwendbare Markup nicht im Parser, sondern per Panels zu erzeugen.
Das ist super umständlich und es ist durch den Overhead von Wicket
auch nicht gesichert, dass das die Performance gegenüber Raw Markup
verbessert.

Ich bleibe jetzt erst mal bei Component Configs und gehe nicht zu
Factories, solange nicht klar ist, dass das sinnvoller ist. Der
Bootstrap-Kram wird vor allem über Markup gelöst. Special-Tags wie
z.B. die für Formularfelder erzeugen reichlich Markup über den
Markup writer und *mehrere* Component Configs, aber keine
*spezialisierten* Conmponent Configs.

Das ganze wird erst mal mit Bootstrap-spezifischen Special Tags
gelöst, nicht mit einem eigenen Parser und auch nicht mit einem
eigenen XML-Namespace. Das kommt dann ggf. später.
