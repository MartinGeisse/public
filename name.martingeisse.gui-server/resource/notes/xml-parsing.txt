
Basic ideas:

1. configuration elements + parsers for them
	- two classes for each feature, but re-use in the parses probably possible
	- best re-use when using reflection-based calls to constructors and setters
	- unlike simple XML data bindings, this is a data binding with raw markup support
	- why represent parsers as objects, not code? apart from the fact that DDD suggests so?
		--> because objects can be combined more freely. A single one-liner that
			puts some parser objects together has the power of ten lines of code.
			(Code could do this only if it could be combined the same way, e.g. in Lisp)
			...
			Combining code in Java also makes it easier to make mistakes that are hard to
			debug (e.g. skipping one tag too far in the XML); missing a break statement
			in a switch.

2. configuration elements that can parse themselves
	- SOLID violated, but only one class per feature

3. parsers + generic data containers
	--> untyped configuration elements --> bad!
